{"ast":null,"code":"'use strict';\n\nimport NativeAnimatedHelper from '../../../src/private/animated/NativeAnimatedHelper';\nimport AnimatedColor from '../nodes/AnimatedColor';\nimport * as SpringConfig from '../SpringConfig';\nimport Animation from './Animation';\nimport invariant from 'invariant';\nexport default class SpringAnimation extends Animation {\n  constructor(config) {\n    super();\n    this._overshootClamping = void 0;\n    this._restDisplacementThreshold = void 0;\n    this._restSpeedThreshold = void 0;\n    this._lastVelocity = void 0;\n    this._startPosition = void 0;\n    this._lastPosition = void 0;\n    this._fromValue = void 0;\n    this._toValue = void 0;\n    this._stiffness = void 0;\n    this._damping = void 0;\n    this._mass = void 0;\n    this._initialVelocity = void 0;\n    this._delay = void 0;\n    this._timeout = void 0;\n    this._startTime = void 0;\n    this._lastTime = void 0;\n    this._frameTime = void 0;\n    this._onUpdate = void 0;\n    this._animationFrame = void 0;\n    this._useNativeDriver = void 0;\n    this._platformConfig = void 0;\n    this._overshootClamping = config.overshootClamping ?? false;\n    this._restDisplacementThreshold = config.restDisplacementThreshold ?? 0.001;\n    this._restSpeedThreshold = config.restSpeedThreshold ?? 0.001;\n    this._initialVelocity = config.velocity ?? 0;\n    this._lastVelocity = config.velocity ?? 0;\n    this._toValue = config.toValue;\n    this._delay = config.delay ?? 0;\n    this._useNativeDriver = NativeAnimatedHelper.shouldUseNativeDriver(config);\n    this._platformConfig = config.platformConfig;\n    this.__isInteraction = config.isInteraction ?? !this._useNativeDriver;\n    this.__iterations = config.iterations ?? 1;\n    if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {\n      invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      this._stiffness = config.stiffness ?? 100;\n      this._damping = config.damping ?? 10;\n      this._mass = config.mass ?? 1;\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      const springConfig = SpringConfig.fromBouncinessAndSpeed(config.bounciness ?? 8, config.speed ?? 12);\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    } else {\n      const springConfig = SpringConfig.fromOrigamiTensionAndFriction(config.tension ?? 40, config.friction ?? 7);\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    }\n    invariant(this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(this._damping > 0, 'Damping value must be greater than 0');\n    invariant(this._mass > 0, 'Mass value must be greater than 0');\n  }\n  __getNativeAnimationConfig() {\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: this._initialVelocity ?? this._lastVelocity,\n      toValue: this._toValue,\n      iterations: this.__iterations,\n      platformConfig: this._platformConfig\n    };\n  }\n  start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n    if (previousAnimation instanceof SpringAnimation) {\n      const internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity;\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n    const start = () => {\n      if (!this._useNativeDriver && animatedValue.__isNative === true) {\n        throw new Error('Attempting to run JS driven animation on animated node ' + 'that has been moved to \"native\" earlier by starting an ' + 'animation with `useNativeDriver: true`');\n      }\n      if (this._useNativeDriver) {\n        this.__startNativeAnimation(animatedValue);\n      } else {\n        this.onUpdate();\n      }\n    };\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  }\n  getInternalState() {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime\n    };\n  }\n  onUpdate() {\n    const MAX_STEPS = 64;\n    let now = Date.now();\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n    const deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n    const c = this._damping;\n    const m = this._mass;\n    const k = this._stiffness;\n    const v0 = -this._initialVelocity;\n    const zeta = c / (2 * Math.sqrt(k * m));\n    const omega0 = Math.sqrt(k / m);\n    const omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);\n    const x0 = this._toValue - this._startPosition;\n    let position = 0.0;\n    let velocity = 0.0;\n    const t = this._frameTime;\n    if (zeta < 1) {\n      const envelope = Math.exp(-zeta * omega0 * t);\n      position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));\n      velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      const envelope = Math.exp(-omega0 * t);\n      position = this._toValue - envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity = envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n    this._onUpdate(position);\n    if (!this.__active) {\n      return;\n    }\n    let isOvershooting = false;\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n    const isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n    let isDisplacement = true;\n    if (this._stiffness !== 0) {\n      isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n    if (isOvershooting || isVelocity && isDisplacement) {\n      if (this._stiffness !== 0) {\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n        this._onUpdate(this._toValue);\n      }\n      this.__debouncedOnEnd({\n        finished: true\n      });\n      return;\n    }\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  }\n  stop() {\n    super.stop();\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n    this.__debouncedOnEnd({\n      finished: false\n    });\n  }\n}","map":{"version":3,"names":["NativeAnimatedHelper","AnimatedColor","SpringConfig","Animation","invariant","SpringAnimation","constructor","config","_overshootClamping","_restDisplacementThreshold","_restSpeedThreshold","_lastVelocity","_startPosition","_lastPosition","_fromValue","_toValue","_stiffness","_damping","_mass","_initialVelocity","_delay","_timeout","_startTime","_lastTime","_frameTime","_onUpdate","_animationFrame","_useNativeDriver","_platformConfig","overshootClamping","restDisplacementThreshold","restSpeedThreshold","velocity","toValue","delay","shouldUseNativeDriver","platformConfig","__isInteraction","isInteraction","__iterations","iterations","stiffness","undefined","damping","mass","bounciness","speed","tension","friction","springConfig","fromBouncinessAndSpeed","fromOrigamiTensionAndFriction","__getNativeAnimationConfig","type","initialVelocity","start","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","__active","__onEnd","Date","now","internalState","getInternalState","lastPosition","lastVelocity","lastTime","__isNative","Error","__startNativeAnimation","setTimeout","MAX_STEPS","deltaTime","c","m","k","v0","zeta","Math","sqrt","omega0","omega1","x0","position","t","envelope","exp","sin","cos","isOvershooting","isVelocity","abs","isDisplacement","__debouncedOnEnd","finished","requestAnimationFrame","bind","stop","clearTimeout","global","cancelAnimationFrame"],"sources":["F:/MiniProject/node_modules/react-native/Libraries/Animated/animations/SpringAnimation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {PlatformConfig} from '../AnimatedPlatformConfig';\nimport type AnimatedInterpolation from '../nodes/AnimatedInterpolation';\nimport type AnimatedValue from '../nodes/AnimatedValue';\nimport type AnimatedValueXY from '../nodes/AnimatedValueXY';\nimport type {AnimationConfig, EndCallback} from './Animation';\n\nimport NativeAnimatedHelper from '../../../src/private/animated/NativeAnimatedHelper';\nimport AnimatedColor from '../nodes/AnimatedColor';\nimport * as SpringConfig from '../SpringConfig';\nimport Animation from './Animation';\nimport invariant from 'invariant';\n\nexport type SpringAnimationConfig = {\n  ...AnimationConfig,\n  toValue:\n    | number\n    | AnimatedValue\n    | {\n        x: number,\n        y: number,\n        ...\n      }\n    | AnimatedValueXY\n    | {\n        r: number,\n        g: number,\n        b: number,\n        a: number,\n        ...\n      }\n    | AnimatedColor\n    | AnimatedInterpolation<number>,\n  overshootClamping?: boolean,\n  restDisplacementThreshold?: number,\n  restSpeedThreshold?: number,\n  velocity?:\n    | number\n    | {\n        x: number,\n        y: number,\n        ...\n      },\n  bounciness?: number,\n  speed?: number,\n  tension?: number,\n  friction?: number,\n  stiffness?: number,\n  damping?: number,\n  mass?: number,\n  delay?: number,\n};\n\nexport type SpringAnimationConfigSingle = {\n  ...AnimationConfig,\n  toValue: number,\n  overshootClamping?: boolean,\n  restDisplacementThreshold?: number,\n  restSpeedThreshold?: number,\n  velocity?: number,\n  bounciness?: number,\n  speed?: number,\n  tension?: number,\n  friction?: number,\n  stiffness?: number,\n  damping?: number,\n  mass?: number,\n  delay?: number,\n};\n\nexport default class SpringAnimation extends Animation {\n  _overshootClamping: boolean;\n  _restDisplacementThreshold: number;\n  _restSpeedThreshold: number;\n  _lastVelocity: number;\n  _startPosition: number;\n  _lastPosition: number;\n  _fromValue: number;\n  _toValue: number;\n  _stiffness: number;\n  _damping: number;\n  _mass: number;\n  _initialVelocity: number;\n  _delay: number;\n  _timeout: any;\n  _startTime: number;\n  _lastTime: number;\n  _frameTime: number;\n  _onUpdate: (value: number) => void;\n  _animationFrame: any;\n  _useNativeDriver: boolean;\n  _platformConfig: ?PlatformConfig;\n\n  constructor(config: SpringAnimationConfigSingle) {\n    super();\n\n    this._overshootClamping = config.overshootClamping ?? false;\n    this._restDisplacementThreshold = config.restDisplacementThreshold ?? 0.001;\n    this._restSpeedThreshold = config.restSpeedThreshold ?? 0.001;\n    this._initialVelocity = config.velocity ?? 0;\n    this._lastVelocity = config.velocity ?? 0;\n    this._toValue = config.toValue;\n    this._delay = config.delay ?? 0;\n    this._useNativeDriver = NativeAnimatedHelper.shouldUseNativeDriver(config);\n    this._platformConfig = config.platformConfig;\n    this.__isInteraction = config.isInteraction ?? !this._useNativeDriver;\n    this.__iterations = config.iterations ?? 1;\n\n    if (\n      config.stiffness !== undefined ||\n      config.damping !== undefined ||\n      config.mass !== undefined\n    ) {\n      invariant(\n        config.bounciness === undefined &&\n          config.speed === undefined &&\n          config.tension === undefined &&\n          config.friction === undefined,\n        'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one',\n      );\n      this._stiffness = config.stiffness ?? 100;\n      this._damping = config.damping ?? 10;\n      this._mass = config.mass ?? 1;\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      // Convert the origami bounciness/speed values to stiffness/damping\n      // We assume mass is 1.\n      invariant(\n        config.tension === undefined &&\n          config.friction === undefined &&\n          config.stiffness === undefined &&\n          config.damping === undefined &&\n          config.mass === undefined,\n        'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one',\n      );\n      const springConfig = SpringConfig.fromBouncinessAndSpeed(\n        config.bounciness ?? 8,\n        config.speed ?? 12,\n      );\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    } else {\n      // Convert the origami tension/friction values to stiffness/damping\n      // We assume mass is 1.\n      const springConfig = SpringConfig.fromOrigamiTensionAndFriction(\n        config.tension ?? 40,\n        config.friction ?? 7,\n      );\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    }\n\n    invariant(this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(this._damping > 0, 'Damping value must be greater than 0');\n    invariant(this._mass > 0, 'Mass value must be greater than 0');\n  }\n\n  __getNativeAnimationConfig(): {|\n    damping: number,\n    initialVelocity: number,\n    iterations: number,\n    mass: number,\n    platformConfig: ?PlatformConfig,\n    overshootClamping: boolean,\n    restDisplacementThreshold: number,\n    restSpeedThreshold: number,\n    stiffness: number,\n    toValue: any,\n    type: $TEMPORARY$string<'spring'>,\n  |} {\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: this._initialVelocity ?? this._lastVelocity,\n      toValue: this._toValue,\n      iterations: this.__iterations,\n      platformConfig: this._platformConfig,\n    };\n  }\n\n  start(\n    fromValue: number,\n    onUpdate: (value: number) => void,\n    onEnd: ?EndCallback,\n    previousAnimation: ?Animation,\n    animatedValue: AnimatedValue,\n  ): void {\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n\n    if (previousAnimation instanceof SpringAnimation) {\n      const internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity;\n      // Set the initial velocity to the last velocity\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n\n    const start = () => {\n      if (!this._useNativeDriver && animatedValue.__isNative === true) {\n        throw new Error(\n          'Attempting to run JS driven animation on animated node ' +\n            'that has been moved to \"native\" earlier by starting an ' +\n            'animation with `useNativeDriver: true`',\n        );\n      }\n\n      if (this._useNativeDriver) {\n        this.__startNativeAnimation(animatedValue);\n      } else {\n        this.onUpdate();\n      }\n    };\n\n    //  If this._delay is more than 0, we start after the timeout.\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  }\n\n  getInternalState(): Object {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime,\n    };\n  }\n\n  /**\n   * This spring model is based off of a damped harmonic oscillator\n   * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).\n   *\n   * We use the closed form of the second order differential equation:\n   *\n   * x'' + (2ζ⍵_0)x' + ⍵^2x = 0\n   *\n   * where\n   *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),\n   *    ζ = c / 2√mk (damping ratio),\n   *    c = damping constant\n   *    k = stiffness\n   *    m = mass\n   *\n   * The derivation of the closed form is described in detail here:\n   * http://planetmath.org/sites/default/files/texpdf/39745.pdf\n   *\n   * This algorithm happens to match the algorithm used by CASpringAnimation,\n   * a QuartzCore (iOS) API that creates spring animations.\n   */\n  onUpdate(): void {\n    // If for some reason we lost a lot of frames (e.g. process large payload or\n    // stopped in the debugger), we only advance by 4 frames worth of\n    // computation and will continue on the next frame. It's better to have it\n    // running at faster speed than jumping to the end.\n    const MAX_STEPS = 64;\n    let now = Date.now();\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n\n    const deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n\n    const c: number = this._damping;\n    const m: number = this._mass;\n    const k: number = this._stiffness;\n    const v0: number = -this._initialVelocity;\n\n    const zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n    const omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n    const omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay\n    const x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0\n\n    let position = 0.0;\n    let velocity = 0.0;\n    const t = this._frameTime;\n    if (zeta < 1) {\n      // Under damped\n      const envelope = Math.exp(-zeta * omega0 * t);\n      position =\n        this._toValue -\n        envelope *\n          (((v0 + zeta * omega0 * x0) / omega1) * Math.sin(omega1 * t) +\n            x0 * Math.cos(omega1 * t));\n      // This looks crazy -- it's actually just the derivative of the\n      // oscillation function\n      velocity =\n        zeta *\n          omega0 *\n          envelope *\n          ((Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0)) / omega1 +\n            x0 * Math.cos(omega1 * t)) -\n        envelope *\n          (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) -\n            omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      // Critically damped\n      const envelope = Math.exp(-omega0 * t);\n      position = this._toValue - envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity =\n        envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n\n    this._onUpdate(position);\n    if (!this.__active) {\n      // a listener might have stopped us in _onUpdate\n      return;\n    }\n\n    // Conditions for stopping the spring animation\n    let isOvershooting = false;\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n    const isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n    let isDisplacement = true;\n    if (this._stiffness !== 0) {\n      isDisplacement =\n        Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n\n    if (isOvershooting || (isVelocity && isDisplacement)) {\n      if (this._stiffness !== 0) {\n        // Ensure that we end up with a round value\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n        this._onUpdate(this._toValue);\n      }\n\n      this.__debouncedOnEnd({finished: true});\n      return;\n    }\n    // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  }\n\n  stop(): void {\n    super.stop();\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n    this.__debouncedOnEnd({finished: false});\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
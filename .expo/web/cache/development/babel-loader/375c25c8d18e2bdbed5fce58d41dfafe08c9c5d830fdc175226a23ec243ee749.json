{"ast":null,"code":"export class EventEmitter {\n  constructor() {\n    this.listeners = void 0;\n  }\n  addListener(eventName, listener) {\n    if (!this.listeners) {\n      this.listeners = new Map();\n    }\n    if (!this.listeners?.has(eventName)) {\n      this.listeners?.set(eventName, new Set());\n    }\n    const previousListenerCount = this.listenerCount(eventName);\n    this.listeners?.get(eventName)?.add(listener);\n    if (previousListenerCount === 0 && this.listenerCount(eventName) === 1) {\n      this.startObserving(eventName);\n    }\n    return {\n      remove: () => {\n        this.removeListener(eventName, listener);\n      }\n    };\n  }\n  removeListener(eventName, listener) {\n    const hasRemovedListener = this.listeners?.get(eventName)?.delete(listener);\n    if (this.listenerCount(eventName) === 0 && hasRemovedListener) {\n      this.stopObserving(eventName);\n    }\n  }\n  removeAllListeners(eventName) {\n    const previousListenerCount = this.listenerCount(eventName);\n    this.listeners?.get(eventName)?.clear();\n    if (previousListenerCount > 0) {\n      this.stopObserving(eventName);\n    }\n  }\n  emit(eventName, ...args) {\n    const listeners = new Set(this.listeners?.get(eventName));\n    listeners.forEach(listener => {\n      try {\n        listener(...args);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n  }\n  listenerCount(eventName) {\n    return this.listeners?.get(eventName)?.size ?? 0;\n  }\n  startObserving(eventName) {}\n  stopObserving(eventName) {}\n}\nexport class NativeModule extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n    this.ViewPrototypes = void 0;\n    this.__expo_module_name__ = void 0;\n  }\n}\nexport class SharedObject extends EventEmitter {\n  release() {}\n}\nexport class SharedRef extends SharedObject {\n  constructor(...args) {\n    super(...args);\n    this.nativeRefType = 'unknown';\n  }\n}","map":{"version":3,"names":["EventEmitter","constructor","listeners","addListener","eventName","listener","Map","has","set","Set","previousListenerCount","listenerCount","get","add","startObserving","remove","removeListener","hasRemovedListener","delete","stopObserving","removeAllListeners","clear","emit","args","forEach","error","console","size","NativeModule","ViewPrototypes","__expo_module_name__","SharedObject","release","SharedRef","nativeRefType"],"sources":["F:/MiniProject/node_modules/expo-modules-core/src/polyfill/CoreModule.ts"],"sourcesContent":["import {\n  type EventEmitter as EventEmitterType,\n  type EventSubscription,\n  EventsMap,\n} from '../ts-declarations/EventEmitter';\nimport type { NativeModule as NativeModuleType } from '../ts-declarations/NativeModule';\nimport type { SharedObject as SharedObjectType } from '../ts-declarations/SharedObject';\nimport type { SharedRef as SharedRefType } from '../ts-declarations/SharedRef';\n\nexport class EventEmitter<TEventsMap extends EventsMap> implements EventEmitterType {\n  private listeners?: Map<keyof TEventsMap, Set<Function>>;\n\n  addListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): EventSubscription {\n    if (!this.listeners) {\n      this.listeners = new Map();\n    }\n    if (!this.listeners?.has(eventName)) {\n      this.listeners?.set(eventName, new Set());\n    }\n\n    const previousListenerCount = this.listenerCount(eventName);\n\n    this.listeners?.get(eventName)?.add(listener);\n\n    if (previousListenerCount === 0 && this.listenerCount(eventName) === 1) {\n      this.startObserving(eventName);\n    }\n\n    return {\n      remove: () => {\n        this.removeListener(eventName, listener);\n      },\n    };\n  }\n\n  removeListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): void {\n    const hasRemovedListener = this.listeners?.get(eventName)?.delete(listener);\n    if (this.listenerCount(eventName) === 0 && hasRemovedListener) {\n      this.stopObserving(eventName);\n    }\n  }\n\n  removeAllListeners<EventName extends keyof TEventsMap>(eventName: EventName): void {\n    const previousListenerCount = this.listenerCount(eventName);\n    this.listeners?.get(eventName)?.clear();\n    if (previousListenerCount > 0) {\n      this.stopObserving(eventName);\n    }\n  }\n\n  emit<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    ...args: Parameters<TEventsMap[EventName]>\n  ): void {\n    const listeners = new Set(this.listeners?.get(eventName));\n\n    listeners.forEach((listener) => {\n      // When the listener throws an error, don't stop the execution of subsequent listeners and\n      // don't propagate the error to the `emit` function. The motivation behind this is that\n      // errors thrown from a module or user's code shouldn't affect other modules' behavior.\n      try {\n        listener(...args);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n  }\n\n  listenerCount<EventName extends keyof TEventsMap>(eventName: EventName): number {\n    return this.listeners?.get(eventName)?.size ?? 0;\n  }\n\n  startObserving<EventName extends keyof TEventsMap>(eventName: EventName): void {}\n\n  stopObserving<EventName extends keyof TEventsMap>(eventName: EventName): void {}\n}\n\nexport class NativeModule<TEventsMap extends Record<never, never>>\n  extends EventEmitter<TEventsMap>\n  implements NativeModuleType\n{\n  [key: string]: any;\n  ViewPrototypes?: { [viewName: string]: object };\n  __expo_module_name__?: string;\n}\n\nexport class SharedObject<TEventsMap extends Record<never, never>>\n  extends EventEmitter<TEventsMap>\n  implements SharedObjectType\n{\n  release(): void {\n    // no-op on Web, but subclasses can override it if needed.\n  }\n}\n\nexport class SharedRef<\n    TNativeRefType extends string = 'unknown',\n    TEventsMap extends EventsMap = Record<never, never>,\n  >\n  extends SharedObject<TEventsMap>\n  implements SharedRefType<TNativeRefType>\n{\n  nativeRefType: string = 'unknown';\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
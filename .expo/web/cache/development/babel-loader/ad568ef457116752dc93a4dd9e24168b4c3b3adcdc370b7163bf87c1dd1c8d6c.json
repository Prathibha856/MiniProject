{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/classPrivateFieldLooseKey\";\nconst _excluded = [\"experimental_endDraggingSensitivityMultiplier\"];\nvar _jsxFileName = \"F:\\\\MiniProject\\\\node_modules\\\\react-native\\\\Libraries\\\\Components\\\\ScrollView\\\\ScrollView.js\";\nimport { HScrollContentViewNativeComponent, HScrollViewNativeComponent } from '../../../src/private/components/HScrollViewNativeComponents';\nimport { VScrollContentViewNativeComponent, VScrollViewNativeComponent } from '../../../src/private/components/VScrollViewNativeComponents';\nimport AnimatedImplementation from '../../Animated/AnimatedImplementation';\nimport FrameRateLogger from '../../Interaction/FrameRateLogger';\nimport { findNodeHandle } from '../../ReactNative/RendererProxy';\nimport UIManager from '../../ReactNative/UIManager';\nimport flattenStyle from '../../StyleSheet/flattenStyle';\nimport splitLayoutProps from '../../StyleSheet/splitLayoutProps';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport Dimensions from '../../Utilities/Dimensions';\nimport dismissKeyboard from '../../Utilities/dismissKeyboard';\nimport Platform from '../../Utilities/Platform';\nimport EventEmitter from '../../vendor/emitter/EventEmitter';\nimport Keyboard from '../Keyboard/Keyboard';\nimport TextInputState from '../TextInput/TextInputState';\nimport processDecelerationRate from './processDecelerationRate';\nimport Commands from './ScrollViewCommands';\nimport ScrollViewContext, { HORIZONTAL, VERTICAL } from './ScrollViewContext';\nimport ScrollViewStickyHeader from './ScrollViewStickyHeader';\nimport invariant from 'invariant';\nimport memoize from 'memoize-one';\nimport nullthrows from 'nullthrows';\nimport * as React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\nvar _onScrollEmitter = _classPrivateFieldLooseKey(\"onScrollEmitter\");\nclass ScrollView extends React.Component {\n  constructor(props) {\n    super(props);\n    this._scrollAnimatedValue = void 0;\n    this._scrollAnimatedValueAttachment = null;\n    this._stickyHeaderRefs = new Map();\n    this._headerLayoutYs = new Map();\n    this._keyboardMetrics = null;\n    this._additionalScrollOffset = 0;\n    this._isTouching = false;\n    this._lastMomentumScrollBeginTime = 0;\n    this._lastMomentumScrollEndTime = 0;\n    this._observedScrollSinceBecomingResponder = false;\n    this._becameResponderWhileAnimating = false;\n    this._preventNegativeScrollOffset = null;\n    this._animated = null;\n    this._subscriptionKeyboardWillShow = null;\n    this._subscriptionKeyboardWillHide = null;\n    this._subscriptionKeyboardDidShow = null;\n    this._subscriptionKeyboardDidHide = null;\n    Object.defineProperty(this, _onScrollEmitter, {\n      writable: true,\n      value: null\n    });\n    this.state = {\n      layoutHeight: null\n    };\n    this.getScrollResponder = () => {\n      return this;\n    };\n    this.getScrollableNode = () => {\n      return findNodeHandle(this.getNativeScrollRef());\n    };\n    this.getInnerViewNode = () => {\n      return findNodeHandle(this._innerView.nativeInstance);\n    };\n    this.getInnerViewRef = () => {\n      return this._innerView.nativeInstance;\n    };\n    this.getNativeScrollRef = () => {\n      const {\n        nativeInstance\n      } = this._scrollView;\n      return nativeInstance == null ? null : nativeInstance.componentRef.current;\n    };\n    this.scrollTo = (options, deprecatedX, deprecatedAnimated) => {\n      let x, y, animated;\n      if (typeof options === 'number') {\n        console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');\n        y = options;\n        x = deprecatedX;\n        animated = deprecatedAnimated;\n      } else if (options) {\n        y = options.y;\n        x = options.x;\n        animated = options.animated;\n      }\n      const component = this.getNativeScrollRef();\n      if (component == null) {\n        return;\n      }\n      Commands.scrollTo(component, x || 0, y || 0, animated !== false);\n    };\n    this.scrollToEnd = options => {\n      const animated = (options && options.animated) !== false;\n      const component = this.getNativeScrollRef();\n      if (component == null) {\n        return;\n      }\n      Commands.scrollToEnd(component, animated);\n    };\n    this.flashScrollIndicators = () => {\n      const component = this.getNativeScrollRef();\n      if (component == null) {\n        return;\n      }\n      Commands.flashScrollIndicators(component);\n    };\n    this._subscribeToOnScroll = callback => {\n      let onScrollEmitter = _classPrivateFieldLooseBase(this, _onScrollEmitter)[_onScrollEmitter];\n      if (onScrollEmitter == null) {\n        onScrollEmitter = new EventEmitter();\n        _classPrivateFieldLooseBase(this, _onScrollEmitter)[_onScrollEmitter] = onScrollEmitter;\n        this._scrollView.nativeInstance?.unstable_setEnableSyncOnScroll(true);\n      }\n      return onScrollEmitter.addListener('scroll', callback);\n    };\n    this.scrollResponderScrollNativeHandleToKeyboard = (nodeHandle, additionalOffset, preventNegativeScrollOffset) => {\n      this._additionalScrollOffset = additionalOffset || 0;\n      this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;\n      if (this._innerView.nativeInstance == null) {\n        return;\n      }\n      if (typeof nodeHandle === 'number') {\n        UIManager.measureLayout(nodeHandle, nullthrows(findNodeHandle(this)), this._textInputFocusError, this._inputMeasureAndScrollToKeyboard);\n      } else {\n        nodeHandle.measureLayout(this._innerView.nativeInstance, this._inputMeasureAndScrollToKeyboard, this._textInputFocusError);\n      }\n    };\n    this.scrollResponderZoomTo = (rect, animated) => {\n      invariant(Platform.OS === 'ios', 'zoomToRect is not implemented');\n      if ('animated' in rect) {\n        this._animated = rect.animated;\n        delete rect.animated;\n      } else if (typeof animated !== 'undefined') {\n        console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');\n      }\n      const component = this.getNativeScrollRef();\n      if (component == null) {\n        return;\n      }\n      Commands.zoomToRect(component, rect, animated !== false);\n    };\n    this._inputMeasureAndScrollToKeyboard = (left, top, width, height) => {\n      let keyboardScreenY = Dimensions.get('window').height;\n      const scrollTextInputIntoVisibleRect = () => {\n        if (this._keyboardMetrics != null) {\n          keyboardScreenY = this._keyboardMetrics.screenY;\n        }\n        let scrollOffsetY = top - keyboardScreenY + height + this._additionalScrollOffset;\n        if (this._preventNegativeScrollOffset === true) {\n          scrollOffsetY = Math.max(0, scrollOffsetY);\n        }\n        this.scrollTo({\n          x: 0,\n          y: scrollOffsetY,\n          animated: true\n        });\n        this._additionalScrollOffset = 0;\n        this._preventNegativeScrollOffset = false;\n      };\n      if (this._keyboardMetrics == null) {\n        setTimeout(() => {\n          scrollTextInputIntoVisibleRect();\n        }, 0);\n      } else {\n        scrollTextInputIntoVisibleRect();\n      }\n    };\n    this._handleScroll = e => {\n      this._observedScrollSinceBecomingResponder = true;\n      this.props.onScroll && this.props.onScroll(e);\n      _classPrivateFieldLooseBase(this, _onScrollEmitter)[_onScrollEmitter]?.emit('scroll', {\n        x: e.nativeEvent.contentOffset.x,\n        y: e.nativeEvent.contentOffset.y\n      });\n    };\n    this._handleLayout = e => {\n      if (this.props.invertStickyHeaders === true) {\n        this.setState({\n          layoutHeight: e.nativeEvent.layout.height\n        });\n      }\n      if (this.props.onLayout) {\n        this.props.onLayout(e);\n      }\n    };\n    this._handleContentOnLayout = e => {\n      const {\n        width,\n        height\n      } = e.nativeEvent.layout;\n      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);\n    };\n    this._innerView = createRefForwarder(instance => instance);\n    this._scrollView = createRefForwarder(nativeImperativeHandle => {\n      const nativeInstance = nativeImperativeHandle.componentRef.current;\n      if (nativeInstance == null) {\n        return null;\n      }\n      const publicInstance = Object.assign(nativeInstance, {\n        getScrollResponder: this.getScrollResponder,\n        getScrollableNode: this.getScrollableNode,\n        getInnerViewNode: this.getInnerViewNode,\n        getInnerViewRef: this.getInnerViewRef,\n        getNativeScrollRef: this.getNativeScrollRef,\n        scrollTo: this.scrollTo,\n        scrollToEnd: this.scrollToEnd,\n        flashScrollIndicators: this.flashScrollIndicators,\n        scrollResponderZoomTo: this.scrollResponderZoomTo,\n        unstable_subscribeToOnScroll: this._subscribeToOnScroll,\n        scrollResponderScrollNativeHandleToKeyboard: this.scrollResponderScrollNativeHandleToKeyboard\n      });\n      return publicInstance;\n    });\n    this.scrollResponderKeyboardWillShow = e => {\n      this._keyboardMetrics = e.endCoordinates;\n      this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\n    };\n    this.scrollResponderKeyboardWillHide = e => {\n      this._keyboardMetrics = null;\n      this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\n    };\n    this.scrollResponderKeyboardDidShow = e => {\n      this._keyboardMetrics = e.endCoordinates;\n      this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\n    };\n    this.scrollResponderKeyboardDidHide = e => {\n      this._keyboardMetrics = null;\n      this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\n    };\n    this._handleMomentumScrollBegin = e => {\n      this._lastMomentumScrollBeginTime = global.performance.now();\n      this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n    };\n    this._handleMomentumScrollEnd = e => {\n      FrameRateLogger.endScroll();\n      this._lastMomentumScrollEndTime = global.performance.now();\n      this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n    };\n    this._handleScrollBeginDrag = e => {\n      FrameRateLogger.beginScroll();\n      if (Platform.OS === 'android' && this.props.keyboardDismissMode === 'on-drag') {\n        dismissKeyboard();\n      }\n      this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n    };\n    this._handleScrollEndDrag = e => {\n      const {\n        velocity\n      } = e.nativeEvent;\n      if (!this._isAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {\n        FrameRateLogger.endScroll();\n      }\n      this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n    };\n    this._isAnimating = () => {\n      const now = global.performance.now();\n      const timeSinceLastMomentumScrollEnd = now - this._lastMomentumScrollEndTime;\n      const isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this._lastMomentumScrollEndTime < this._lastMomentumScrollBeginTime;\n      return isAnimating;\n    };\n    this._handleResponderGrant = e => {\n      this._observedScrollSinceBecomingResponder = false;\n      this.props.onResponderGrant && this.props.onResponderGrant(e);\n      this._becameResponderWhileAnimating = this._isAnimating();\n    };\n    this._handleResponderReject = () => {};\n    this._handleResponderRelease = e => {\n      this._isTouching = e.nativeEvent.touches.length !== 0;\n      this.props.onResponderRelease && this.props.onResponderRelease(e);\n      if (typeof e.target === 'number') {\n        if (__DEV__) {\n          console.error('Did not expect event target to be a number. Should have been a native component');\n        }\n        return;\n      }\n      const currentlyFocusedTextInput = TextInputState.currentlyFocusedInput();\n      if (currentlyFocusedTextInput != null && this.props.keyboardShouldPersistTaps !== true && this.props.keyboardShouldPersistTaps !== 'always' && this._keyboardIsDismissible() && e.target !== currentlyFocusedTextInput && !this._observedScrollSinceBecomingResponder && !this._becameResponderWhileAnimating) {\n        TextInputState.blurTextInput(currentlyFocusedTextInput);\n      }\n    };\n    this._handleResponderTerminationRequest = () => {\n      return !this._observedScrollSinceBecomingResponder;\n    };\n    this._handleScrollShouldSetResponder = () => {\n      if (this.props.disableScrollViewPanResponder === true) {\n        return false;\n      }\n      return this._isTouching;\n    };\n    this._handleStartShouldSetResponder = e => {\n      if (this.props.disableScrollViewPanResponder === true) {\n        return false;\n      }\n      const currentlyFocusedInput = TextInputState.currentlyFocusedInput();\n      if (this.props.keyboardShouldPersistTaps === 'handled' && this._keyboardIsDismissible() && e.target !== currentlyFocusedInput) {\n        return true;\n      }\n      return false;\n    };\n    this._handleStartShouldSetResponderCapture = e => {\n      if (this._isAnimating()) {\n        return true;\n      }\n      if (this.props.disableScrollViewPanResponder === true) {\n        return false;\n      }\n      const {\n        keyboardShouldPersistTaps\n      } = this.props;\n      const keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';\n      if (typeof e.target === 'number') {\n        if (__DEV__) {\n          console.error('Did not expect event target to be a number. Should have been a native component');\n        }\n        return false;\n      }\n      if (this._softKeyboardIsDetached()) {\n        return false;\n      }\n      if (keyboardNeverPersistTaps && this._keyboardIsDismissible() && e.target != null && !TextInputState.isTextInput(e.target)) {\n        return true;\n      }\n      return false;\n    };\n    this._keyboardIsDismissible = () => {\n      const currentlyFocusedInput = TextInputState.currentlyFocusedInput();\n      const hasFocusedTextInput = currentlyFocusedInput != null && TextInputState.isTextInput(currentlyFocusedInput);\n      const softKeyboardMayBeOpen = this._keyboardMetrics != null || this._keyboardEventsAreUnreliable();\n      return hasFocusedTextInput && softKeyboardMayBeOpen;\n    };\n    this._softKeyboardIsDetached = () => {\n      return this._keyboardMetrics != null && this._keyboardMetrics.height === 0;\n    };\n    this._keyboardEventsAreUnreliable = () => {\n      return Platform.OS === 'android' && Platform.Version < 30;\n    };\n    this._handleTouchEnd = e => {\n      const nativeEvent = e.nativeEvent;\n      this._isTouching = nativeEvent.touches.length !== 0;\n      const {\n        keyboardShouldPersistTaps\n      } = this.props;\n      const keyboardNeverPersistsTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';\n      const currentlyFocusedTextInput = TextInputState.currentlyFocusedInput();\n      if (currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && this._softKeyboardIsDetached() && this._keyboardIsDismissible() && keyboardNeverPersistsTaps) {\n        TextInputState.blurTextInput(currentlyFocusedTextInput);\n      }\n      this.props.onTouchEnd && this.props.onTouchEnd(e);\n    };\n    this._handleTouchCancel = e => {\n      this._isTouching = false;\n      this.props.onTouchCancel && this.props.onTouchCancel(e);\n    };\n    this._handleTouchStart = e => {\n      this._isTouching = true;\n      this.props.onTouchStart && this.props.onTouchStart(e);\n    };\n    this._handleTouchMove = e => {\n      this.props.onTouchMove && this.props.onTouchMove(e);\n    };\n    this._scrollAnimatedValue = new AnimatedImplementation.Value(this.props.contentOffset?.y ?? 0);\n    this._scrollAnimatedValue.setOffset(this.props.contentInset?.top ?? 0);\n  }\n  componentDidMount() {\n    if (typeof this.props.keyboardShouldPersistTaps === 'boolean') {\n      console.warn(`'keyboardShouldPersistTaps={${this.props.keyboardShouldPersistTaps === true ? 'true' : 'false'}}' is deprecated. ` + `Use 'keyboardShouldPersistTaps=\"${this.props.keyboardShouldPersistTaps ? 'always' : 'never'}\"' instead`);\n    }\n    this._keyboardMetrics = Keyboard.metrics();\n    this._additionalScrollOffset = 0;\n    this._subscriptionKeyboardWillShow = Keyboard.addListener('keyboardWillShow', this.scrollResponderKeyboardWillShow);\n    this._subscriptionKeyboardWillHide = Keyboard.addListener('keyboardWillHide', this.scrollResponderKeyboardWillHide);\n    this._subscriptionKeyboardDidShow = Keyboard.addListener('keyboardDidShow', this.scrollResponderKeyboardDidShow);\n    this._subscriptionKeyboardDidHide = Keyboard.addListener('keyboardDidHide', this.scrollResponderKeyboardDidHide);\n    this._updateAnimatedNodeAttachment();\n  }\n  componentDidUpdate(prevProps) {\n    const prevContentInsetTop = prevProps.contentInset ? prevProps.contentInset.top : 0;\n    const newContentInsetTop = this.props.contentInset ? this.props.contentInset.top : 0;\n    if (prevContentInsetTop !== newContentInsetTop) {\n      this._scrollAnimatedValue.setOffset(newContentInsetTop || 0);\n    }\n    this._updateAnimatedNodeAttachment();\n  }\n  componentWillUnmount() {\n    if (this._subscriptionKeyboardWillShow != null) {\n      this._subscriptionKeyboardWillShow.remove();\n    }\n    if (this._subscriptionKeyboardWillHide != null) {\n      this._subscriptionKeyboardWillHide.remove();\n    }\n    if (this._subscriptionKeyboardDidShow != null) {\n      this._subscriptionKeyboardDidShow.remove();\n    }\n    if (this._subscriptionKeyboardDidHide != null) {\n      this._subscriptionKeyboardDidHide.remove();\n    }\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n    _classPrivateFieldLooseBase(this, _onScrollEmitter)[_onScrollEmitter]?.removeAllListeners();\n  }\n  _textInputFocusError() {\n    console.warn('Error measuring text field.');\n  }\n  _getKeyForIndex(index, childArray) {\n    const child = childArray[index];\n    return child && child.key;\n  }\n  _updateAnimatedNodeAttachment() {\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n    if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {\n      this._scrollAnimatedValueAttachment = AnimatedImplementation.attachNativeEvent(this.getNativeScrollRef(), 'onScroll', [{\n        nativeEvent: {\n          contentOffset: {\n            y: this._scrollAnimatedValue\n          }\n        }\n      }]);\n    }\n  }\n  _setStickyHeaderRef(key, ref) {\n    if (ref) {\n      this._stickyHeaderRefs.set(key, ref);\n    } else {\n      this._stickyHeaderRefs.delete(key);\n    }\n  }\n  _onStickyHeaderLayout(index, event, key) {\n    const {\n      stickyHeaderIndices\n    } = this.props;\n    if (!stickyHeaderIndices) {\n      return;\n    }\n    const childArray = React.Children.toArray(this.props.children);\n    if (key !== this._getKeyForIndex(index, childArray)) {\n      return;\n    }\n    const layoutY = event.nativeEvent.layout.y;\n    this._headerLayoutYs.set(key, layoutY);\n    const indexOfIndex = stickyHeaderIndices.indexOf(index);\n    const previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];\n    if (previousHeaderIndex != null) {\n      const previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));\n      previousHeader && previousHeader.setNextHeaderY && previousHeader.setNextHeaderY(layoutY);\n    }\n  }\n  render() {\n    const horizontal = this.props.horizontal === true;\n    const NativeScrollView = horizontal ? HScrollViewNativeComponent : VScrollViewNativeComponent;\n    const NativeScrollContentView = horizontal ? HScrollContentViewNativeComponent : VScrollContentViewNativeComponent;\n    const contentContainerStyle = [horizontal && styles.contentContainerHorizontal, this.props.contentContainerStyle];\n    if (__DEV__ && this.props.style !== undefined) {\n      const style = flattenStyle(this.props.style);\n      const childLayoutProps = ['alignItems', 'justifyContent'].filter(prop => style && style[prop] !== undefined);\n      invariant(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');\n    }\n    const contentSizeChangeProps = this.props.onContentSizeChange == null ? null : {\n      onLayout: this._handleContentOnLayout\n    };\n    const {\n      stickyHeaderIndices\n    } = this.props;\n    let children = this.props.children;\n    children = React.Children.toArray(children);\n    if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {\n      children = children.map((child, index) => {\n        const indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;\n        if (indexOfIndex > -1) {\n          const key = child.key;\n          const nextIndex = stickyHeaderIndices[indexOfIndex + 1];\n          const StickyHeaderComponent = this.props.StickyHeaderComponent || ScrollViewStickyHeader;\n          return _jsxDEV(StickyHeaderComponent, {\n            ref: ref => this._setStickyHeaderRef(key, ref),\n            nextHeaderLayoutY: this._headerLayoutYs.get(this._getKeyForIndex(nextIndex, children)),\n            onLayout: event => this._onStickyHeaderLayout(index, event, key),\n            scrollAnimatedValue: this._scrollAnimatedValue,\n            inverted: this.props.invertStickyHeaders,\n            hiddenOnScroll: this.props.stickyHeaderHiddenOnScroll,\n            scrollViewHeight: this.state.layoutHeight,\n            children: child\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1705,\n            columnNumber: 13\n          }, this);\n        } else {\n          return child;\n        }\n      });\n    }\n    children = _jsxDEV(ScrollViewContext.Provider, {\n      value: horizontal ? HORIZONTAL : VERTICAL,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1725,\n      columnNumber: 7\n    }, this);\n    const hasStickyHeaders = Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;\n    const preserveChildren = this.props.maintainVisibleContentPosition != null || Platform.OS === 'android' && this.props.snapToAlignment != null;\n    const contentContainer = _jsxDEV(NativeScrollContentView, Object.assign({}, contentSizeChangeProps, {\n      ref: this._innerView.getForwardingRef(this.props.innerViewRef),\n      style: contentContainerStyle,\n      removeClippedSubviews: Platform.OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,\n      collapsable: false,\n      collapsableChildren: !preserveChildren,\n      children: children\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1741,\n      columnNumber: 7\n    }, this);\n    const alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;\n    const alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;\n    const baseStyle = horizontal ? styles.baseHorizontal : styles.baseVertical;\n    const _this$props = this.props,\n      {\n        experimental_endDraggingSensitivityMultiplier\n      } = _this$props,\n      otherProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n    const props = Object.assign({}, otherProps, {\n      alwaysBounceHorizontal,\n      alwaysBounceVertical,\n      style: StyleSheet.compose(baseStyle, this.props.style),\n      onContentSizeChange: null,\n      onLayout: this._handleLayout,\n      onMomentumScrollBegin: this._handleMomentumScrollBegin,\n      onMomentumScrollEnd: this._handleMomentumScrollEnd,\n      onResponderGrant: this._handleResponderGrant,\n      onResponderReject: this._handleResponderReject,\n      onResponderRelease: this._handleResponderRelease,\n      onResponderTerminationRequest: this._handleResponderTerminationRequest,\n      onScrollBeginDrag: this._handleScrollBeginDrag,\n      onScrollEndDrag: this._handleScrollEndDrag,\n      onScrollShouldSetResponder: this._handleScrollShouldSetResponder,\n      onStartShouldSetResponder: this._handleStartShouldSetResponder,\n      onStartShouldSetResponderCapture: this._handleStartShouldSetResponderCapture,\n      onTouchEnd: this._handleTouchEnd,\n      onTouchMove: this._handleTouchMove,\n      onTouchStart: this._handleTouchStart,\n      onTouchCancel: this._handleTouchCancel,\n      onScroll: this._handleScroll,\n      endDraggingSensitivityMultiplier: experimental_endDraggingSensitivityMultiplier,\n      scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,\n      sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,\n      snapToStart: this.props.snapToStart !== false,\n      snapToEnd: this.props.snapToEnd !== false,\n      pagingEnabled: Platform.select({\n        ios: this.props.pagingEnabled === true && this.props.snapToInterval == null && this.props.snapToOffsets == null,\n        android: this.props.pagingEnabled === true || this.props.snapToInterval != null || this.props.snapToOffsets != null\n      })\n    });\n    const {\n      decelerationRate\n    } = this.props;\n    if (decelerationRate != null) {\n      props.decelerationRate = processDecelerationRate(decelerationRate);\n    }\n    const refreshControl = this.props.refreshControl;\n    const scrollViewRef = this._scrollView.getForwardingRef(this.props.scrollViewRef);\n    if (refreshControl) {\n      if (Platform.OS === 'ios') {\n        return _jsxDEV(NativeScrollView, Object.assign({}, props, {\n          ref: scrollViewRef,\n          children: [refreshControl, contentContainer]\n        }), void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1840,\n          columnNumber: 11\n        }, this);\n      } else if (Platform.OS === 'android') {\n        const {\n          outer,\n          inner\n        } = splitLayoutProps(flattenStyle(props.style));\n        return React.cloneElement(refreshControl, {\n          style: StyleSheet.compose(baseStyle, outer)\n        }, _jsxDEV(NativeScrollView, Object.assign({}, props, {\n          style: StyleSheet.compose(baseStyle, inner),\n          ref: scrollViewRef,\n          children: contentContainer\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1857,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    return _jsxDEV(NativeScrollView, Object.assign({}, props, {\n      ref: scrollViewRef,\n      children: contentContainer\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1869,\n      columnNumber: 7\n    }, this);\n  }\n}\nScrollView.Context = ScrollViewContext;\nconst styles = StyleSheet.create({\n  baseVertical: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'column',\n    overflow: 'scroll'\n  },\n  baseHorizontal: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'row',\n    overflow: 'scroll'\n  },\n  contentContainerHorizontal: {\n    flexDirection: 'row'\n  }\n});\nfunction createRefForwarder(mutator) {\n  const state = {\n    getForwardingRef: memoize(forwardedRef => {\n      return nativeInstance => {\n        const publicInstance = nativeInstance == null ? null : mutator(nativeInstance);\n        state.nativeInstance = nativeInstance;\n        state.publicInstance = publicInstance;\n        if (forwardedRef != null) {\n          if (typeof forwardedRef === 'function') {\n            forwardedRef(publicInstance);\n          } else {\n            forwardedRef.current = publicInstance;\n          }\n        }\n      };\n    }),\n    nativeInstance: null,\n    publicInstance: null\n  };\n  return state;\n}\nconst Wrapper = React.forwardRef(function Wrapper(props, ref) {\n  return ref == null ? _jsxDEV(ScrollView, Object.assign({}, props), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1943,\n    columnNumber: 5\n  }, this) : _jsxDEV(ScrollView, Object.assign({}, props, {\n    scrollViewRef: ref\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1945,\n    columnNumber: 5\n  }, this);\n});\nWrapper.displayName = 'ScrollView';\nWrapper.Context = ScrollViewContext;\nmodule.exports = Wrapper;","map":{"version":3,"names":["HScrollContentViewNativeComponent","HScrollViewNativeComponent","VScrollContentViewNativeComponent","VScrollViewNativeComponent","AnimatedImplementation","FrameRateLogger","findNodeHandle","UIManager","flattenStyle","splitLayoutProps","StyleSheet","Dimensions","dismissKeyboard","Platform","EventEmitter","Keyboard","TextInputState","processDecelerationRate","Commands","ScrollViewContext","HORIZONTAL","VERTICAL","ScrollViewStickyHeader","invariant","memoize","nullthrows","React","jsxDEV","_jsxDEV","IS_ANIMATING_TOUCH_START_THRESHOLD_MS","_onScrollEmitter","_classPrivateFieldLooseKey","ScrollView","Component","constructor","props","_scrollAnimatedValue","_scrollAnimatedValueAttachment","_stickyHeaderRefs","Map","_headerLayoutYs","_keyboardMetrics","_additionalScrollOffset","_isTouching","_lastMomentumScrollBeginTime","_lastMomentumScrollEndTime","_observedScrollSinceBecomingResponder","_becameResponderWhileAnimating","_preventNegativeScrollOffset","_animated","_subscriptionKeyboardWillShow","_subscriptionKeyboardWillHide","_subscriptionKeyboardDidShow","_subscriptionKeyboardDidHide","Object","defineProperty","writable","value","state","layoutHeight","getScrollResponder","getScrollableNode","getNativeScrollRef","getInnerViewNode","_innerView","nativeInstance","getInnerViewRef","_scrollView","componentRef","current","scrollTo","options","deprecatedX","deprecatedAnimated","x","y","animated","console","warn","component","scrollToEnd","flashScrollIndicators","_subscribeToOnScroll","callback","onScrollEmitter","_classPrivateFieldLooseBase","unstable_setEnableSyncOnScroll","addListener","scrollResponderScrollNativeHandleToKeyboard","nodeHandle","additionalOffset","preventNegativeScrollOffset","measureLayout","_textInputFocusError","_inputMeasureAndScrollToKeyboard","scrollResponderZoomTo","rect","OS","zoomToRect","left","top","width","height","keyboardScreenY","get","scrollTextInputIntoVisibleRect","screenY","scrollOffsetY","Math","max","setTimeout","_handleScroll","e","onScroll","emit","nativeEvent","contentOffset","_handleLayout","invertStickyHeaders","setState","layout","onLayout","_handleContentOnLayout","onContentSizeChange","createRefForwarder","instance","nativeImperativeHandle","publicInstance","assign","unstable_subscribeToOnScroll","scrollResponderKeyboardWillShow","endCoordinates","onKeyboardWillShow","scrollResponderKeyboardWillHide","onKeyboardWillHide","scrollResponderKeyboardDidShow","onKeyboardDidShow","scrollResponderKeyboardDidHide","onKeyboardDidHide","_handleMomentumScrollBegin","global","performance","now","onMomentumScrollBegin","_handleMomentumScrollEnd","endScroll","onMomentumScrollEnd","_handleScrollBeginDrag","beginScroll","keyboardDismissMode","onScrollBeginDrag","_handleScrollEndDrag","velocity","_isAnimating","onScrollEndDrag","timeSinceLastMomentumScrollEnd","isAnimating","_handleResponderGrant","onResponderGrant","_handleResponderReject","_handleResponderRelease","touches","length","onResponderRelease","target","__DEV__","error","currentlyFocusedTextInput","currentlyFocusedInput","keyboardShouldPersistTaps","_keyboardIsDismissible","blurTextInput","_handleResponderTerminationRequest","_handleScrollShouldSetResponder","disableScrollViewPanResponder","_handleStartShouldSetResponder","_handleStartShouldSetResponderCapture","keyboardNeverPersistTaps","_softKeyboardIsDetached","isTextInput","hasFocusedTextInput","softKeyboardMayBeOpen","_keyboardEventsAreUnreliable","Version","_handleTouchEnd","keyboardNeverPersistsTaps","onTouchEnd","_handleTouchCancel","onTouchCancel","_handleTouchStart","onTouchStart","_handleTouchMove","onTouchMove","Value","setOffset","contentInset","componentDidMount","metrics","_updateAnimatedNodeAttachment","componentDidUpdate","prevProps","prevContentInsetTop","newContentInsetTop","componentWillUnmount","remove","detach","removeAllListeners","_getKeyForIndex","index","childArray","child","key","stickyHeaderIndices","attachNativeEvent","_setStickyHeaderRef","ref","set","delete","_onStickyHeaderLayout","event","Children","toArray","children","layoutY","indexOfIndex","indexOf","previousHeaderIndex","previousHeader","setNextHeaderY","render","horizontal","NativeScrollView","NativeScrollContentView","contentContainerStyle","styles","contentContainerHorizontal","style","undefined","childLayoutProps","filter","prop","JSON","stringify","contentSizeChangeProps","map","nextIndex","StickyHeaderComponent","nextHeaderLayoutY","scrollAnimatedValue","inverted","hiddenOnScroll","stickyHeaderHiddenOnScroll","scrollViewHeight","fileName","_jsxFileName","lineNumber","columnNumber","Provider","hasStickyHeaders","Array","isArray","preserveChildren","maintainVisibleContentPosition","snapToAlignment","contentContainer","getForwardingRef","innerViewRef","removeClippedSubviews","collapsable","collapsableChildren","alwaysBounceHorizontal","alwaysBounceVertical","baseStyle","baseHorizontal","baseVertical","_this$props","experimental_endDraggingSensitivityMultiplier","otherProps","_objectWithoutPropertiesLoose","_excluded","compose","onResponderReject","onResponderTerminationRequest","onScrollShouldSetResponder","onStartShouldSetResponder","onStartShouldSetResponderCapture","endDraggingSensitivityMultiplier","scrollEventThrottle","sendMomentumEvents","snapToStart","snapToEnd","pagingEnabled","select","ios","snapToInterval","snapToOffsets","android","decelerationRate","refreshControl","scrollViewRef","outer","inner","cloneElement","Context","create","flexGrow","flexShrink","flexDirection","overflow","mutator","forwardedRef","Wrapper","forwardRef","displayName","module","exports"],"sources":["F:/MiniProject/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {\n  TScrollViewNativeComponentInstance,\n  TScrollViewNativeImperativeHandle,\n} from '../../../src/private/components/useSyncOnScroll';\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {PointProp} from '../../StyleSheet/PointPropType';\nimport type {ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {\n  LayoutEvent,\n  PressEvent,\n  ScrollEvent,\n} from '../../Types/CoreEventTypes';\nimport type {EventSubscription} from '../../vendor/emitter/EventEmitter';\nimport type {KeyboardEvent, KeyboardMetrics} from '../Keyboard/Keyboard';\nimport typeof View from '../View/View';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport type {Props as ScrollViewStickyHeaderProps} from './ScrollViewStickyHeader';\n\nimport {\n  HScrollContentViewNativeComponent,\n  HScrollViewNativeComponent,\n} from '../../../src/private/components/HScrollViewNativeComponents';\nimport {\n  VScrollContentViewNativeComponent,\n  VScrollViewNativeComponent,\n} from '../../../src/private/components/VScrollViewNativeComponents';\nimport AnimatedImplementation from '../../Animated/AnimatedImplementation';\nimport FrameRateLogger from '../../Interaction/FrameRateLogger';\nimport {findNodeHandle} from '../../ReactNative/RendererProxy';\nimport UIManager from '../../ReactNative/UIManager';\nimport flattenStyle from '../../StyleSheet/flattenStyle';\nimport splitLayoutProps from '../../StyleSheet/splitLayoutProps';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport Dimensions from '../../Utilities/Dimensions';\nimport dismissKeyboard from '../../Utilities/dismissKeyboard';\nimport Platform from '../../Utilities/Platform';\nimport EventEmitter from '../../vendor/emitter/EventEmitter';\nimport Keyboard from '../Keyboard/Keyboard';\nimport TextInputState from '../TextInput/TextInputState';\nimport processDecelerationRate from './processDecelerationRate';\nimport Commands from './ScrollViewCommands';\nimport ScrollViewContext, {HORIZONTAL, VERTICAL} from './ScrollViewContext';\nimport ScrollViewStickyHeader from './ScrollViewStickyHeader';\nimport invariant from 'invariant';\nimport memoize from 'memoize-one';\nimport nullthrows from 'nullthrows';\nimport * as React from 'react';\n\n/*\n * iOS scroll event timing nuances:\n * ===============================\n *\n *\n * Scrolling without bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... physical touch starts ...\n * 2. `onTouchStartCapture`   (when you press down to stop the scroll)\n * 3. `onTouchStart`          (same, but bubble phase)\n * 4. `onResponderRelease`    (when lifting up - you could pause forever before * lifting)\n * 5. `onMomentumScrollEnd`\n *\n *\n * Scrolling with bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... bounce begins ...\n *    ... some time elapses ...\n *    ... physical touch during bounce ...\n * 2. `onMomentumScrollEnd`   (Makes no sense why this occurs first during bounce)\n * 3. `onTouchStartCapture`   (immediately after `onMomentumScrollEnd`)\n * 4. `onTouchStart`          (same, but bubble phase)\n * 5. `onTouchEnd`            (You could hold the touch start for a long time)\n * 6. `onMomentumScrollBegin` (When releasing the view starts bouncing back)\n *\n * So when we receive an `onTouchStart`, how can we tell if we are touching\n * *during* an animation (which then causes the animation to stop)? The only way\n * to tell is if the `touchStart` occurred immediately after the\n * `onMomentumScrollEnd`.\n *\n * This is abstracted out for you, so you can just call this.scrollResponderIsAnimating() if\n * necessary\n *\n * `ScrollView` also includes logic for blurring a currently focused input\n * if one is focused while scrolling. This is a natural place\n * to put this logic since it can support not dismissing the keyboard while\n * scrolling, unless a recognized \"tap\"-like gesture has occurred.\n *\n * The public lifecycle API includes events for keyboard interaction, responder\n * interaction, and scrolling (among others). The keyboard callbacks\n * `onKeyboardWill/Did/*` are *global* events, but are invoked on scroll\n * responder's props so that you can guarantee that the scroll responder's\n * internal state has been updated accordingly (and deterministically) by\n * the time the props callbacks are invoke. Otherwise, you would always wonder\n * if the scroll responder is currently in a state where it recognizes new\n * keyboard positions etc. If coordinating scrolling with keyboard movement,\n * *always* use these hooks instead of listening to your own global keyboard\n * events.\n *\n * Public keyboard lifecycle API: (props callbacks)\n *\n * Standard Keyboard Appearance Sequence:\n *\n *   this.props.onKeyboardWillShow\n *   this.props.onKeyboardDidShow\n *\n * `onScrollResponderKeyboardDismissed` will be invoked if an appropriate\n * tap inside the scroll responder's scrollable region was responsible\n * for the dismissal of the keyboard. There are other reasons why the\n * keyboard could be dismissed.\n *\n *   this.props.onScrollResponderKeyboardDismissed\n *\n * Standard Keyboard Hide Sequence:\n *\n *   this.props.onKeyboardWillHide\n *   this.props.onKeyboardDidHide\n */\n\n// Public methods for ScrollView\nexport type ScrollViewImperativeMethods = $ReadOnly<{|\n  getScrollResponder: $PropertyType<ScrollView, 'getScrollResponder'>,\n  getScrollableNode: $PropertyType<ScrollView, 'getScrollableNode'>,\n  getInnerViewNode: $PropertyType<ScrollView, 'getInnerViewNode'>,\n  getInnerViewRef: $PropertyType<ScrollView, 'getInnerViewRef'>,\n  getNativeScrollRef: $PropertyType<ScrollView, 'getNativeScrollRef'>,\n  scrollTo: $PropertyType<ScrollView, 'scrollTo'>,\n  scrollToEnd: $PropertyType<ScrollView, 'scrollToEnd'>,\n  flashScrollIndicators: $PropertyType<ScrollView, 'flashScrollIndicators'>,\n  scrollResponderZoomTo: $PropertyType<ScrollView, 'scrollResponderZoomTo'>,\n  scrollResponderScrollNativeHandleToKeyboard: $PropertyType<\n    ScrollView,\n    'scrollResponderScrollNativeHandleToKeyboard',\n  >,\n|}>;\n\nexport type DecelerationRateType = 'fast' | 'normal' | number;\nexport type ScrollResponderType = ScrollViewImperativeMethods;\n\ntype PublicScrollViewInstance = $ReadOnly<{|\n  ...$Exact<TScrollViewNativeComponentInstance>,\n  ...ScrollViewImperativeMethods,\n|}>;\n\ntype InnerViewInstance = React.ElementRef<View>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * Controls whether iOS should automatically adjust the content inset\n   * for scroll views that are placed behind a navigation bar or\n   * tab bar/ toolbar. The default value is true.\n   * @platform ios\n   */\n  automaticallyAdjustContentInsets?: ?boolean,\n  /**\n   * Controls whether the ScrollView should automatically adjust its `contentInset`\n   * and `scrollViewInsets` when the Keyboard changes its size. The default value is false.\n   * @platform ios\n   */\n  automaticallyAdjustKeyboardInsets?: ?boolean,\n  /**\n   * Controls whether iOS should automatically adjust the scroll indicator\n   * insets. The default value is true. Available on iOS 13 and later.\n   * @platform ios\n   */\n  automaticallyAdjustsScrollIndicatorInsets?: ?boolean,\n  /**\n   * The amount by which the scroll view content is inset from the edges\n   * of the scroll view. Defaults to `{top: 0, left: 0, bottom: 0, right: 0}`.\n   * @platform ios\n   */\n  contentInset?: ?EdgeInsetsProp,\n  /**\n   * When true, the scroll view bounces when it reaches the end of the\n   * content if the content is larger then the scroll view along the axis of\n   * the scroll direction. When false, it disables all bouncing even if\n   * the `alwaysBounce*` props are true. The default value is true.\n   * @platform ios\n   */\n  bounces?: ?boolean,\n  /**\n   * By default, ScrollView has an active pan responder that hijacks panresponders\n   * deeper in the render tree in order to prevent accidental touches while scrolling.\n   * However, in certain occasions (such as when using snapToInterval) in a vertical scrollview\n   * You may want to disable this behavior in order to prevent the ScrollView from blocking touches\n   */\n  disableScrollViewPanResponder?: ?boolean,\n  /**\n   * When true, gestures can drive zoom past min/max and the zoom will animate\n   * to the min/max value at gesture end, otherwise the zoom will not exceed\n   * the limits.\n   * @platform ios\n   */\n  bouncesZoom?: ?boolean,\n  /**\n   * When true, the scroll view bounces horizontally when it reaches the end\n   * even if the content is smaller than the scroll view itself. The default\n   * value is true when `horizontal={true}` and false otherwise.\n   * @platform ios\n   */\n  alwaysBounceHorizontal?: ?boolean,\n  /**\n   * When true, the scroll view bounces vertically when it reaches the end\n   * even if the content is smaller than the scroll view itself. The default\n   * value is false when `horizontal={true}` and true otherwise.\n   * @platform ios\n   */\n  alwaysBounceVertical?: ?boolean,\n  /**\n   * When true, the scroll view automatically centers the content when the\n   * content is smaller than the scroll view bounds; when the content is\n   * larger than the scroll view, this property has no effect. The default\n   * value is false.\n   * @platform ios\n   */\n  centerContent?: ?boolean,\n  /**\n   * The style of the scroll indicators.\n   *\n   *   - `'default'` (the default), same as `black`.\n   *   - `'black'`, scroll indicator is black. This style is good against a light background.\n   *   - `'white'`, scroll indicator is white. This style is good against a dark background.\n   *\n   * @platform ios\n   */\n  indicatorStyle?: ?('default' | 'black' | 'white'),\n  /**\n   * When true, the ScrollView will try to lock to only vertical or horizontal\n   * scrolling while dragging.  The default value is false.\n   * @platform ios\n   */\n  directionalLockEnabled?: ?boolean,\n  /**\n   * When false, once tracking starts, won't try to drag if the touch moves.\n   * The default value is true.\n   * @platform ios\n   */\n  canCancelContentTouches?: ?boolean,\n  /**\n   * The maximum allowed zoom scale. The default value is 1.0.\n   * @platform ios\n   */\n  maximumZoomScale?: ?number,\n  /**\n   * The minimum allowed zoom scale. The default value is 1.0.\n   * @platform ios\n   */\n  minimumZoomScale?: ?number,\n  /**\n   * When true, ScrollView allows use of pinch gestures to zoom in and out.\n   * The default value is true.\n   * @platform ios\n   */\n  pinchGestureEnabled?: ?boolean,\n  /**\n   * The amount by which the scroll view indicators are inset from the edges\n   * of the scroll view. This should normally be set to the same value as\n   * the `contentInset`. Defaults to `{0, 0, 0, 0}`.\n   * @platform ios\n   */\n  scrollIndicatorInsets?: ?EdgeInsetsProp,\n  /**\n   * When true, the scroll view can be programmatically scrolled beyond its\n   * content size. The default value is false.\n   * @platform ios\n   */\n  scrollToOverflowEnabled?: ?boolean,\n  /**\n   * When true, the scroll view scrolls to top when the status bar is tapped.\n   * The default value is true.\n   * @platform ios\n   */\n  scrollsToTop?: ?boolean,\n  /**\n   * Fires when the scroll view scrolls to top after the status bar has been tapped\n   * @platform ios\n   */\n  onScrollToTop?: (event: ScrollEvent) => void,\n  /**\n   * When true, shows a horizontal scroll indicator.\n   * The default value is true.\n   */\n  showsHorizontalScrollIndicator?: ?boolean,\n  /**\n   * The current scale of the scroll view content. The default value is 1.0.\n   * @platform ios\n   */\n  zoomScale?: ?number,\n  /**\n   * This property specifies how the safe area insets are used to modify the\n   * content area of the scroll view. The default value of this property is\n   * \"never\". Available on iOS 11 and later.\n   * @platform ios\n   */\n  contentInsetAdjustmentBehavior?: ?(\n    | 'automatic'\n    | 'scrollableAxes'\n    | 'never'\n    | 'always'\n  ),\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Enables nested scrolling for Android API level 21+.\n   * Nested scrolling is supported by default on iOS\n   * @platform android\n   */\n  nestedScrollEnabled?: ?boolean,\n  /**\n   * Sometimes a scrollview takes up more space than its content fills. When this is\n   * the case, this prop will fill the rest of the scrollview with a color to avoid setting\n   * a background and creating unnecessary overdraw. This is an advanced optimization\n   * that is not needed in the general case.\n   * @platform android\n   */\n  endFillColor?: ?ColorValue,\n  /**\n   * Tag used to log scroll performance on this scroll view. Will force\n   * momentum events to be turned on (see sendMomentumEvents). This doesn't do\n   * anything out of the box and you need to implement a custom native\n   * FpsListener for it to be useful.\n   * @platform android\n   */\n  scrollPerfTag?: ?string,\n  /**\n   * Used to override default value of overScroll mode.\n   *\n   * Possible values:\n   *\n   *  - `'auto'` - Default value, allow a user to over-scroll\n   *    this view only if the content is large enough to meaningfully scroll.\n   *  - `'always'` - Always allow a user to over-scroll this view.\n   *  - `'never'` - Never allow a user to over-scroll this view.\n   *\n   * @platform android\n   */\n  overScrollMode?: ?('auto' | 'always' | 'never'),\n  /**\n   * Causes the scrollbars not to turn transparent when they are not in use.\n   * The default value is false.\n   *\n   * @platform android\n   */\n  persistentScrollbar?: ?boolean,\n  /**\n   * Fades out the edges of the scroll content.\n   *\n   * If the value is greater than 0, the fading edges will be set accordingly\n   * to the current scroll direction and position,\n   * indicating if there is more content to show.\n   *\n   * The default value is 0.\n   *\n   * @platform android\n   */\n  fadingEdgeLength?: ?number,\n|}>;\n\ntype StickyHeaderComponentType = React.AbstractComponent<\n  ScrollViewStickyHeaderProps,\n  $ReadOnly<interface {setNextHeaderY: number => void}>,\n>;\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * These styles will be applied to the scroll view content container which\n   * wraps all of the child views. Example:\n   *\n   * ```\n   * return (\n   *   <ScrollView contentContainerStyle={styles.contentContainer}>\n   *   </ScrollView>\n   * );\n   * ...\n   * const styles = StyleSheet.create({\n   *   contentContainer: {\n   *     paddingVertical: 20\n   *   }\n   * });\n   * ```\n   */\n  contentContainerStyle?: ?ViewStyleProp,\n  /**\n   * Used to manually set the starting scroll offset.\n   * The default value is `{x: 0, y: 0}`.\n   */\n  contentOffset?: ?PointProp,\n  /**\n   * When true, the scroll view stops on the next index (in relation to scroll\n   * position at release) regardless of how fast the gesture is. This can be\n   * used for pagination when the page is less than the width of the\n   * horizontal ScrollView or the height of the vertical ScrollView. The default value is false.\n   */\n  disableIntervalMomentum?: ?boolean,\n  /**\n   * A floating-point number that determines how quickly the scroll view\n   * decelerates after the user lifts their finger. You may also use string\n   * shortcuts `\"normal\"` and `\"fast\"` which match the underlying iOS settings\n   * for `UIScrollViewDecelerationRateNormal` and\n   * `UIScrollViewDecelerationRateFast` respectively.\n   *\n   *   - `'normal'`: 0.998 on iOS, 0.985 on Android (the default)\n   *   - `'fast'`: 0.99 on iOS, 0.9 on Android\n   */\n  decelerationRate?: ?DecelerationRateType,\n\n  /**\n   * *Experimental, iOS Only*. The API is experimental and will change in future releases.\n   *\n   * Controls how much distance is travelled after user stops scrolling.\n   * Value greater than 1 will increase the distance travelled.\n   * Value less than 1 will decrease the distance travelled.\n   *\n   * @deprecated\n   *\n   * The default value is 1.\n   */\n  experimental_endDraggingSensitivityMultiplier?: ?number,\n\n  /**\n   * When true, the scroll view's children are arranged horizontally in a row\n   * instead of vertically in a column. The default value is false.\n   */\n  horizontal?: ?boolean,\n  /**\n   * If sticky headers should stick at the bottom instead of the top of the\n   * ScrollView. This is usually used with inverted ScrollViews.\n   */\n  invertStickyHeaders?: ?boolean,\n  /**\n   * Determines whether the keyboard gets dismissed in response to a drag.\n   *\n   * *Cross platform*\n   *\n   *   - `'none'` (the default), drags do not dismiss the keyboard.\n   *   - `'on-drag'`, the keyboard is dismissed when a drag begins.\n   *\n   * *iOS Only*\n   *\n   *   - `'interactive'`, the keyboard is dismissed interactively with the drag and moves in\n   *     synchrony with the touch; dragging upwards cancels the dismissal.\n   *     On android this is not supported and it will have the same behavior as 'none'.\n   */\n  keyboardDismissMode?: ?// default\n  // cross-platform\n  ('none' | 'on-drag' | 'interactive'), // ios only\n  /**\n   * Determines when the keyboard should stay visible after a tap.\n   *\n   *   - `'never'` (the default), tapping outside of the focused text input when the keyboard\n   *     is up dismisses the keyboard. When this happens, children won't receive the tap.\n   *   - `'always'`, the keyboard will not dismiss automatically, and the scroll view will not\n   *     catch taps, but children of the scroll view can catch taps.\n   *   - `'handled'`, the keyboard will not dismiss automatically when the tap was handled by\n   *     a children, (or captured by an ancestor).\n   *   - `false`, deprecated, use 'never' instead\n   *   - `true`, deprecated, use 'always' instead\n   */\n  keyboardShouldPersistTaps?: ?('always' | 'never' | 'handled' | true | false),\n  /**\n   * When set, the scroll view will adjust the scroll position so that the first child that is\n   * partially or fully visible and at or beyond `minIndexForVisible` will not change position.\n   * This is useful for lists that are loading content in both directions, e.g. a chat thread,\n   * where new messages coming in might otherwise cause the scroll position to jump. A value of 0\n   * is common, but other values such as 1 can be used to skip loading spinners or other content\n   * that should not maintain position.\n   *\n   * The optional `autoscrollToTopThreshold` can be used to make the content automatically scroll\n   * to the top after making the adjustment if the user was within the threshold of the top before\n   * the adjustment was made. This is also useful for chat-like applications where you want to see\n   * new messages scroll into place, but not if the user has scrolled up a ways and it would be\n   * disruptive to scroll a bunch.\n   *\n   * Caveat 1: Reordering elements in the scrollview with this enabled will probably cause\n   * jumpiness and jank. It can be fixed, but there are currently no plans to do so. For now,\n   * don't re-order the content of any ScrollViews or Lists that use this feature.\n   *\n   * Caveat 2: This simply uses `contentOffset` and `frame.origin` in native code to compute\n   * visibility. Occlusion, transforms, and other complexity won't be taken into account as to\n   * whether content is \"visible\" or not.\n   *\n   */\n  maintainVisibleContentPosition?: ?$ReadOnly<{|\n    minIndexForVisible: number,\n    autoscrollToTopThreshold?: ?number,\n  |}>,\n  /**\n   * Called when the momentum scroll starts (scroll which occurs as the ScrollView glides to a stop).\n   */\n  onMomentumScrollBegin?: ?(event: ScrollEvent) => void,\n  /**\n   * Called when the momentum scroll ends (scroll which occurs as the ScrollView glides to a stop).\n   */\n  onMomentumScrollEnd?: ?(event: ScrollEvent) => void,\n\n  /**\n   * Fires at most once per frame during scrolling.\n   */\n  onScroll?: ?(event: ScrollEvent) => void,\n  /**\n   * Called when the user begins to drag the scroll view.\n   */\n  onScrollBeginDrag?: ?(event: ScrollEvent) => void,\n  /**\n   * Called when the user stops dragging the scroll view and it either stops\n   * or begins to glide.\n   */\n  onScrollEndDrag?: ?(event: ScrollEvent) => void,\n  /**\n   * Called when scrollable content view of the ScrollView changes.\n   *\n   * Handler function is passed the content width and content height as parameters:\n   * `(contentWidth, contentHeight)`\n   *\n   * It's implemented using onLayout handler attached to the content container\n   * which this ScrollView renders.\n   */\n  onContentSizeChange?: (contentWidth: number, contentHeight: number) => void,\n  onKeyboardDidShow?: (event: KeyboardEvent) => void,\n  onKeyboardDidHide?: (event: KeyboardEvent) => void,\n  onKeyboardWillShow?: (event: KeyboardEvent) => void,\n  onKeyboardWillHide?: (event: KeyboardEvent) => void,\n  /**\n   * When true, the scroll view stops on multiples of the scroll view's size\n   * when scrolling. This can be used for horizontal pagination. The default\n   * value is false.\n   */\n  pagingEnabled?: ?boolean,\n  /**\n   * When false, the view cannot be scrolled via touch interaction.\n   * The default value is true.\n   *\n   * Note that the view can always be scrolled by calling `scrollTo`.\n   */\n  scrollEnabled?: ?boolean,\n  /**\n   * Limits how often scroll events will be fired while scrolling, specified as\n   * a time interval in ms. This may be useful when expensive work is performed\n   * in response to scrolling. Values <= `16` will disable throttling,\n   * regardless of the refresh rate of the device.\n   */\n  scrollEventThrottle?: ?number,\n  /**\n   * When true, shows a vertical scroll indicator.\n   * The default value is true.\n   */\n  showsVerticalScrollIndicator?: ?boolean,\n  /**\n   * When true, Sticky header is hidden when scrolling down, and dock at the top\n   * when scrolling up\n   */\n  stickyHeaderHiddenOnScroll?: ?boolean,\n  /**\n   * An array of child indices determining which children get docked to the\n   * top of the screen when scrolling. For example, passing\n   * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n   * top of the scroll view. This property is not supported in conjunction\n   * with `horizontal={true}`.\n   */\n  stickyHeaderIndices?: ?$ReadOnlyArray<number>,\n  /**\n   * A React Component that will be used to render sticky headers.\n   * To be used together with `stickyHeaderIndices` or with `SectionList`, defaults to `ScrollViewStickyHeader`.\n   * You may need to set this if your sticky header uses custom transforms (eg. translation),\n   * for example when you want your list to have an animated hidable header.\n   */\n  StickyHeaderComponent?: StickyHeaderComponentType,\n  /**\n   * When `snapToInterval` is set, `snapToAlignment` will define the relationship\n   * of the snapping to the scroll view.\n   *\n   *   - `'start'` (the default) will align the snap at the left (horizontal) or top (vertical)\n   *   - `'center'` will align the snap in the center\n   *   - `'end'` will align the snap at the right (horizontal) or bottom (vertical)\n   */\n  snapToAlignment?: ?('start' | 'center' | 'end'),\n  /**\n   * When set, causes the scroll view to stop at multiples of the value of\n   * `snapToInterval`. This can be used for paginating through children\n   * that have lengths smaller than the scroll view. Typically used in\n   * combination with `snapToAlignment` and `decelerationRate=\"fast\"`.\n   *\n   * Overrides less configurable `pagingEnabled` prop.\n   */\n  snapToInterval?: ?number,\n  /**\n   * When set, causes the scroll view to stop at the defined offsets.\n   * This can be used for paginating through variously sized children\n   * that have lengths smaller than the scroll view. Typically used in\n   * combination with `decelerationRate=\"fast\"`.\n   *\n   * Overrides less configurable `pagingEnabled` and `snapToInterval` props.\n   */\n  snapToOffsets?: ?$ReadOnlyArray<number>,\n  /**\n   * Use in conjunction with `snapToOffsets`. By default, the beginning\n   * of the list counts as a snap offset. Set `snapToStart` to false to disable\n   * this behavior and allow the list to scroll freely between its start and\n   * the first `snapToOffsets` offset.\n   * The default value is true.\n   */\n  snapToStart?: ?boolean,\n  /**\n   * Use in conjunction with `snapToOffsets`. By default, the end\n   * of the list counts as a snap offset. Set `snapToEnd` to false to disable\n   * this behavior and allow the list to scroll freely between its end and\n   * the last `snapToOffsets` offset.\n   * The default value is true.\n   */\n  snapToEnd?: ?boolean,\n  /**\n   * Experimental: When true, offscreen child views (whose `overflow` value is\n   * `hidden`) are removed from their native backing superview when offscreen.\n   * This can improve scrolling performance on long lists. The default value is\n   * true.\n   */\n  removeClippedSubviews?: ?boolean,\n  /**\n   * A RefreshControl component, used to provide pull-to-refresh\n   * functionality for the ScrollView. Only works for vertical ScrollViews\n   * (`horizontal` prop must be `false`).\n   *\n   * See [RefreshControl](docs/refreshcontrol.html).\n   */\n  /* $FlowFixMe[unclear-type] - how to handle generic type without existential\n   * operator? */\n  refreshControl?: ?ExactReactElement_DEPRECATED<any>,\n  children?: React.Node,\n  /**\n   * A ref to the inner View element of the ScrollView. This should be used\n   * instead of calling `getInnerViewRef`.\n   */\n  innerViewRef?: React.RefSetter<InnerViewInstance>,\n  /**\n   * A ref to the Native ScrollView component. This ref can be used to call\n   * all of ScrollView's public methods, in addition to native methods like\n   * measure, measureLayout, etc.\n   */\n  scrollViewRef?: React.RefSetter<PublicScrollViewInstance>,\n|}>;\n\ntype State = {|\n  layoutHeight: ?number,\n|};\n\nconst IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\n\nexport type ScrollViewComponentStatics = $ReadOnly<{|\n  Context: typeof ScrollViewContext,\n|}>;\n\n/**\n * Component that wraps platform ScrollView while providing\n * integration with touch locking \"responder\" system.\n *\n * Keep in mind that ScrollViews must have a bounded height in order to work,\n * since they contain unbounded-height children into a bounded container (via\n * a scroll interaction). In order to bound the height of a ScrollView, either\n * set the height of the view directly (discouraged) or make sure all parent\n * views have bounded height. Forgetting to transfer `{flex: 1}` down the\n * view stack can lead to errors here, which the element inspector makes\n * easy to debug.\n *\n * Doesn't yet support other contained responders from blocking this scroll\n * view from becoming the responder.\n *\n *\n * `<ScrollView>` vs [`<FlatList>`](https://reactnative.dev/docs/flatlist) - which one to use?\n *\n * `ScrollView` simply renders all its react child components at once. That\n * makes it very easy to understand and use.\n *\n * On the other hand, this has a performance downside. Imagine you have a very\n * long list of items you want to display, maybe several screens worth of\n * content. Creating JS components and native views for everything all at once,\n * much of which may not even be shown, will contribute to slow rendering and\n * increased memory usage.\n *\n * This is where `FlatList` comes into play. `FlatList` renders items lazily,\n * just when they are about to appear, and removes items that scroll way off\n * screen to save memory and processing time.\n *\n * `FlatList` is also handy if you want to render separators between your items,\n * multiple columns, infinite scroll loading, or any number of other features it\n * supports out of the box.\n */\nclass ScrollView extends React.Component<Props, State> {\n  static Context: typeof ScrollViewContext = ScrollViewContext;\n\n  constructor(props: Props) {\n    super(props);\n\n    this._scrollAnimatedValue = new AnimatedImplementation.Value(\n      this.props.contentOffset?.y ?? 0,\n    );\n    this._scrollAnimatedValue.setOffset(this.props.contentInset?.top ?? 0);\n  }\n\n  _scrollAnimatedValue: AnimatedImplementation.Value;\n  _scrollAnimatedValueAttachment: ?{detach: () => void, ...} = null;\n  _stickyHeaderRefs: Map<string, React.ElementRef<StickyHeaderComponentType>> =\n    new Map();\n  _headerLayoutYs: Map<string, number> = new Map();\n\n  _keyboardMetrics: ?KeyboardMetrics = null;\n  _additionalScrollOffset: number = 0;\n  _isTouching: boolean = false;\n  _lastMomentumScrollBeginTime: number = 0;\n  _lastMomentumScrollEndTime: number = 0;\n\n  // Reset to false every time becomes responder. This is used to:\n  // - Determine if the scroll view has been scrolled and therefore should\n  // refuse to give up its responder lock.\n  // - Determine if releasing should dismiss the keyboard when we are in\n  // tap-to-dismiss mode (this.props.keyboardShouldPersistTaps !== 'always').\n  _observedScrollSinceBecomingResponder: boolean = false;\n  _becameResponderWhileAnimating: boolean = false;\n  _preventNegativeScrollOffset: ?boolean = null;\n\n  _animated: ?boolean = null;\n\n  _subscriptionKeyboardWillShow: ?EventSubscription = null;\n  _subscriptionKeyboardWillHide: ?EventSubscription = null;\n  _subscriptionKeyboardDidShow: ?EventSubscription = null;\n  _subscriptionKeyboardDidHide: ?EventSubscription = null;\n\n  #onScrollEmitter: ?EventEmitter<{\n    scroll: [{x: number, y: number}],\n  }> = null;\n\n  state: State = {\n    layoutHeight: null,\n  };\n\n  componentDidMount() {\n    if (typeof this.props.keyboardShouldPersistTaps === 'boolean') {\n      console.warn(\n        `'keyboardShouldPersistTaps={${\n          this.props.keyboardShouldPersistTaps === true ? 'true' : 'false'\n        }}' is deprecated. ` +\n          `Use 'keyboardShouldPersistTaps=\"${\n            this.props.keyboardShouldPersistTaps ? 'always' : 'never'\n          }\"' instead`,\n      );\n    }\n\n    this._keyboardMetrics = Keyboard.metrics();\n    this._additionalScrollOffset = 0;\n\n    this._subscriptionKeyboardWillShow = Keyboard.addListener(\n      'keyboardWillShow',\n      this.scrollResponderKeyboardWillShow,\n    );\n    this._subscriptionKeyboardWillHide = Keyboard.addListener(\n      'keyboardWillHide',\n      this.scrollResponderKeyboardWillHide,\n    );\n    this._subscriptionKeyboardDidShow = Keyboard.addListener(\n      'keyboardDidShow',\n      this.scrollResponderKeyboardDidShow,\n    );\n    this._subscriptionKeyboardDidHide = Keyboard.addListener(\n      'keyboardDidHide',\n      this.scrollResponderKeyboardDidHide,\n    );\n\n    this._updateAnimatedNodeAttachment();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevContentInsetTop = prevProps.contentInset\n      ? prevProps.contentInset.top\n      : 0;\n    const newContentInsetTop = this.props.contentInset\n      ? this.props.contentInset.top\n      : 0;\n    if (prevContentInsetTop !== newContentInsetTop) {\n      this._scrollAnimatedValue.setOffset(newContentInsetTop || 0);\n    }\n\n    this._updateAnimatedNodeAttachment();\n  }\n\n  componentWillUnmount() {\n    if (this._subscriptionKeyboardWillShow != null) {\n      this._subscriptionKeyboardWillShow.remove();\n    }\n    if (this._subscriptionKeyboardWillHide != null) {\n      this._subscriptionKeyboardWillHide.remove();\n    }\n    if (this._subscriptionKeyboardDidShow != null) {\n      this._subscriptionKeyboardDidShow.remove();\n    }\n    if (this._subscriptionKeyboardDidHide != null) {\n      this._subscriptionKeyboardDidHide.remove();\n    }\n\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n\n    this.#onScrollEmitter?.removeAllListeners();\n  }\n\n  /**\n   * Returns a reference to the underlying scroll responder, which supports\n   * operations like `scrollTo`. All ScrollView-like components should\n   * implement this method so that they can be composed while providing access\n   * to the underlying scroll responder's methods.\n   */\n  getScrollResponder: () => ScrollResponderType = () => {\n    // $FlowFixMe[unclear-type]\n    return ((this: any): ScrollResponderType);\n  };\n\n  getScrollableNode: () => ?number = () => {\n    return findNodeHandle(this.getNativeScrollRef());\n  };\n\n  getInnerViewNode: () => ?number = () => {\n    return findNodeHandle(this._innerView.nativeInstance);\n  };\n\n  getInnerViewRef: () => InnerViewInstance | null = () => {\n    return this._innerView.nativeInstance;\n  };\n\n  getNativeScrollRef: () => TScrollViewNativeComponentInstance | null = () => {\n    const {nativeInstance} = this._scrollView;\n    return nativeInstance == null ? null : nativeInstance.componentRef.current;\n  };\n\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   *\n   * Example:\n   *\n   * `scrollTo({x: 0, y: 0, animated: true})`\n   *\n   * Note: The weird function signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as an alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollTo: (\n    options?:\n      | {\n          x?: number,\n          y?: number,\n          animated?: boolean,\n          ...\n        }\n      | number,\n    deprecatedX?: number,\n    deprecatedAnimated?: boolean,\n  ) => void = (\n    options?:\n      | {\n          x?: number,\n          y?: number,\n          animated?: boolean,\n          ...\n        }\n      | number,\n    deprecatedX?: number,\n    deprecatedAnimated?: boolean,\n  ) => {\n    let x, y, animated;\n    if (typeof options === 'number') {\n      console.warn(\n        '`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' +\n          'animated: true})` instead.',\n      );\n      y = options;\n      x = deprecatedX;\n      animated = deprecatedAnimated;\n    } else if (options) {\n      y = options.y;\n      x = options.x;\n      animated = options.animated;\n    }\n    const component = this.getNativeScrollRef();\n    if (component == null) {\n      return;\n    }\n    Commands.scrollTo(component, x || 0, y || 0, animated !== false);\n  };\n\n  /**\n   * If this is a vertical ScrollView scrolls to the bottom.\n   * If this is a horizontal ScrollView scrolls to the right.\n   *\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\n   * `scrollToEnd({animated: false})` for immediate scrolling.\n   * If no options are passed, `animated` defaults to true.\n   */\n  scrollToEnd: (options?: ?{animated?: boolean, ...}) => void = (\n    options?: ?{animated?: boolean, ...},\n  ) => {\n    // Default to true\n    const animated = (options && options.animated) !== false;\n    const component = this.getNativeScrollRef();\n    if (component == null) {\n      return;\n    }\n    Commands.scrollToEnd(component, animated);\n  };\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators: () => void = () => {\n    const component = this.getNativeScrollRef();\n    if (component == null) {\n      return;\n    }\n    Commands.flashScrollIndicators(component);\n  };\n\n  _subscribeToOnScroll: (\n    callback: ({x: number, y: number}) => void,\n  ) => EventSubscription = callback => {\n    let onScrollEmitter = this.#onScrollEmitter;\n    if (onScrollEmitter == null) {\n      onScrollEmitter = new EventEmitter();\n      this.#onScrollEmitter = onScrollEmitter;\n      // This is the first subscription, so make sure the native component is\n      // also configured to output synchronous scroll events.\n      this._scrollView.nativeInstance?.unstable_setEnableSyncOnScroll(true);\n    }\n    return onScrollEmitter.addListener('scroll', callback);\n  };\n\n  /**\n   * This method should be used as the callback to onFocus in a TextInputs'\n   * parent view. Note that any module using this mixin needs to return\n   * the parent view's ref in getScrollViewRef() in order to use this method.\n   * @param {number} nodeHandle The TextInput node handle\n   * @param {number} additionalOffset The scroll view's bottom \"contentInset\".\n   *        Default is 0.\n   * @param {bool} preventNegativeScrolling Whether to allow pulling the content\n   *        down to make it meet the keyboard's top. Default is false.\n   */\n  scrollResponderScrollNativeHandleToKeyboard: <T>(\n    nodeHandle: number | React.ElementRef<HostComponent<T>>,\n    additionalOffset?: number,\n    preventNegativeScrollOffset?: boolean,\n  ) => void = <T>(\n    nodeHandle: number | React.ElementRef<HostComponent<T>>,\n    additionalOffset?: number,\n    preventNegativeScrollOffset?: boolean,\n  ) => {\n    this._additionalScrollOffset = additionalOffset || 0;\n    this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;\n\n    if (this._innerView.nativeInstance == null) {\n      return;\n    }\n\n    if (typeof nodeHandle === 'number') {\n      UIManager.measureLayout(\n        nodeHandle,\n        nullthrows(findNodeHandle(this)),\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n        this._textInputFocusError,\n        this._inputMeasureAndScrollToKeyboard,\n      );\n    } else {\n      nodeHandle.measureLayout(\n        this._innerView.nativeInstance,\n        this._inputMeasureAndScrollToKeyboard,\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n        this._textInputFocusError,\n      );\n    }\n  };\n\n  /**\n   * A helper function to zoom to a specific rect in the scrollview. The argument has the shape\n   * {x: number; y: number; width: number; height: number; animated: boolean = true}\n   *\n   * @platform ios\n   */\n  scrollResponderZoomTo: (\n    rect: {|\n      x: number,\n      y: number,\n      width: number,\n      height: number,\n      animated?: boolean,\n    |},\n    animated?: boolean, // deprecated, put this inside the rect argument instead\n  ) => void = (\n    rect: {|\n      x: number,\n      y: number,\n      width: number,\n      height: number,\n      animated?: boolean,\n    |},\n    animated?: boolean, // deprecated, put this inside the rect argument instead\n  ) => {\n    invariant(Platform.OS === 'ios', 'zoomToRect is not implemented');\n    if ('animated' in rect) {\n      this._animated = rect.animated;\n      delete rect.animated;\n    } else if (typeof animated !== 'undefined') {\n      console.warn(\n        '`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead',\n      );\n    }\n\n    const component = this.getNativeScrollRef();\n    if (component == null) {\n      return;\n    }\n    Commands.zoomToRect(component, rect, animated !== false);\n  };\n\n  _textInputFocusError() {\n    console.warn('Error measuring text field.');\n  }\n\n  /**\n   * The calculations performed here assume the scroll view takes up the entire\n   * screen - even if has some content inset. We then measure the offsets of the\n   * keyboard, and compensate both for the scroll view's \"contentInset\".\n   *\n   * @param {number} left Position of input w.r.t. table view.\n   * @param {number} top Position of input w.r.t. table view.\n   * @param {number} width Width of the text input.\n   * @param {number} height Height of the text input.\n   */\n  _inputMeasureAndScrollToKeyboard: (\n    left: number,\n    top: number,\n    width: number,\n    height: number,\n  ) => void = (left: number, top: number, width: number, height: number) => {\n    let keyboardScreenY = Dimensions.get('window').height;\n\n    const scrollTextInputIntoVisibleRect = () => {\n      if (this._keyboardMetrics != null) {\n        keyboardScreenY = this._keyboardMetrics.screenY;\n      }\n      let scrollOffsetY =\n        top - keyboardScreenY + height + this._additionalScrollOffset;\n\n      // By default, this can scroll with negative offset, pulling the content\n      // down so that the target component's bottom meets the keyboard's top.\n      // If requested otherwise, cap the offset at 0 minimum to avoid content\n      // shifting down.\n      if (this._preventNegativeScrollOffset === true) {\n        scrollOffsetY = Math.max(0, scrollOffsetY);\n      }\n      this.scrollTo({x: 0, y: scrollOffsetY, animated: true});\n\n      this._additionalScrollOffset = 0;\n      this._preventNegativeScrollOffset = false;\n    };\n\n    if (this._keyboardMetrics == null) {\n      // `_keyboardMetrics` is set inside `scrollResponderKeyboardWillShow` which\n      // is not guaranteed to be called before `_inputMeasureAndScrollToKeyboard` but native has already scheduled it.\n      // In case it was not called before `_inputMeasureAndScrollToKeyboard`, we postpone scrolling to\n      // text input.\n      setTimeout(() => {\n        scrollTextInputIntoVisibleRect();\n      }, 0);\n    } else {\n      scrollTextInputIntoVisibleRect();\n    }\n  };\n\n  _getKeyForIndex(index: $FlowFixMe, childArray: $FlowFixMe): $FlowFixMe {\n    const child = childArray[index];\n    return child && child.key;\n  }\n\n  _updateAnimatedNodeAttachment() {\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n    if (\n      this.props.stickyHeaderIndices &&\n      this.props.stickyHeaderIndices.length > 0\n    ) {\n      this._scrollAnimatedValueAttachment =\n        AnimatedImplementation.attachNativeEvent(\n          this.getNativeScrollRef(),\n          'onScroll',\n          [{nativeEvent: {contentOffset: {y: this._scrollAnimatedValue}}}],\n        );\n    }\n  }\n\n  _setStickyHeaderRef(\n    key: string,\n    ref: ?React.ElementRef<StickyHeaderComponentType>,\n  ) {\n    if (ref) {\n      this._stickyHeaderRefs.set(key, ref);\n    } else {\n      this._stickyHeaderRefs.delete(key);\n    }\n  }\n\n  _onStickyHeaderLayout(index: $FlowFixMe, event: $FlowFixMe, key: $FlowFixMe) {\n    const {stickyHeaderIndices} = this.props;\n    if (!stickyHeaderIndices) {\n      return;\n    }\n    const childArray = React.Children.toArray<$FlowFixMe>(this.props.children);\n    if (key !== this._getKeyForIndex(index, childArray)) {\n      // ignore stale layout update\n      return;\n    }\n\n    const layoutY = event.nativeEvent.layout.y;\n    this._headerLayoutYs.set(key, layoutY);\n\n    const indexOfIndex = stickyHeaderIndices.indexOf(index);\n    const previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];\n    if (previousHeaderIndex != null) {\n      const previousHeader = this._stickyHeaderRefs.get(\n        this._getKeyForIndex(previousHeaderIndex, childArray),\n      );\n      previousHeader &&\n        previousHeader.setNextHeaderY &&\n        previousHeader.setNextHeaderY(layoutY);\n    }\n  }\n\n  _handleScroll = (e: ScrollEvent) => {\n    this._observedScrollSinceBecomingResponder = true;\n    this.props.onScroll && this.props.onScroll(e);\n\n    this.#onScrollEmitter?.emit('scroll', {\n      x: e.nativeEvent.contentOffset.x,\n      y: e.nativeEvent.contentOffset.y,\n    });\n  };\n\n  _handleLayout = (e: LayoutEvent) => {\n    if (this.props.invertStickyHeaders === true) {\n      this.setState({layoutHeight: e.nativeEvent.layout.height});\n    }\n    if (this.props.onLayout) {\n      this.props.onLayout(e);\n    }\n  };\n\n  _handleContentOnLayout = (e: LayoutEvent) => {\n    const {width, height} = e.nativeEvent.layout;\n    this.props.onContentSizeChange &&\n      this.props.onContentSizeChange(width, height);\n  };\n\n  _innerView: RefForwarder<InnerViewInstance, InnerViewInstance> =\n    createRefForwarder(\n      (instance: InnerViewInstance): InnerViewInstance => instance,\n    );\n\n  _scrollView: RefForwarder<\n    TScrollViewNativeImperativeHandle,\n    PublicScrollViewInstance | null,\n  > = createRefForwarder(nativeImperativeHandle => {\n    const nativeInstance = nativeImperativeHandle.componentRef.current;\n    if (nativeInstance == null) {\n      return null;\n    }\n\n    // This is a hack. Ideally we would forwardRef  to the underlying\n    // host component. However, since ScrollView has it's own methods that can be\n    // called as well, if we used the standard forwardRef then these\n    // methods wouldn't be accessible and thus be a breaking change.\n    //\n    // Therefore we edit ref to include ScrollView's public methods so that\n    // they are callable from the ref.\n\n    // $FlowFixMe[prop-missing] - Known issue with appending custom methods.\n    const publicInstance: PublicScrollViewInstance = Object.assign(\n      nativeInstance,\n      {\n        getScrollResponder: this.getScrollResponder,\n        getScrollableNode: this.getScrollableNode,\n        getInnerViewNode: this.getInnerViewNode,\n        getInnerViewRef: this.getInnerViewRef,\n        getNativeScrollRef: this.getNativeScrollRef,\n        scrollTo: this.scrollTo,\n        scrollToEnd: this.scrollToEnd,\n        flashScrollIndicators: this.flashScrollIndicators,\n        scrollResponderZoomTo: this.scrollResponderZoomTo,\n        // TODO: Replace unstable_subscribeToOnScroll once scrollView.addEventListener('scroll', (e: ScrollEvent) => {}, {passive: false});\n        unstable_subscribeToOnScroll: this._subscribeToOnScroll,\n        scrollResponderScrollNativeHandleToKeyboard:\n          this.scrollResponderScrollNativeHandleToKeyboard,\n      },\n    );\n\n    return publicInstance;\n  });\n\n  /**\n   * Warning, this may be called several times for a single keyboard opening.\n   * It's best to store the information in this method and then take any action\n   * at a later point (either in `keyboardDidShow` or other).\n   *\n   * Here's the order that events occur in:\n   * - focus\n   * - willShow {startCoordinates, endCoordinates} several times\n   * - didShow several times\n   * - blur\n   * - willHide {startCoordinates, endCoordinates} several times\n   * - didHide several times\n   *\n   * The `ScrollResponder` module callbacks for each of these events.\n   * Even though any user could have easily listened to keyboard events\n   * themselves, using these `props` callbacks ensures that ordering of events\n   * is consistent - and not dependent on the order that the keyboard events are\n   * subscribed to. This matters when telling the scroll view to scroll to where\n   * the keyboard is headed - the scroll responder better have been notified of\n   * the keyboard destination before being instructed to scroll to where the\n   * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything\n   * will work.\n   *\n   * WARNING: These callbacks will fire even if a keyboard is displayed in a\n   * different navigation pane. Filter out the events to determine if they are\n   * relevant to you. (For example, only if you receive these callbacks after\n   * you had explicitly focused a node etc).\n   */\n\n  scrollResponderKeyboardWillShow: (e: KeyboardEvent) => void = (\n    e: KeyboardEvent,\n  ) => {\n    this._keyboardMetrics = e.endCoordinates;\n    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\n  };\n\n  scrollResponderKeyboardWillHide: (e: KeyboardEvent) => void = (\n    e: KeyboardEvent,\n  ) => {\n    this._keyboardMetrics = null;\n    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\n  };\n\n  scrollResponderKeyboardDidShow: (e: KeyboardEvent) => void = (\n    e: KeyboardEvent,\n  ) => {\n    this._keyboardMetrics = e.endCoordinates;\n    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\n  };\n\n  scrollResponderKeyboardDidHide: (e: KeyboardEvent) => void = (\n    e: KeyboardEvent,\n  ) => {\n    this._keyboardMetrics = null;\n    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\n  };\n\n  /**\n   * Invoke this from an `onMomentumScrollBegin` event.\n   */\n  _handleMomentumScrollBegin: (e: ScrollEvent) => void = (e: ScrollEvent) => {\n    this._lastMomentumScrollBeginTime = global.performance.now();\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n  };\n\n  /**\n   * Invoke this from an `onMomentumScrollEnd` event.\n   */\n  _handleMomentumScrollEnd: (e: ScrollEvent) => void = (e: ScrollEvent) => {\n    FrameRateLogger.endScroll();\n    this._lastMomentumScrollEndTime = global.performance.now();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  };\n\n  /**\n   * Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll\n   * animation, and there's not an easy way to distinguish a drag vs. stopping\n   * momentum.\n   *\n   * Invoke this from an `onScrollBeginDrag` event.\n   */\n  _handleScrollBeginDrag: (e: ScrollEvent) => void = (e: ScrollEvent) => {\n    FrameRateLogger.beginScroll(); // TODO: track all scrolls after implementing onScrollEndAnimation\n\n    if (\n      Platform.OS === 'android' &&\n      this.props.keyboardDismissMode === 'on-drag'\n    ) {\n      dismissKeyboard();\n    }\n\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  };\n\n  /**\n   * Invoke this from an `onScrollEndDrag` event.\n   */\n  _handleScrollEndDrag: (e: ScrollEvent) => void = (e: ScrollEvent) => {\n    const {velocity} = e.nativeEvent;\n    // - If we are animating, then this is a \"drag\" that is stopping the scrollview and momentum end\n    //   will fire.\n    // - If velocity is non-zero, then the interaction will stop when momentum scroll ends or\n    //   another drag starts and ends.\n    // - If we don't get velocity, better to stop the interaction twice than not stop it.\n    if (\n      !this._isAnimating() &&\n      (!velocity || (velocity.x === 0 && velocity.y === 0))\n    ) {\n      FrameRateLogger.endScroll();\n    }\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  };\n\n  /**\n   * A helper function for this class that lets us quickly determine if the\n   * view is currently animating. This is particularly useful to know when\n   * a touch has just started or ended.\n   */\n  _isAnimating: () => boolean = () => {\n    const now = global.performance.now();\n    const timeSinceLastMomentumScrollEnd =\n      now - this._lastMomentumScrollEndTime;\n    const isAnimating =\n      timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS ||\n      this._lastMomentumScrollEndTime < this._lastMomentumScrollBeginTime;\n    return isAnimating;\n  };\n\n  /**\n   * Invoke this from an `onResponderGrant` event.\n   */\n  _handleResponderGrant: (e: PressEvent) => void = (e: PressEvent) => {\n    this._observedScrollSinceBecomingResponder = false;\n    this.props.onResponderGrant && this.props.onResponderGrant(e);\n    this._becameResponderWhileAnimating = this._isAnimating();\n  };\n\n  /**\n   * Invoke this from an `onResponderReject` event.\n   *\n   * Some other element is not yielding its role as responder. Normally, we'd\n   * just disable the `UIScrollView`, but a touch has already began on it, the\n   * `UIScrollView` will not accept being disabled after that. The easiest\n   * solution for now is to accept the limitation of disallowing this\n   * altogether. To improve this, find a way to disable the `UIScrollView` after\n   * a touch has already started.\n   */\n  _handleResponderReject: () => void = () => {};\n\n  /**\n   * Invoke this from an `onResponderRelease` event.\n   */\n  _handleResponderRelease: (e: PressEvent) => void = (e: PressEvent) => {\n    this._isTouching = e.nativeEvent.touches.length !== 0;\n    this.props.onResponderRelease && this.props.onResponderRelease(e);\n\n    if (typeof e.target === 'number') {\n      if (__DEV__) {\n        console.error(\n          'Did not expect event target to be a number. Should have been a native component',\n        );\n      }\n\n      return;\n    }\n\n    // By default scroll views will unfocus a textField\n    // if another touch occurs outside of it\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedInput();\n    if (\n      currentlyFocusedTextInput != null &&\n      this.props.keyboardShouldPersistTaps !== true &&\n      this.props.keyboardShouldPersistTaps !== 'always' &&\n      this._keyboardIsDismissible() &&\n      e.target !== currentlyFocusedTextInput &&\n      !this._observedScrollSinceBecomingResponder &&\n      !this._becameResponderWhileAnimating\n    ) {\n      TextInputState.blurTextInput(currentlyFocusedTextInput);\n    }\n  };\n\n  /**\n   * We will allow the scroll view to give up its lock iff it acquired the lock\n   * during an animation. This is a very useful default that happens to satisfy\n   * many common user experiences.\n   *\n   * - Stop a scroll on the left edge, then turn that into an outer view's\n   *   backswipe.\n   * - Stop a scroll mid-bounce at the top, continue pulling to have the outer\n   *   view dismiss.\n   * - However, without catching the scroll view mid-bounce (while it is\n   *   motionless), if you drag far enough for the scroll view to become\n   *   responder (and therefore drag the scroll view a bit), any backswipe\n   *   navigation of a swipe gesture higher in the view hierarchy, should be\n   *   rejected.\n   */\n  _handleResponderTerminationRequest: () => boolean = () => {\n    return !this._observedScrollSinceBecomingResponder;\n  };\n\n  /**\n   * Invoke this from an `onScroll` event.\n   */\n  _handleScrollShouldSetResponder: () => boolean = () => {\n    // Allow any event touch pass through if the default pan responder is disabled\n    if (this.props.disableScrollViewPanResponder === true) {\n      return false;\n    }\n    return this._isTouching;\n  };\n\n  /**\n   * Merely touch starting is not sufficient for a scroll view to become the\n   * responder. Being the \"responder\" means that the very next touch move/end\n   * event will result in an action/movement.\n   *\n   * Invoke this from an `onStartShouldSetResponder` event.\n   *\n   * `onStartShouldSetResponder` is used when the next move/end will trigger\n   * some UI movement/action, but when you want to yield priority to views\n   * nested inside of the view.\n   *\n   * There may be some cases where scroll views actually should return `true`\n   * from `onStartShouldSetResponder`: Any time we are detecting a standard tap\n   * that gives priority to nested views.\n   *\n   * - If a single tap on the scroll view triggers an action such as\n   *   recentering a map style view yet wants to give priority to interaction\n   *   views inside (such as dropped pins or labels), then we would return true\n   *   from this method when there is a single touch.\n   *\n   * - Similar to the previous case, if a two finger \"tap\" should trigger a\n   *   zoom, we would check the `touches` count, and if `>= 2`, we would return\n   *   true.\n   *\n   */\n  _handleStartShouldSetResponder: (e: PressEvent) => boolean = (\n    e: PressEvent,\n  ) => {\n    // Allow any event touch pass through if the default pan responder is disabled\n    if (this.props.disableScrollViewPanResponder === true) {\n      return false;\n    }\n\n    const currentlyFocusedInput = TextInputState.currentlyFocusedInput();\n    if (\n      this.props.keyboardShouldPersistTaps === 'handled' &&\n      this._keyboardIsDismissible() &&\n      e.target !== currentlyFocusedInput\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * There are times when the scroll view wants to become the responder\n   * (meaning respond to the next immediate `touchStart/touchEnd`), in a way\n   * that *doesn't* give priority to nested views (hence the capture phase):\n   *\n   * - Currently animating.\n   * - Tapping anywhere that is not a text input, while the keyboard is\n   *   up (which should dismiss the keyboard).\n   *\n   * Invoke this from an `onStartShouldSetResponderCapture` event.\n   */\n  _handleStartShouldSetResponderCapture: (e: PressEvent) => boolean = (\n    e: PressEvent,\n  ) => {\n    // The scroll view should receive taps instead of its descendants if:\n    // * it is already animating/decelerating\n    if (this._isAnimating()) {\n      return true;\n    }\n\n    // Allow any event touch pass through if the default pan responder is disabled\n    if (this.props.disableScrollViewPanResponder === true) {\n      return false;\n    }\n\n    // * the keyboard is up, keyboardShouldPersistTaps is 'never' (the default),\n    // and a new touch starts with a non-textinput target (in which case the\n    // first tap should be sent to the scroll view and dismiss the keyboard,\n    // then the second tap goes to the actual interior view)\n    const {keyboardShouldPersistTaps} = this.props;\n    const keyboardNeverPersistTaps =\n      !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';\n\n    if (typeof e.target === 'number') {\n      if (__DEV__) {\n        console.error(\n          'Did not expect event target to be a number. Should have been a native component',\n        );\n      }\n\n      return false;\n    }\n\n    // Let presses through if the soft keyboard is detached from the viewport\n    if (this._softKeyboardIsDetached()) {\n      return false;\n    }\n\n    if (\n      keyboardNeverPersistTaps &&\n      this._keyboardIsDismissible() &&\n      e.target != null &&\n      // $FlowFixMe[incompatible-call]\n      !TextInputState.isTextInput(e.target)\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * Do we consider there to be a dismissible soft-keyboard open?\n   */\n  _keyboardIsDismissible: () => boolean = () => {\n    const currentlyFocusedInput = TextInputState.currentlyFocusedInput();\n\n    // We cannot dismiss the keyboard without an input to blur, even if a soft\n    // keyboard is open (e.g. when keyboard is open due to a native component\n    // not participating in TextInputState). It's also possible that the\n    // currently focused input isn't a TextInput (such as by calling ref.focus\n    // on a non-TextInput).\n    const hasFocusedTextInput =\n      currentlyFocusedInput != null &&\n      TextInputState.isTextInput(currentlyFocusedInput);\n\n    // Even if an input is focused, we may not have a keyboard to dismiss. E.g\n    // when using a physical keyboard. Ensure we have an event for an opened\n    // keyboard.\n    const softKeyboardMayBeOpen =\n      this._keyboardMetrics != null || this._keyboardEventsAreUnreliable();\n\n    return hasFocusedTextInput && softKeyboardMayBeOpen;\n  };\n\n  /**\n   * Whether an open soft keyboard is present which does not overlap the\n   * viewport. E.g. for a VR soft-keyboard which is detached from the app\n   * viewport.\n   */\n  _softKeyboardIsDetached: () => boolean = () => {\n    return this._keyboardMetrics != null && this._keyboardMetrics.height === 0;\n  };\n\n  _keyboardEventsAreUnreliable: () => boolean = () => {\n    // Android versions prior to API 30 rely on observing layout changes when\n    // `android:windowSoftInputMode` is set to `adjustResize` or `adjustPan`.\n    return Platform.OS === 'android' && Platform.Version < 30;\n  };\n\n  /**\n   * Invoke this from an `onTouchEnd` event.\n   *\n   * @param {PressEvent} e Event.\n   */\n  _handleTouchEnd: (e: PressEvent) => void = (e: PressEvent) => {\n    const nativeEvent = e.nativeEvent;\n    this._isTouching = nativeEvent.touches.length !== 0;\n\n    const {keyboardShouldPersistTaps} = this.props;\n    const keyboardNeverPersistsTaps =\n      !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';\n\n    // Dismiss the keyboard now if we didn't become responder in capture phase\n    // to eat presses, but still want to dismiss on interaction.\n    // Don't do anything if the target of the touch event is the current input.\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedInput();\n    if (\n      currentlyFocusedTextInput != null &&\n      e.target !== currentlyFocusedTextInput &&\n      this._softKeyboardIsDetached() &&\n      this._keyboardIsDismissible() &&\n      keyboardNeverPersistsTaps\n    ) {\n      TextInputState.blurTextInput(currentlyFocusedTextInput);\n    }\n\n    this.props.onTouchEnd && this.props.onTouchEnd(e);\n  };\n\n  /**\n   * Invoke this from an `onTouchCancel` event.\n   *\n   * @param {PressEvent} e Event.\n   */\n  _handleTouchCancel: (e: PressEvent) => void = (e: PressEvent) => {\n    this._isTouching = false;\n    this.props.onTouchCancel && this.props.onTouchCancel(e);\n  };\n\n  /**\n   * Invoke this from an `onTouchStart` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {PressEvent} e Touch Start event.\n   */\n  _handleTouchStart: (e: PressEvent) => void = (e: PressEvent) => {\n    this._isTouching = true;\n    this.props.onTouchStart && this.props.onTouchStart(e);\n  };\n\n  /**\n   * Invoke this from an `onTouchMove` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {PressEvent} e Touch Start event.\n   */\n  _handleTouchMove: (e: PressEvent) => void = (e: PressEvent) => {\n    this.props.onTouchMove && this.props.onTouchMove(e);\n  };\n\n  render(): React.Node {\n    const horizontal = this.props.horizontal === true;\n\n    const NativeScrollView = horizontal\n      ? HScrollViewNativeComponent\n      : VScrollViewNativeComponent;\n\n    const NativeScrollContentView = horizontal\n      ? HScrollContentViewNativeComponent\n      : VScrollContentViewNativeComponent;\n\n    const contentContainerStyle = [\n      horizontal && styles.contentContainerHorizontal,\n      this.props.contentContainerStyle,\n    ];\n    if (__DEV__ && this.props.style !== undefined) {\n      // $FlowFixMe[underconstrained-implicit-instantiation]\n      const style = flattenStyle(this.props.style);\n      const childLayoutProps = ['alignItems', 'justifyContent'].filter(\n        // $FlowFixMe[incompatible-use]\n        prop => style && style[prop] !== undefined,\n      );\n      invariant(\n        childLayoutProps.length === 0,\n        'ScrollView child layout (' +\n          JSON.stringify(childLayoutProps) +\n          ') must be applied through the contentContainerStyle prop.',\n      );\n    }\n\n    const contentSizeChangeProps =\n      this.props.onContentSizeChange == null\n        ? null\n        : {\n            onLayout: this._handleContentOnLayout,\n          };\n\n    const {stickyHeaderIndices} = this.props;\n    let children = this.props.children;\n    /**\n     * This function can cause unnecessary remount when nested in conditionals as it causes remap of children keys.\n     * https://react.dev/reference/react/Children#children-toarray-caveats\n     */\n    children = React.Children.toArray<$FlowFixMe>(children);\n\n    if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {\n      children = children.map((child, index) => {\n        const indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;\n        if (indexOfIndex > -1) {\n          const key = child.key;\n          const nextIndex = stickyHeaderIndices[indexOfIndex + 1];\n          const StickyHeaderComponent =\n            this.props.StickyHeaderComponent || ScrollViewStickyHeader;\n          return (\n            <StickyHeaderComponent\n              key={key}\n              ref={ref => this._setStickyHeaderRef(key, ref)}\n              nextHeaderLayoutY={this._headerLayoutYs.get(\n                this._getKeyForIndex(nextIndex, children),\n              )}\n              onLayout={event => this._onStickyHeaderLayout(index, event, key)}\n              scrollAnimatedValue={this._scrollAnimatedValue}\n              inverted={this.props.invertStickyHeaders}\n              hiddenOnScroll={this.props.stickyHeaderHiddenOnScroll}\n              scrollViewHeight={this.state.layoutHeight}>\n              {child}\n            </StickyHeaderComponent>\n          );\n        } else {\n          return child;\n        }\n      });\n    }\n    children = (\n      <ScrollViewContext.Provider value={horizontal ? HORIZONTAL : VERTICAL}>\n        {children}\n      </ScrollViewContext.Provider>\n    );\n\n    const hasStickyHeaders =\n      Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;\n\n    // Some ScrollView native component behaviors rely on using the metrics\n    // of mounted views for anchoring. Make sure not to flatten children if\n    // this is the case.\n    const preserveChildren =\n      this.props.maintainVisibleContentPosition != null ||\n      (Platform.OS === 'android' && this.props.snapToAlignment != null);\n\n    const contentContainer = (\n      <NativeScrollContentView\n        {...contentSizeChangeProps}\n        ref={this._innerView.getForwardingRef(this.props.innerViewRef)}\n        style={contentContainerStyle}\n        removeClippedSubviews={\n          // Subview clipping causes issues with sticky headers on Android and\n          // would be hard to fix properly in a performant way.\n          Platform.OS === 'android' && hasStickyHeaders\n            ? false\n            : this.props.removeClippedSubviews\n        }\n        collapsable={false}\n        collapsableChildren={!preserveChildren}>\n        {children}\n      </NativeScrollContentView>\n    );\n\n    const alwaysBounceHorizontal =\n      this.props.alwaysBounceHorizontal !== undefined\n        ? this.props.alwaysBounceHorizontal\n        : this.props.horizontal;\n\n    const alwaysBounceVertical =\n      this.props.alwaysBounceVertical !== undefined\n        ? this.props.alwaysBounceVertical\n        : !this.props.horizontal;\n\n    const baseStyle = horizontal ? styles.baseHorizontal : styles.baseVertical;\n\n    const {experimental_endDraggingSensitivityMultiplier, ...otherProps} =\n      this.props;\n    const props = {\n      ...otherProps,\n      alwaysBounceHorizontal,\n      alwaysBounceVertical,\n      style: StyleSheet.compose(baseStyle, this.props.style),\n      // Override the onContentSizeChange from props, since this event can\n      // bubble up from TextInputs\n      onContentSizeChange: null,\n      onLayout: this._handleLayout,\n      onMomentumScrollBegin: this._handleMomentumScrollBegin,\n      onMomentumScrollEnd: this._handleMomentumScrollEnd,\n      onResponderGrant: this._handleResponderGrant,\n      onResponderReject: this._handleResponderReject,\n      onResponderRelease: this._handleResponderRelease,\n      onResponderTerminationRequest: this._handleResponderTerminationRequest,\n      onScrollBeginDrag: this._handleScrollBeginDrag,\n      onScrollEndDrag: this._handleScrollEndDrag,\n      onScrollShouldSetResponder: this._handleScrollShouldSetResponder,\n      onStartShouldSetResponder: this._handleStartShouldSetResponder,\n      onStartShouldSetResponderCapture:\n        this._handleStartShouldSetResponderCapture,\n      onTouchEnd: this._handleTouchEnd,\n      onTouchMove: this._handleTouchMove,\n      onTouchStart: this._handleTouchStart,\n      onTouchCancel: this._handleTouchCancel,\n      onScroll: this._handleScroll,\n      endDraggingSensitivityMultiplier:\n        experimental_endDraggingSensitivityMultiplier,\n      scrollEventThrottle: hasStickyHeaders\n        ? 1\n        : this.props.scrollEventThrottle,\n      sendMomentumEvents:\n        this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd\n          ? true\n          : false,\n      // default to true\n      snapToStart: this.props.snapToStart !== false,\n      // default to true\n      snapToEnd: this.props.snapToEnd !== false,\n      // pagingEnabled is overridden by snapToInterval / snapToOffsets\n      pagingEnabled: Platform.select({\n        // on iOS, pagingEnabled must be set to false to have snapToInterval / snapToOffsets work\n        ios:\n          this.props.pagingEnabled === true &&\n          this.props.snapToInterval == null &&\n          this.props.snapToOffsets == null,\n        // on Android, pagingEnabled must be set to true to have snapToInterval / snapToOffsets work\n        android:\n          this.props.pagingEnabled === true ||\n          this.props.snapToInterval != null ||\n          this.props.snapToOffsets != null,\n      }),\n    };\n\n    const {decelerationRate} = this.props;\n    if (decelerationRate != null) {\n      props.decelerationRate = processDecelerationRate(decelerationRate);\n    }\n\n    const refreshControl = this.props.refreshControl;\n    const scrollViewRef: React.RefSetter<TScrollViewNativeImperativeHandle | null> =\n      this._scrollView.getForwardingRef(this.props.scrollViewRef);\n\n    if (refreshControl) {\n      if (Platform.OS === 'ios') {\n        // On iOS the RefreshControl is a child of the ScrollView.\n        return (\n          // $FlowFixMe[incompatible-type] - Flow only knows element refs.\n          <NativeScrollView {...props} ref={scrollViewRef}>\n            {refreshControl}\n            {contentContainer}\n          </NativeScrollView>\n        );\n      } else if (Platform.OS === 'android') {\n        // On Android wrap the ScrollView with a AndroidSwipeRefreshLayout.\n        // Since the ScrollView is wrapped add the style props to the\n        // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.\n        // Note: we should split props.style on the inner and outer props\n        // however, the ScrollView still needs the baseStyle to be scrollable\n        // $FlowFixMe[underconstrained-implicit-instantiation]\n        // $FlowFixMe[incompatible-call]\n        const {outer, inner} = splitLayoutProps(flattenStyle(props.style));\n        return React.cloneElement(\n          refreshControl,\n          {style: StyleSheet.compose(baseStyle, outer)},\n          <NativeScrollView\n            {...props}\n            style={StyleSheet.compose(baseStyle, inner)}\n            // $FlowFixMe[incompatible-type] - Flow only knows element refs.\n            ref={scrollViewRef}>\n            {contentContainer}\n          </NativeScrollView>,\n        );\n      }\n    }\n    return (\n      // $FlowFixMe[incompatible-type] - Flow only knows element refs.\n      <NativeScrollView {...props} ref={scrollViewRef}>\n        {contentContainer}\n      </NativeScrollView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  baseVertical: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'column',\n    overflow: 'scroll',\n  },\n  baseHorizontal: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'row',\n    overflow: 'scroll',\n  },\n  contentContainerHorizontal: {\n    flexDirection: 'row',\n  },\n});\n\ntype RefForwarder<TNativeInstance, TPublicInstance> = {\n  getForwardingRef: (\n    ?React.RefSetter<TPublicInstance>,\n  ) => (TNativeInstance | null) => void,\n  nativeInstance: TNativeInstance | null,\n  publicInstance: TPublicInstance | null,\n};\n\n/**\n * Helper function that should be replaced with `useCallback` and `useMergeRefs`\n * once `ScrollView` is reimplemented as a functional component.\n */\nfunction createRefForwarder<TNativeInstance, TPublicInstance>(\n  mutator: TNativeInstance => TPublicInstance,\n): RefForwarder<TNativeInstance, TPublicInstance> {\n  const state: RefForwarder<TNativeInstance, TPublicInstance> = {\n    getForwardingRef: memoize(forwardedRef => {\n      return (nativeInstance: TNativeInstance | null): void => {\n        const publicInstance =\n          nativeInstance == null ? null : mutator(nativeInstance);\n\n        state.nativeInstance = nativeInstance;\n        state.publicInstance = publicInstance;\n\n        if (forwardedRef != null) {\n          if (typeof forwardedRef === 'function') {\n            forwardedRef(publicInstance);\n          } else {\n            forwardedRef.current = publicInstance;\n          }\n        }\n      };\n    }),\n    nativeInstance: null,\n    publicInstance: null,\n  };\n\n  return state;\n}\n\n// TODO: After upgrading to React 19, remove `forwardRef` from this component.\n// NOTE: This wrapper component is necessary because `ScrollView` is a class\n// component and we need to map `ref` to a differently named prop. This can be\n// removed when `ScrollView` is a functional component.\nconst Wrapper = React.forwardRef(function Wrapper(\n  props: Props,\n  ref: ?React.RefSetter<PublicScrollViewInstance>,\n): React.Node {\n  return ref == null ? (\n    <ScrollView {...props} />\n  ) : (\n    <ScrollView {...props} scrollViewRef={ref} />\n  );\n});\nWrapper.displayName = 'ScrollView';\n// $FlowExpectedError[prop-missing]\nWrapper.Context = ScrollViewContext;\n\nmodule.exports = ((Wrapper: $FlowFixMe): React.AbstractComponent<\n  React.ElementConfig<typeof ScrollView>,\n  PublicScrollViewInstance,\n> &\n  ScrollViewComponentStatics);\n"],"mappings":";;;;;AA8BA,SACEA,iCAAiC,EACjCC,0BAA0B,QACrB,6DAA6D;AACpE,SACEC,iCAAiC,EACjCC,0BAA0B,QACrB,6DAA6D;AACpE,OAAOC,sBAAsB,MAAM,uCAAuC;AAC1E,OAAOC,eAAe,MAAM,mCAAmC;AAC/D,SAAQC,cAAc,QAAO,iCAAiC;AAC9D,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,YAAY,MAAM,+BAA+B;AACxD,OAAOC,gBAAgB,MAAM,mCAAmC;AAChE,OAAOC,UAAU,MAAM,6BAA6B;AACpD,OAAOC,UAAU,MAAM,4BAA4B;AACnD,OAAOC,eAAe,MAAM,iCAAiC;AAC7D,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,YAAY,MAAM,mCAAmC;AAC5D,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,uBAAuB,MAAM,2BAA2B;AAC/D,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,iBAAiB,IAAGC,UAAU,EAAEC,QAAQ,QAAO,qBAAqB;AAC3E,OAAOC,sBAAsB,MAAM,0BAA0B;AAC7D,OAAOC,SAAS,MAAM,WAAW;AACjC,OAAOC,OAAO,MAAM,aAAa;AACjC,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AA8lB/B,MAAMC,qCAAqC,GAAG,EAAE;AAAC,IAAAC,gBAAA,GAAAC,0BAAA;AAyCjD,MAAMC,UAAU,SAASN,KAAK,CAACO,SAAS,CAAe;EAGrDC,WAAWA,CAACC,KAAY,EAAE;IACxB,KAAK,CAACA,KAAK,CAAC;IAAC,KAQfC,oBAAoB;IAAA,KACpBC,8BAA8B,GAA+B,IAAI;IAAA,KACjEC,iBAAiB,GACf,IAAIC,GAAG,CAAC,CAAC;IAAA,KACXC,eAAe,GAAwB,IAAID,GAAG,CAAC,CAAC;IAAA,KAEhDE,gBAAgB,GAAqB,IAAI;IAAA,KACzCC,uBAAuB,GAAW,CAAC;IAAA,KACnCC,WAAW,GAAY,KAAK;IAAA,KAC5BC,4BAA4B,GAAW,CAAC;IAAA,KACxCC,0BAA0B,GAAW,CAAC;IAAA,KAOtCC,qCAAqC,GAAY,KAAK;IAAA,KACtDC,8BAA8B,GAAY,KAAK;IAAA,KAC/CC,4BAA4B,GAAa,IAAI;IAAA,KAE7CC,SAAS,GAAa,IAAI;IAAA,KAE1BC,6BAA6B,GAAuB,IAAI;IAAA,KACxDC,6BAA6B,GAAuB,IAAI;IAAA,KACxDC,4BAA4B,GAAuB,IAAI;IAAA,KACvDC,4BAA4B,GAAuB,IAAI;IAAAC,MAAA,CAAAC,cAAA,OAAAzB,gBAAA;MAAA0B,QAAA;MAAAC,KAAA,EAIlD;IAAI;IAAA,KAETC,KAAK,GAAU;MACbC,YAAY,EAAE;IAChB,CAAC;IAAA,KA8EDC,kBAAkB,GAA8B,MAAM;MAEpD,OAAS,IAAI;IACf,CAAC;IAAA,KAEDC,iBAAiB,GAAkB,MAAM;MACvC,OAAOvD,cAAc,CAAC,IAAI,CAACwD,kBAAkB,CAAC,CAAC,CAAC;IAClD,CAAC;IAAA,KAEDC,gBAAgB,GAAkB,MAAM;MACtC,OAAOzD,cAAc,CAAC,IAAI,CAAC0D,UAAU,CAACC,cAAc,CAAC;IACvD,CAAC;IAAA,KAEDC,eAAe,GAAmC,MAAM;MACtD,OAAO,IAAI,CAACF,UAAU,CAACC,cAAc;IACvC,CAAC;IAAA,KAEDH,kBAAkB,GAAoD,MAAM;MAC1E,MAAM;QAACG;MAAc,CAAC,GAAG,IAAI,CAACE,WAAW;MACzC,OAAOF,cAAc,IAAI,IAAI,GAAG,IAAI,GAAGA,cAAc,CAACG,YAAY,CAACC,OAAO;IAC5E,CAAC;IAAA,KAaDC,QAAQ,GAWI,CACVC,OAOU,EACVC,WAAoB,EACpBC,kBAA4B,KACzB;MACH,IAAIC,CAAC,EAAEC,CAAC,EAAEC,QAAQ;MAClB,IAAI,OAAOL,OAAO,KAAK,QAAQ,EAAE;QAC/BM,OAAO,CAACC,IAAI,CACV,uEAAuE,GACrE,4BACJ,CAAC;QACDH,CAAC,GAAGJ,OAAO;QACXG,CAAC,GAAGF,WAAW;QACfI,QAAQ,GAAGH,kBAAkB;MAC/B,CAAC,MAAM,IAAIF,OAAO,EAAE;QAClBI,CAAC,GAAGJ,OAAO,CAACI,CAAC;QACbD,CAAC,GAAGH,OAAO,CAACG,CAAC;QACbE,QAAQ,GAAGL,OAAO,CAACK,QAAQ;MAC7B;MACA,MAAMG,SAAS,GAAG,IAAI,CAACjB,kBAAkB,CAAC,CAAC;MAC3C,IAAIiB,SAAS,IAAI,IAAI,EAAE;QACrB;MACF;MACA7D,QAAQ,CAACoD,QAAQ,CAACS,SAAS,EAAEL,CAAC,IAAI,CAAC,EAAEC,CAAC,IAAI,CAAC,EAAEC,QAAQ,KAAK,KAAK,CAAC;IAClE,CAAC;IAAA,KAUDI,WAAW,GACTT,OAAoC,IACjC;MAEH,MAAMK,QAAQ,GAAG,CAACL,OAAO,IAAIA,OAAO,CAACK,QAAQ,MAAM,KAAK;MACxD,MAAMG,SAAS,GAAG,IAAI,CAACjB,kBAAkB,CAAC,CAAC;MAC3C,IAAIiB,SAAS,IAAI,IAAI,EAAE;QACrB;MACF;MACA7D,QAAQ,CAAC8D,WAAW,CAACD,SAAS,EAAEH,QAAQ,CAAC;IAC3C,CAAC;IAAA,KAODK,qBAAqB,GAAe,MAAM;MACxC,MAAMF,SAAS,GAAG,IAAI,CAACjB,kBAAkB,CAAC,CAAC;MAC3C,IAAIiB,SAAS,IAAI,IAAI,EAAE;QACrB;MACF;MACA7D,QAAQ,CAAC+D,qBAAqB,CAACF,SAAS,CAAC;IAC3C,CAAC;IAAA,KAEDG,oBAAoB,GAEKC,QAAQ,IAAI;MACnC,IAAIC,eAAe,GAAAC,2BAAA,CAAG,IAAI,EAAAvD,gBAAA,EAAAA,gBAAA,CAAiB;MAC3C,IAAIsD,eAAe,IAAI,IAAI,EAAE;QAC3BA,eAAe,GAAG,IAAItE,YAAY,CAAC,CAAC;QACpCuE,2BAAA,KAAI,EAAAvD,gBAAA,EAAAA,gBAAA,IAAoBsD,eAAe;QAGvC,IAAI,CAACjB,WAAW,CAACF,cAAc,EAAEqB,8BAA8B,CAAC,IAAI,CAAC;MACvE;MACA,OAAOF,eAAe,CAACG,WAAW,CAAC,QAAQ,EAAEJ,QAAQ,CAAC;IACxD,CAAC;IAAA,KAYDK,2CAA2C,GAI/B,CACVC,UAAuD,EACvDC,gBAAyB,EACzBC,2BAAqC,KAClC;MACH,IAAI,CAACjD,uBAAuB,GAAGgD,gBAAgB,IAAI,CAAC;MACpD,IAAI,CAAC1C,4BAA4B,GAAG,CAAC,CAAC2C,2BAA2B;MAEjE,IAAI,IAAI,CAAC3B,UAAU,CAACC,cAAc,IAAI,IAAI,EAAE;QAC1C;MACF;MAEA,IAAI,OAAOwB,UAAU,KAAK,QAAQ,EAAE;QAClClF,SAAS,CAACqF,aAAa,CACrBH,UAAU,EACVhE,UAAU,CAACnB,cAAc,CAAC,IAAI,CAAC,CAAC,EAEhC,IAAI,CAACuF,oBAAoB,EACzB,IAAI,CAACC,gCACP,CAAC;MACH,CAAC,MAAM;QACLL,UAAU,CAACG,aAAa,CACtB,IAAI,CAAC5B,UAAU,CAACC,cAAc,EAC9B,IAAI,CAAC6B,gCAAgC,EAErC,IAAI,CAACD,oBACP,CAAC;MACH;IACF,CAAC;IAAA,KAQDE,qBAAqB,GAST,CACVC,IAME,EACFpB,QAAkB,KACf;MACHrD,SAAS,CAACV,QAAQ,CAACoF,EAAE,KAAK,KAAK,EAAE,+BAA+B,CAAC;MACjE,IAAI,UAAU,IAAID,IAAI,EAAE;QACtB,IAAI,CAAC/C,SAAS,GAAG+C,IAAI,CAACpB,QAAQ;QAC9B,OAAOoB,IAAI,CAACpB,QAAQ;MACtB,CAAC,MAAM,IAAI,OAAOA,QAAQ,KAAK,WAAW,EAAE;QAC1CC,OAAO,CAACC,IAAI,CACV,2FACF,CAAC;MACH;MAEA,MAAMC,SAAS,GAAG,IAAI,CAACjB,kBAAkB,CAAC,CAAC;MAC3C,IAAIiB,SAAS,IAAI,IAAI,EAAE;QACrB;MACF;MACA7D,QAAQ,CAACgF,UAAU,CAACnB,SAAS,EAAEiB,IAAI,EAAEpB,QAAQ,KAAK,KAAK,CAAC;IAC1D,CAAC;IAAA,KAgBDkB,gCAAgC,GAKpB,CAACK,IAAY,EAAEC,GAAW,EAAEC,KAAa,EAAEC,MAAc,KAAK;MACxE,IAAIC,eAAe,GAAG5F,UAAU,CAAC6F,GAAG,CAAC,QAAQ,CAAC,CAACF,MAAM;MAErD,MAAMG,8BAA8B,GAAGA,CAAA,KAAM;QAC3C,IAAI,IAAI,CAAChE,gBAAgB,IAAI,IAAI,EAAE;UACjC8D,eAAe,GAAG,IAAI,CAAC9D,gBAAgB,CAACiE,OAAO;QACjD;QACA,IAAIC,aAAa,GACfP,GAAG,GAAGG,eAAe,GAAGD,MAAM,GAAG,IAAI,CAAC5D,uBAAuB;QAM/D,IAAI,IAAI,CAACM,4BAA4B,KAAK,IAAI,EAAE;UAC9C2D,aAAa,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,aAAa,CAAC;QAC5C;QACA,IAAI,CAACrC,QAAQ,CAAC;UAACI,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAEgC,aAAa;UAAE/B,QAAQ,EAAE;QAAI,CAAC,CAAC;QAEvD,IAAI,CAAClC,uBAAuB,GAAG,CAAC;QAChC,IAAI,CAACM,4BAA4B,GAAG,KAAK;MAC3C,CAAC;MAED,IAAI,IAAI,CAACP,gBAAgB,IAAI,IAAI,EAAE;QAKjCqE,UAAU,CAAC,MAAM;UACfL,8BAA8B,CAAC,CAAC;QAClC,CAAC,EAAE,CAAC,CAAC;MACP,CAAC,MAAM;QACLA,8BAA8B,CAAC,CAAC;MAClC;IACF,CAAC;IAAA,KA6DDM,aAAa,GAAIC,CAAc,IAAK;MAClC,IAAI,CAAClE,qCAAqC,GAAG,IAAI;MACjD,IAAI,CAACX,KAAK,CAAC8E,QAAQ,IAAI,IAAI,CAAC9E,KAAK,CAAC8E,QAAQ,CAACD,CAAC,CAAC;MAE7C3B,2BAAA,KAAI,EAAAvD,gBAAA,EAAAA,gBAAA,GAAmBoF,IAAI,CAAC,QAAQ,EAAE;QACpCxC,CAAC,EAAEsC,CAAC,CAACG,WAAW,CAACC,aAAa,CAAC1C,CAAC;QAChCC,CAAC,EAAEqC,CAAC,CAACG,WAAW,CAACC,aAAa,CAACzC;MACjC,CAAC,CAAC;IACJ,CAAC;IAAA,KAED0C,aAAa,GAAIL,CAAc,IAAK;MAClC,IAAI,IAAI,CAAC7E,KAAK,CAACmF,mBAAmB,KAAK,IAAI,EAAE;QAC3C,IAAI,CAACC,QAAQ,CAAC;UAAC5D,YAAY,EAAEqD,CAAC,CAACG,WAAW,CAACK,MAAM,CAAClB;QAAM,CAAC,CAAC;MAC5D;MACA,IAAI,IAAI,CAACnE,KAAK,CAACsF,QAAQ,EAAE;QACvB,IAAI,CAACtF,KAAK,CAACsF,QAAQ,CAACT,CAAC,CAAC;MACxB;IACF,CAAC;IAAA,KAEDU,sBAAsB,GAAIV,CAAc,IAAK;MAC3C,MAAM;QAACX,KAAK;QAAEC;MAAM,CAAC,GAAGU,CAAC,CAACG,WAAW,CAACK,MAAM;MAC5C,IAAI,CAACrF,KAAK,CAACwF,mBAAmB,IAC5B,IAAI,CAACxF,KAAK,CAACwF,mBAAmB,CAACtB,KAAK,EAAEC,MAAM,CAAC;IACjD,CAAC;IAAA,KAEDtC,UAAU,GACR4D,kBAAkB,CACfC,QAA2B,IAAwBA,QACtD,CAAC;IAAA,KAEH1D,WAAW,GAGPyD,kBAAkB,CAACE,sBAAsB,IAAI;MAC/C,MAAM7D,cAAc,GAAG6D,sBAAsB,CAAC1D,YAAY,CAACC,OAAO;MAClE,IAAIJ,cAAc,IAAI,IAAI,EAAE;QAC1B,OAAO,IAAI;MACb;MAWA,MAAM8D,cAAwC,GAAGzE,MAAM,CAAC0E,MAAM,CAC5D/D,cAAc,EACd;QACEL,kBAAkB,EAAE,IAAI,CAACA,kBAAkB;QAC3CC,iBAAiB,EAAE,IAAI,CAACA,iBAAiB;QACzCE,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;QACvCG,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCJ,kBAAkB,EAAE,IAAI,CAACA,kBAAkB;QAC3CQ,QAAQ,EAAE,IAAI,CAACA,QAAQ;QACvBU,WAAW,EAAE,IAAI,CAACA,WAAW;QAC7BC,qBAAqB,EAAE,IAAI,CAACA,qBAAqB;QACjDc,qBAAqB,EAAE,IAAI,CAACA,qBAAqB;QAEjDkC,4BAA4B,EAAE,IAAI,CAAC/C,oBAAoB;QACvDM,2CAA2C,EACzC,IAAI,CAACA;MACT,CACF,CAAC;MAED,OAAOuC,cAAc;IACvB,CAAC,CAAC;IAAA,KA+BFG,+BAA+B,GAC7BlB,CAAgB,IACb;MACH,IAAI,CAACvE,gBAAgB,GAAGuE,CAAC,CAACmB,cAAc;MACxC,IAAI,CAAChG,KAAK,CAACiG,kBAAkB,IAAI,IAAI,CAACjG,KAAK,CAACiG,kBAAkB,CAACpB,CAAC,CAAC;IACnE,CAAC;IAAA,KAEDqB,+BAA+B,GAC7BrB,CAAgB,IACb;MACH,IAAI,CAACvE,gBAAgB,GAAG,IAAI;MAC5B,IAAI,CAACN,KAAK,CAACmG,kBAAkB,IAAI,IAAI,CAACnG,KAAK,CAACmG,kBAAkB,CAACtB,CAAC,CAAC;IACnE,CAAC;IAAA,KAEDuB,8BAA8B,GAC5BvB,CAAgB,IACb;MACH,IAAI,CAACvE,gBAAgB,GAAGuE,CAAC,CAACmB,cAAc;MACxC,IAAI,CAAChG,KAAK,CAACqG,iBAAiB,IAAI,IAAI,CAACrG,KAAK,CAACqG,iBAAiB,CAACxB,CAAC,CAAC;IACjE,CAAC;IAAA,KAEDyB,8BAA8B,GAC5BzB,CAAgB,IACb;MACH,IAAI,CAACvE,gBAAgB,GAAG,IAAI;MAC5B,IAAI,CAACN,KAAK,CAACuG,iBAAiB,IAAI,IAAI,CAACvG,KAAK,CAACuG,iBAAiB,CAAC1B,CAAC,CAAC;IACjE,CAAC;IAAA,KAKD2B,0BAA0B,GAA8B3B,CAAc,IAAK;MACzE,IAAI,CAACpE,4BAA4B,GAAGgG,MAAM,CAACC,WAAW,CAACC,GAAG,CAAC,CAAC;MAC5D,IAAI,CAAC3G,KAAK,CAAC4G,qBAAqB,IAAI,IAAI,CAAC5G,KAAK,CAAC4G,qBAAqB,CAAC/B,CAAC,CAAC;IACzE,CAAC;IAAA,KAKDgC,wBAAwB,GAA8BhC,CAAc,IAAK;MACvE3G,eAAe,CAAC4I,SAAS,CAAC,CAAC;MAC3B,IAAI,CAACpG,0BAA0B,GAAG+F,MAAM,CAACC,WAAW,CAACC,GAAG,CAAC,CAAC;MAC1D,IAAI,CAAC3G,KAAK,CAAC+G,mBAAmB,IAAI,IAAI,CAAC/G,KAAK,CAAC+G,mBAAmB,CAAClC,CAAC,CAAC;IACrE,CAAC;IAAA,KASDmC,sBAAsB,GAA8BnC,CAAc,IAAK;MACrE3G,eAAe,CAAC+I,WAAW,CAAC,CAAC;MAE7B,IACEvI,QAAQ,CAACoF,EAAE,KAAK,SAAS,IACzB,IAAI,CAAC9D,KAAK,CAACkH,mBAAmB,KAAK,SAAS,EAC5C;QACAzI,eAAe,CAAC,CAAC;MACnB;MAEA,IAAI,CAACuB,KAAK,CAACmH,iBAAiB,IAAI,IAAI,CAACnH,KAAK,CAACmH,iBAAiB,CAACtC,CAAC,CAAC;IACjE,CAAC;IAAA,KAKDuC,oBAAoB,GAA8BvC,CAAc,IAAK;MACnE,MAAM;QAACwC;MAAQ,CAAC,GAAGxC,CAAC,CAACG,WAAW;MAMhC,IACE,CAAC,IAAI,CAACsC,YAAY,CAAC,CAAC,KACnB,CAACD,QAAQ,IAAKA,QAAQ,CAAC9E,CAAC,KAAK,CAAC,IAAI8E,QAAQ,CAAC7E,CAAC,KAAK,CAAE,CAAC,EACrD;QACAtE,eAAe,CAAC4I,SAAS,CAAC,CAAC;MAC7B;MACA,IAAI,CAAC9G,KAAK,CAACuH,eAAe,IAAI,IAAI,CAACvH,KAAK,CAACuH,eAAe,CAAC1C,CAAC,CAAC;IAC7D,CAAC;IAAA,KAODyC,YAAY,GAAkB,MAAM;MAClC,MAAMX,GAAG,GAAGF,MAAM,CAACC,WAAW,CAACC,GAAG,CAAC,CAAC;MACpC,MAAMa,8BAA8B,GAClCb,GAAG,GAAG,IAAI,CAACjG,0BAA0B;MACvC,MAAM+G,WAAW,GACfD,8BAA8B,GAAG9H,qCAAqC,IACtE,IAAI,CAACgB,0BAA0B,GAAG,IAAI,CAACD,4BAA4B;MACrE,OAAOgH,WAAW;IACpB,CAAC;IAAA,KAKDC,qBAAqB,GAA6B7C,CAAa,IAAK;MAClE,IAAI,CAAClE,qCAAqC,GAAG,KAAK;MAClD,IAAI,CAACX,KAAK,CAAC2H,gBAAgB,IAAI,IAAI,CAAC3H,KAAK,CAAC2H,gBAAgB,CAAC9C,CAAC,CAAC;MAC7D,IAAI,CAACjE,8BAA8B,GAAG,IAAI,CAAC0G,YAAY,CAAC,CAAC;IAC3D,CAAC;IAAA,KAYDM,sBAAsB,GAAe,MAAM,CAAC,CAAC;IAAA,KAK7CC,uBAAuB,GAA6BhD,CAAa,IAAK;MACpE,IAAI,CAACrE,WAAW,GAAGqE,CAAC,CAACG,WAAW,CAAC8C,OAAO,CAACC,MAAM,KAAK,CAAC;MACrD,IAAI,CAAC/H,KAAK,CAACgI,kBAAkB,IAAI,IAAI,CAAChI,KAAK,CAACgI,kBAAkB,CAACnD,CAAC,CAAC;MAEjE,IAAI,OAAOA,CAAC,CAACoD,MAAM,KAAK,QAAQ,EAAE;QAChC,IAAIC,OAAO,EAAE;UACXxF,OAAO,CAACyF,KAAK,CACX,iFACF,CAAC;QACH;QAEA;MACF;MAIA,MAAMC,yBAAyB,GAAGvJ,cAAc,CAACwJ,qBAAqB,CAAC,CAAC;MACxE,IACED,yBAAyB,IAAI,IAAI,IACjC,IAAI,CAACpI,KAAK,CAACsI,yBAAyB,KAAK,IAAI,IAC7C,IAAI,CAACtI,KAAK,CAACsI,yBAAyB,KAAK,QAAQ,IACjD,IAAI,CAACC,sBAAsB,CAAC,CAAC,IAC7B1D,CAAC,CAACoD,MAAM,KAAKG,yBAAyB,IACtC,CAAC,IAAI,CAACzH,qCAAqC,IAC3C,CAAC,IAAI,CAACC,8BAA8B,EACpC;QACA/B,cAAc,CAAC2J,aAAa,CAACJ,yBAAyB,CAAC;MACzD;IACF,CAAC;IAAA,KAiBDK,kCAAkC,GAAkB,MAAM;MACxD,OAAO,CAAC,IAAI,CAAC9H,qCAAqC;IACpD,CAAC;IAAA,KAKD+H,+BAA+B,GAAkB,MAAM;MAErD,IAAI,IAAI,CAAC1I,KAAK,CAAC2I,6BAA6B,KAAK,IAAI,EAAE;QACrD,OAAO,KAAK;MACd;MACA,OAAO,IAAI,CAACnI,WAAW;IACzB,CAAC;IAAA,KA2BDoI,8BAA8B,GAC5B/D,CAAa,IACV;MAEH,IAAI,IAAI,CAAC7E,KAAK,CAAC2I,6BAA6B,KAAK,IAAI,EAAE;QACrD,OAAO,KAAK;MACd;MAEA,MAAMN,qBAAqB,GAAGxJ,cAAc,CAACwJ,qBAAqB,CAAC,CAAC;MACpE,IACE,IAAI,CAACrI,KAAK,CAACsI,yBAAyB,KAAK,SAAS,IAClD,IAAI,CAACC,sBAAsB,CAAC,CAAC,IAC7B1D,CAAC,CAACoD,MAAM,KAAKI,qBAAqB,EAClC;QACA,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd,CAAC;IAAA,KAaDQ,qCAAqC,GACnChE,CAAa,IACV;MAGH,IAAI,IAAI,CAACyC,YAAY,CAAC,CAAC,EAAE;QACvB,OAAO,IAAI;MACb;MAGA,IAAI,IAAI,CAACtH,KAAK,CAAC2I,6BAA6B,KAAK,IAAI,EAAE;QACrD,OAAO,KAAK;MACd;MAMA,MAAM;QAACL;MAAyB,CAAC,GAAG,IAAI,CAACtI,KAAK;MAC9C,MAAM8I,wBAAwB,GAC5B,CAACR,yBAAyB,IAAIA,yBAAyB,KAAK,OAAO;MAErE,IAAI,OAAOzD,CAAC,CAACoD,MAAM,KAAK,QAAQ,EAAE;QAChC,IAAIC,OAAO,EAAE;UACXxF,OAAO,CAACyF,KAAK,CACX,iFACF,CAAC;QACH;QAEA,OAAO,KAAK;MACd;MAGA,IAAI,IAAI,CAACY,uBAAuB,CAAC,CAAC,EAAE;QAClC,OAAO,KAAK;MACd;MAEA,IACED,wBAAwB,IACxB,IAAI,CAACP,sBAAsB,CAAC,CAAC,IAC7B1D,CAAC,CAACoD,MAAM,IAAI,IAAI,IAEhB,CAACpJ,cAAc,CAACmK,WAAW,CAACnE,CAAC,CAACoD,MAAM,CAAC,EACrC;QACA,OAAO,IAAI;MACb;MAEA,OAAO,KAAK;IACd,CAAC;IAAA,KAKDM,sBAAsB,GAAkB,MAAM;MAC5C,MAAMF,qBAAqB,GAAGxJ,cAAc,CAACwJ,qBAAqB,CAAC,CAAC;MAOpE,MAAMY,mBAAmB,GACvBZ,qBAAqB,IAAI,IAAI,IAC7BxJ,cAAc,CAACmK,WAAW,CAACX,qBAAqB,CAAC;MAKnD,MAAMa,qBAAqB,GACzB,IAAI,CAAC5I,gBAAgB,IAAI,IAAI,IAAI,IAAI,CAAC6I,4BAA4B,CAAC,CAAC;MAEtE,OAAOF,mBAAmB,IAAIC,qBAAqB;IACrD,CAAC;IAAA,KAODH,uBAAuB,GAAkB,MAAM;MAC7C,OAAO,IAAI,CAACzI,gBAAgB,IAAI,IAAI,IAAI,IAAI,CAACA,gBAAgB,CAAC6D,MAAM,KAAK,CAAC;IAC5E,CAAC;IAAA,KAEDgF,4BAA4B,GAAkB,MAAM;MAGlD,OAAOzK,QAAQ,CAACoF,EAAE,KAAK,SAAS,IAAIpF,QAAQ,CAAC0K,OAAO,GAAG,EAAE;IAC3D,CAAC;IAAA,KAODC,eAAe,GAA6BxE,CAAa,IAAK;MAC5D,MAAMG,WAAW,GAAGH,CAAC,CAACG,WAAW;MACjC,IAAI,CAACxE,WAAW,GAAGwE,WAAW,CAAC8C,OAAO,CAACC,MAAM,KAAK,CAAC;MAEnD,MAAM;QAACO;MAAyB,CAAC,GAAG,IAAI,CAACtI,KAAK;MAC9C,MAAMsJ,yBAAyB,GAC7B,CAAChB,yBAAyB,IAAIA,yBAAyB,KAAK,OAAO;MAKrE,MAAMF,yBAAyB,GAAGvJ,cAAc,CAACwJ,qBAAqB,CAAC,CAAC;MACxE,IACED,yBAAyB,IAAI,IAAI,IACjCvD,CAAC,CAACoD,MAAM,KAAKG,yBAAyB,IACtC,IAAI,CAACW,uBAAuB,CAAC,CAAC,IAC9B,IAAI,CAACR,sBAAsB,CAAC,CAAC,IAC7Be,yBAAyB,EACzB;QACAzK,cAAc,CAAC2J,aAAa,CAACJ,yBAAyB,CAAC;MACzD;MAEA,IAAI,CAACpI,KAAK,CAACuJ,UAAU,IAAI,IAAI,CAACvJ,KAAK,CAACuJ,UAAU,CAAC1E,CAAC,CAAC;IACnD,CAAC;IAAA,KAOD2E,kBAAkB,GAA6B3E,CAAa,IAAK;MAC/D,IAAI,CAACrE,WAAW,GAAG,KAAK;MACxB,IAAI,CAACR,KAAK,CAACyJ,aAAa,IAAI,IAAI,CAACzJ,KAAK,CAACyJ,aAAa,CAAC5E,CAAC,CAAC;IACzD,CAAC;IAAA,KAaD6E,iBAAiB,GAA6B7E,CAAa,IAAK;MAC9D,IAAI,CAACrE,WAAW,GAAG,IAAI;MACvB,IAAI,CAACR,KAAK,CAAC2J,YAAY,IAAI,IAAI,CAAC3J,KAAK,CAAC2J,YAAY,CAAC9E,CAAC,CAAC;IACvD,CAAC;IAAA,KAaD+E,gBAAgB,GAA6B/E,CAAa,IAAK;MAC7D,IAAI,CAAC7E,KAAK,CAAC6J,WAAW,IAAI,IAAI,CAAC7J,KAAK,CAAC6J,WAAW,CAAChF,CAAC,CAAC;IACrD,CAAC;IAz6BC,IAAI,CAAC5E,oBAAoB,GAAG,IAAIhC,sBAAsB,CAAC6L,KAAK,CAC1D,IAAI,CAAC9J,KAAK,CAACiF,aAAa,EAAEzC,CAAC,IAAI,CACjC,CAAC;IACD,IAAI,CAACvC,oBAAoB,CAAC8J,SAAS,CAAC,IAAI,CAAC/J,KAAK,CAACgK,YAAY,EAAE/F,GAAG,IAAI,CAAC,CAAC;EACxE;EAsCAgG,iBAAiBA,CAAA,EAAG;IAClB,IAAI,OAAO,IAAI,CAACjK,KAAK,CAACsI,yBAAyB,KAAK,SAAS,EAAE;MAC7D5F,OAAO,CAACC,IAAI,CACV,+BACE,IAAI,CAAC3C,KAAK,CAACsI,yBAAyB,KAAK,IAAI,GAAG,MAAM,GAAG,OAAO,oBAC9C,GAClB,mCACE,IAAI,CAACtI,KAAK,CAACsI,yBAAyB,GAAG,QAAQ,GAAG,OAAO,YAE/D,CAAC;IACH;IAEA,IAAI,CAAChI,gBAAgB,GAAG1B,QAAQ,CAACsL,OAAO,CAAC,CAAC;IAC1C,IAAI,CAAC3J,uBAAuB,GAAG,CAAC;IAEhC,IAAI,CAACQ,6BAA6B,GAAGnC,QAAQ,CAACwE,WAAW,CACvD,kBAAkB,EAClB,IAAI,CAAC2C,+BACP,CAAC;IACD,IAAI,CAAC/E,6BAA6B,GAAGpC,QAAQ,CAACwE,WAAW,CACvD,kBAAkB,EAClB,IAAI,CAAC8C,+BACP,CAAC;IACD,IAAI,CAACjF,4BAA4B,GAAGrC,QAAQ,CAACwE,WAAW,CACtD,iBAAiB,EACjB,IAAI,CAACgD,8BACP,CAAC;IACD,IAAI,CAAClF,4BAA4B,GAAGtC,QAAQ,CAACwE,WAAW,CACtD,iBAAiB,EACjB,IAAI,CAACkD,8BACP,CAAC;IAED,IAAI,CAAC6D,6BAA6B,CAAC,CAAC;EACtC;EAEAC,kBAAkBA,CAACC,SAAgB,EAAE;IACnC,MAAMC,mBAAmB,GAAGD,SAAS,CAACL,YAAY,GAC9CK,SAAS,CAACL,YAAY,CAAC/F,GAAG,GAC1B,CAAC;IACL,MAAMsG,kBAAkB,GAAG,IAAI,CAACvK,KAAK,CAACgK,YAAY,GAC9C,IAAI,CAAChK,KAAK,CAACgK,YAAY,CAAC/F,GAAG,GAC3B,CAAC;IACL,IAAIqG,mBAAmB,KAAKC,kBAAkB,EAAE;MAC9C,IAAI,CAACtK,oBAAoB,CAAC8J,SAAS,CAACQ,kBAAkB,IAAI,CAAC,CAAC;IAC9D;IAEA,IAAI,CAACJ,6BAA6B,CAAC,CAAC;EACtC;EAEAK,oBAAoBA,CAAA,EAAG;IACrB,IAAI,IAAI,CAACzJ,6BAA6B,IAAI,IAAI,EAAE;MAC9C,IAAI,CAACA,6BAA6B,CAAC0J,MAAM,CAAC,CAAC;IAC7C;IACA,IAAI,IAAI,CAACzJ,6BAA6B,IAAI,IAAI,EAAE;MAC9C,IAAI,CAACA,6BAA6B,CAACyJ,MAAM,CAAC,CAAC;IAC7C;IACA,IAAI,IAAI,CAACxJ,4BAA4B,IAAI,IAAI,EAAE;MAC7C,IAAI,CAACA,4BAA4B,CAACwJ,MAAM,CAAC,CAAC;IAC5C;IACA,IAAI,IAAI,CAACvJ,4BAA4B,IAAI,IAAI,EAAE;MAC7C,IAAI,CAACA,4BAA4B,CAACuJ,MAAM,CAAC,CAAC;IAC5C;IAEA,IAAI,IAAI,CAACvK,8BAA8B,EAAE;MACvC,IAAI,CAACA,8BAA8B,CAACwK,MAAM,CAAC,CAAC;IAC9C;IAEAxH,2BAAA,KAAI,EAAAvD,gBAAA,EAAAA,gBAAA,GAAmBgL,kBAAkB,CAAC,CAAC;EAC7C;EA0NAjH,oBAAoBA,CAAA,EAAG;IACrBhB,OAAO,CAACC,IAAI,CAAC,6BAA6B,CAAC;EAC7C;EAqDAiI,eAAeA,CAACC,KAAiB,EAAEC,UAAsB,EAAc;IACrE,MAAMC,KAAK,GAAGD,UAAU,CAACD,KAAK,CAAC;IAC/B,OAAOE,KAAK,IAAIA,KAAK,CAACC,GAAG;EAC3B;EAEAb,6BAA6BA,CAAA,EAAG;IAC9B,IAAI,IAAI,CAACjK,8BAA8B,EAAE;MACvC,IAAI,CAACA,8BAA8B,CAACwK,MAAM,CAAC,CAAC;IAC9C;IACA,IACE,IAAI,CAAC1K,KAAK,CAACiL,mBAAmB,IAC9B,IAAI,CAACjL,KAAK,CAACiL,mBAAmB,CAAClD,MAAM,GAAG,CAAC,EACzC;MACA,IAAI,CAAC7H,8BAA8B,GACjCjC,sBAAsB,CAACiN,iBAAiB,CACtC,IAAI,CAACvJ,kBAAkB,CAAC,CAAC,EACzB,UAAU,EACV,CAAC;QAACqD,WAAW,EAAE;UAACC,aAAa,EAAE;YAACzC,CAAC,EAAE,IAAI,CAACvC;UAAoB;QAAC;MAAC,CAAC,CACjE,CAAC;IACL;EACF;EAEAkL,mBAAmBA,CACjBH,GAAW,EACXI,GAAiD,EACjD;IACA,IAAIA,GAAG,EAAE;MACP,IAAI,CAACjL,iBAAiB,CAACkL,GAAG,CAACL,GAAG,EAAEI,GAAG,CAAC;IACtC,CAAC,MAAM;MACL,IAAI,CAACjL,iBAAiB,CAACmL,MAAM,CAACN,GAAG,CAAC;IACpC;EACF;EAEAO,qBAAqBA,CAACV,KAAiB,EAAEW,KAAiB,EAAER,GAAe,EAAE;IAC3E,MAAM;MAACC;IAAmB,CAAC,GAAG,IAAI,CAACjL,KAAK;IACxC,IAAI,CAACiL,mBAAmB,EAAE;MACxB;IACF;IACA,MAAMH,UAAU,GAAGvL,KAAK,CAACkM,QAAQ,CAACC,OAAO,CAAa,IAAI,CAAC1L,KAAK,CAAC2L,QAAQ,CAAC;IAC1E,IAAIX,GAAG,KAAK,IAAI,CAACJ,eAAe,CAACC,KAAK,EAAEC,UAAU,CAAC,EAAE;MAEnD;IACF;IAEA,MAAMc,OAAO,GAAGJ,KAAK,CAACxG,WAAW,CAACK,MAAM,CAAC7C,CAAC;IAC1C,IAAI,CAACnC,eAAe,CAACgL,GAAG,CAACL,GAAG,EAAEY,OAAO,CAAC;IAEtC,MAAMC,YAAY,GAAGZ,mBAAmB,CAACa,OAAO,CAACjB,KAAK,CAAC;IACvD,MAAMkB,mBAAmB,GAAGd,mBAAmB,CAACY,YAAY,GAAG,CAAC,CAAC;IACjE,IAAIE,mBAAmB,IAAI,IAAI,EAAE;MAC/B,MAAMC,cAAc,GAAG,IAAI,CAAC7L,iBAAiB,CAACkE,GAAG,CAC/C,IAAI,CAACuG,eAAe,CAACmB,mBAAmB,EAAEjB,UAAU,CACtD,CAAC;MACDkB,cAAc,IACZA,cAAc,CAACC,cAAc,IAC7BD,cAAc,CAACC,cAAc,CAACL,OAAO,CAAC;IAC1C;EACF;EAmfAM,MAAMA,CAAA,EAAe;IACnB,MAAMC,UAAU,GAAG,IAAI,CAACnM,KAAK,CAACmM,UAAU,KAAK,IAAI;IAEjD,MAAMC,gBAAgB,GAAGD,UAAU,GAC/BrO,0BAA0B,GAC1BE,0BAA0B;IAE9B,MAAMqO,uBAAuB,GAAGF,UAAU,GACtCtO,iCAAiC,GACjCE,iCAAiC;IAErC,MAAMuO,qBAAqB,GAAG,CAC5BH,UAAU,IAAII,MAAM,CAACC,0BAA0B,EAC/C,IAAI,CAACxM,KAAK,CAACsM,qBAAqB,CACjC;IACD,IAAIpE,OAAO,IAAI,IAAI,CAAClI,KAAK,CAACyM,KAAK,KAAKC,SAAS,EAAE;MAE7C,MAAMD,KAAK,GAAGpO,YAAY,CAAC,IAAI,CAAC2B,KAAK,CAACyM,KAAK,CAAC;MAC5C,MAAME,gBAAgB,GAAG,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAACC,MAAM,CAE9DC,IAAI,IAAIJ,KAAK,IAAIA,KAAK,CAACI,IAAI,CAAC,KAAKH,SACnC,CAAC;MACDtN,SAAS,CACPuN,gBAAgB,CAAC5E,MAAM,KAAK,CAAC,EAC7B,2BAA2B,GACzB+E,IAAI,CAACC,SAAS,CAACJ,gBAAgB,CAAC,GAChC,2DACJ,CAAC;IACH;IAEA,MAAMK,sBAAsB,GAC1B,IAAI,CAAChN,KAAK,CAACwF,mBAAmB,IAAI,IAAI,GAClC,IAAI,GACJ;MACEF,QAAQ,EAAE,IAAI,CAACC;IACjB,CAAC;IAEP,MAAM;MAAC0F;IAAmB,CAAC,GAAG,IAAI,CAACjL,KAAK;IACxC,IAAI2L,QAAQ,GAAG,IAAI,CAAC3L,KAAK,CAAC2L,QAAQ;IAKlCA,QAAQ,GAAGpM,KAAK,CAACkM,QAAQ,CAACC,OAAO,CAAaC,QAAQ,CAAC;IAEvD,IAAIV,mBAAmB,IAAI,IAAI,IAAIA,mBAAmB,CAAClD,MAAM,GAAG,CAAC,EAAE;MACjE4D,QAAQ,GAAGA,QAAQ,CAACsB,GAAG,CAAC,CAAClC,KAAK,EAAEF,KAAK,KAAK;QACxC,MAAMgB,YAAY,GAAGd,KAAK,GAAGE,mBAAmB,CAACa,OAAO,CAACjB,KAAK,CAAC,GAAG,CAAC,CAAC;QACpE,IAAIgB,YAAY,GAAG,CAAC,CAAC,EAAE;UACrB,MAAMb,GAAG,GAAGD,KAAK,CAACC,GAAG;UACrB,MAAMkC,SAAS,GAAGjC,mBAAmB,CAACY,YAAY,GAAG,CAAC,CAAC;UACvD,MAAMsB,qBAAqB,GACzB,IAAI,CAACnN,KAAK,CAACmN,qBAAqB,IAAIhO,sBAAsB;UAC5D,OACEM,OAAA,CAAC0N,qBAAqB;YAEpB/B,GAAG,EAAEA,GAAG,IAAI,IAAI,CAACD,mBAAmB,CAACH,GAAG,EAAEI,GAAG,CAAE;YAC/CgC,iBAAiB,EAAE,IAAI,CAAC/M,eAAe,CAACgE,GAAG,CACzC,IAAI,CAACuG,eAAe,CAACsC,SAAS,EAAEvB,QAAQ,CAC1C,CAAE;YACFrG,QAAQ,EAAEkG,KAAK,IAAI,IAAI,CAACD,qBAAqB,CAACV,KAAK,EAAEW,KAAK,EAAER,GAAG,CAAE;YACjEqC,mBAAmB,EAAE,IAAI,CAACpN,oBAAqB;YAC/CqN,QAAQ,EAAE,IAAI,CAACtN,KAAK,CAACmF,mBAAoB;YACzCoI,cAAc,EAAE,IAAI,CAACvN,KAAK,CAACwN,0BAA2B;YACtDC,gBAAgB,EAAE,IAAI,CAAClM,KAAK,CAACC,YAAa;YAAAmK,QAAA,EACzCZ;UAAK,GAVDC,GAAG;YAAA0C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAWa,CAAC;QAE5B,CAAC,MAAM;UACL,OAAO9C,KAAK;QACd;MACF,CAAC,CAAC;IACJ;IACAY,QAAQ,GACNlM,OAAA,CAACT,iBAAiB,CAAC8O,QAAQ;MAACxM,KAAK,EAAE6K,UAAU,GAAGlN,UAAU,GAAGC,QAAS;MAAAyM,QAAA,EACnEA;IAAQ;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACiB,CAC7B;IAED,MAAME,gBAAgB,GACpBC,KAAK,CAACC,OAAO,CAAChD,mBAAmB,CAAC,IAAIA,mBAAmB,CAAClD,MAAM,GAAG,CAAC;IAKtE,MAAMmG,gBAAgB,GACpB,IAAI,CAAClO,KAAK,CAACmO,8BAA8B,IAAI,IAAI,IAChDzP,QAAQ,CAACoF,EAAE,KAAK,SAAS,IAAI,IAAI,CAAC9D,KAAK,CAACoO,eAAe,IAAI,IAAK;IAEnE,MAAMC,gBAAgB,GACpB5O,OAAA,CAAC4M,uBAAuB,EAAAlL,MAAA,CAAA0E,MAAA,KAClBmH,sBAAsB;MAC1B5B,GAAG,EAAE,IAAI,CAACvJ,UAAU,CAACyM,gBAAgB,CAAC,IAAI,CAACtO,KAAK,CAACuO,YAAY,CAAE;MAC/D9B,KAAK,EAAEH,qBAAsB;MAC7BkC,qBAAqB,EAGnB9P,QAAQ,CAACoF,EAAE,KAAK,SAAS,IAAIiK,gBAAgB,GACzC,KAAK,GACL,IAAI,CAAC/N,KAAK,CAACwO,qBAChB;MACDC,WAAW,EAAE,KAAM;MACnBC,mBAAmB,EAAE,CAACR,gBAAiB;MAAAvC,QAAA,EACtCA;IAAQ;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACc,CAC1B;IAED,MAAMc,sBAAsB,GAC1B,IAAI,CAAC3O,KAAK,CAAC2O,sBAAsB,KAAKjC,SAAS,GAC3C,IAAI,CAAC1M,KAAK,CAAC2O,sBAAsB,GACjC,IAAI,CAAC3O,KAAK,CAACmM,UAAU;IAE3B,MAAMyC,oBAAoB,GACxB,IAAI,CAAC5O,KAAK,CAAC4O,oBAAoB,KAAKlC,SAAS,GACzC,IAAI,CAAC1M,KAAK,CAAC4O,oBAAoB,GAC/B,CAAC,IAAI,CAAC5O,KAAK,CAACmM,UAAU;IAE5B,MAAM0C,SAAS,GAAG1C,UAAU,GAAGI,MAAM,CAACuC,cAAc,GAAGvC,MAAM,CAACwC,YAAY;IAE1E,MAAAC,WAAA,GACE,IAAI,CAAChP,KAAK;MADN;QAACiP;MAA4D,CAAC,GAAAD,WAAA;MAAXE,UAAU,GAAAC,6BAAA,CAAAH,WAAA,EAAAI,SAAA;IAEnE,MAAMpP,KAAK,GAAAmB,MAAA,CAAA0E,MAAA,KACNqJ,UAAU;MACbP,sBAAsB;MACtBC,oBAAoB;MACpBnC,KAAK,EAAElO,UAAU,CAAC8Q,OAAO,CAACR,SAAS,EAAE,IAAI,CAAC7O,KAAK,CAACyM,KAAK,CAAC;MAGtDjH,mBAAmB,EAAE,IAAI;MACzBF,QAAQ,EAAE,IAAI,CAACJ,aAAa;MAC5B0B,qBAAqB,EAAE,IAAI,CAACJ,0BAA0B;MACtDO,mBAAmB,EAAE,IAAI,CAACF,wBAAwB;MAClDc,gBAAgB,EAAE,IAAI,CAACD,qBAAqB;MAC5C4H,iBAAiB,EAAE,IAAI,CAAC1H,sBAAsB;MAC9CI,kBAAkB,EAAE,IAAI,CAACH,uBAAuB;MAChD0H,6BAA6B,EAAE,IAAI,CAAC9G,kCAAkC;MACtEtB,iBAAiB,EAAE,IAAI,CAACH,sBAAsB;MAC9CO,eAAe,EAAE,IAAI,CAACH,oBAAoB;MAC1CoI,0BAA0B,EAAE,IAAI,CAAC9G,+BAA+B;MAChE+G,yBAAyB,EAAE,IAAI,CAAC7G,8BAA8B;MAC9D8G,gCAAgC,EAC9B,IAAI,CAAC7G,qCAAqC;MAC5CU,UAAU,EAAE,IAAI,CAACF,eAAe;MAChCQ,WAAW,EAAE,IAAI,CAACD,gBAAgB;MAClCD,YAAY,EAAE,IAAI,CAACD,iBAAiB;MACpCD,aAAa,EAAE,IAAI,CAACD,kBAAkB;MACtC1E,QAAQ,EAAE,IAAI,CAACF,aAAa;MAC5B+K,gCAAgC,EAC9BV,6CAA6C;MAC/CW,mBAAmB,EAAE7B,gBAAgB,GACjC,CAAC,GACD,IAAI,CAAC/N,KAAK,CAAC4P,mBAAmB;MAClCC,kBAAkB,EAChB,IAAI,CAAC7P,KAAK,CAAC4G,qBAAqB,IAAI,IAAI,CAAC5G,KAAK,CAAC+G,mBAAmB,GAC9D,IAAI,GACJ,KAAK;MAEX+I,WAAW,EAAE,IAAI,CAAC9P,KAAK,CAAC8P,WAAW,KAAK,KAAK;MAE7CC,SAAS,EAAE,IAAI,CAAC/P,KAAK,CAAC+P,SAAS,KAAK,KAAK;MAEzCC,aAAa,EAAEtR,QAAQ,CAACuR,MAAM,CAAC;QAE7BC,GAAG,EACD,IAAI,CAAClQ,KAAK,CAACgQ,aAAa,KAAK,IAAI,IACjC,IAAI,CAAChQ,KAAK,CAACmQ,cAAc,IAAI,IAAI,IACjC,IAAI,CAACnQ,KAAK,CAACoQ,aAAa,IAAI,IAAI;QAElCC,OAAO,EACL,IAAI,CAACrQ,KAAK,CAACgQ,aAAa,KAAK,IAAI,IACjC,IAAI,CAAChQ,KAAK,CAACmQ,cAAc,IAAI,IAAI,IACjC,IAAI,CAACnQ,KAAK,CAACoQ,aAAa,IAAI;MAChC,CAAC;IAAC,EACH;IAED,MAAM;MAACE;IAAgB,CAAC,GAAG,IAAI,CAACtQ,KAAK;IACrC,IAAIsQ,gBAAgB,IAAI,IAAI,EAAE;MAC5BtQ,KAAK,CAACsQ,gBAAgB,GAAGxR,uBAAuB,CAACwR,gBAAgB,CAAC;IACpE;IAEA,MAAMC,cAAc,GAAG,IAAI,CAACvQ,KAAK,CAACuQ,cAAc;IAChD,MAAMC,aAAwE,GAC5E,IAAI,CAACxO,WAAW,CAACsM,gBAAgB,CAAC,IAAI,CAACtO,KAAK,CAACwQ,aAAa,CAAC;IAE7D,IAAID,cAAc,EAAE;MAClB,IAAI7R,QAAQ,CAACoF,EAAE,KAAK,KAAK,EAAE;QAEzB,OAEErE,OAAA,CAAC2M,gBAAgB,EAAAjL,MAAA,CAAA0E,MAAA,KAAK7F,KAAK;UAAEoL,GAAG,EAAEoF,aAAc;UAAA7E,QAAA,GAC7C4E,cAAc,EACdlC,gBAAgB;QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAEvB,CAAC,MAAM,IAAInP,QAAQ,CAACoF,EAAE,KAAK,SAAS,EAAE;QAQpC,MAAM;UAAC2M,KAAK;UAAEC;QAAK,CAAC,GAAGpS,gBAAgB,CAACD,YAAY,CAAC2B,KAAK,CAACyM,KAAK,CAAC,CAAC;QAClE,OAAOlN,KAAK,CAACoR,YAAY,CACvBJ,cAAc,EACd;UAAC9D,KAAK,EAAElO,UAAU,CAAC8Q,OAAO,CAACR,SAAS,EAAE4B,KAAK;QAAC,CAAC,EAC7ChR,OAAA,CAAC2M,gBAAgB,EAAAjL,MAAA,CAAA0E,MAAA,KACX7F,KAAK;UACTyM,KAAK,EAAElO,UAAU,CAAC8Q,OAAO,CAACR,SAAS,EAAE6B,KAAK,CAAE;UAE5CtF,GAAG,EAAEoF,aAAc;UAAA7E,QAAA,EAClB0C;QAAgB;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CACpB,CAAC;MACH;IACF;IACA,OAEEpO,OAAA,CAAC2M,gBAAgB,EAAAjL,MAAA,CAAA0E,MAAA,KAAK7F,KAAK;MAAEoL,GAAG,EAAEoF,aAAc;MAAA7E,QAAA,EAC7C0C;IAAgB;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAEvB;AACF;AAhpCMhO,UAAU,CACP+Q,OAAO,GAA6B5R,iBAAiB;AAipC9D,MAAMuN,MAAM,GAAGhO,UAAU,CAACsS,MAAM,CAAC;EAC/B9B,YAAY,EAAE;IACZ+B,QAAQ,EAAE,CAAC;IACXC,UAAU,EAAE,CAAC;IACbC,aAAa,EAAE,QAAQ;IACvBC,QAAQ,EAAE;EACZ,CAAC;EACDnC,cAAc,EAAE;IACdgC,QAAQ,EAAE,CAAC;IACXC,UAAU,EAAE,CAAC;IACbC,aAAa,EAAE,KAAK;IACpBC,QAAQ,EAAE;EACZ,CAAC;EACDzE,0BAA0B,EAAE;IAC1BwE,aAAa,EAAE;EACjB;AACF,CAAC,CAAC;AAcF,SAASvL,kBAAkBA,CACzByL,OAA2C,EACK;EAChD,MAAM3P,KAAqD,GAAG;IAC5D+M,gBAAgB,EAAEjP,OAAO,CAAC8R,YAAY,IAAI;MACxC,OAAQrP,cAAsC,IAAW;QACvD,MAAM8D,cAAc,GAClB9D,cAAc,IAAI,IAAI,GAAG,IAAI,GAAGoP,OAAO,CAACpP,cAAc,CAAC;QAEzDP,KAAK,CAACO,cAAc,GAAGA,cAAc;QACrCP,KAAK,CAACqE,cAAc,GAAGA,cAAc;QAErC,IAAIuL,YAAY,IAAI,IAAI,EAAE;UACxB,IAAI,OAAOA,YAAY,KAAK,UAAU,EAAE;YACtCA,YAAY,CAACvL,cAAc,CAAC;UAC9B,CAAC,MAAM;YACLuL,YAAY,CAACjP,OAAO,GAAG0D,cAAc;UACvC;QACF;MACF,CAAC;IACH,CAAC,CAAC;IACF9D,cAAc,EAAE,IAAI;IACpB8D,cAAc,EAAE;EAClB,CAAC;EAED,OAAOrE,KAAK;AACd;AAMA,MAAM6P,OAAO,GAAG7R,KAAK,CAAC8R,UAAU,CAAC,SAASD,OAAOA,CAC/CpR,KAAY,EACZoL,GAA+C,EACnC;EACZ,OAAOA,GAAG,IAAI,IAAI,GAChB3L,OAAA,CAACI,UAAU,EAAAsB,MAAA,CAAA0E,MAAA,KAAK7F,KAAK;IAAA0N,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC,GAEzBpO,OAAA,CAACI,UAAU,EAAAsB,MAAA,CAAA0E,MAAA,KAAK7F,KAAK;IAAEwQ,aAAa,EAAEpF;EAAI;IAAAsC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAC7C;AACH,CAAC,CAAC;AACFuD,OAAO,CAACE,WAAW,GAAG,YAAY;AAElCF,OAAO,CAACR,OAAO,GAAG5R,iBAAiB;AAEnCuS,MAAM,CAACC,OAAO,GAAKJ,OAIU","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"module","externalDependencies":[]}
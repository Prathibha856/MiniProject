{"ast":null,"code":"var _jsxFileName = \"F:\\\\MiniProject\\\\node_modules\\\\@expo\\\\vector-icons\\\\build\\\\createIconSet.js\";\nimport * as Font from 'expo-font';\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport createIconSet from './vendor/react-native-vector-icons/lib/create-icon-set';\nimport createIconButtonComponent from './vendor/react-native-vector-icons/lib/icon-button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from './vendor/react-native-vector-icons/lib/create-icon-set';\nexport default function (glyphMap, fontName, expoAssetId, fontStyle) {\n  var _Icon;\n  const font = {\n    [fontName]: expoAssetId\n  };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n  let didWarn = false;\n  return _Icon = class Icon extends React.Component {\n    constructor(...args) {\n      super(...args);\n      this._mounted = false;\n      this._icon = void 0;\n      this.state = {\n        fontIsLoaded: Font.isLoaded(fontName)\n      };\n    }\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({\n          fontIsLoaded: true\n        });\n      }\n    }\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n    render() {\n      if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n        console.warn(`\"${this.props.name}\" is not a valid icon name for family \"${fontName}\"`);\n      }\n      if (!this.state.fontIsLoaded) {\n        return _jsxDEV(Text, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 24\n        }, this);\n      }\n      return _jsxDEV(RNVIconComponent, Object.assign({\n        ref: view => {\n          this._icon = view;\n        }\n      }, this.props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this);\n    }\n  }, _Icon.defaultProps = RNVIconComponent.defaultProps, _Icon.Button = createIconButtonComponent(_Icon), _Icon.glyphMap = glyphMap, _Icon.getRawGlyphMap = () => glyphMap, _Icon.getFontFamily = () => fontName, _Icon.loadFont = () => Font.loadAsync(font), _Icon.font = font, _Icon.getImageSource = async (name, size, color) => {\n    if (__DEV__ && !(name in glyphMap)) {\n      console.warn(`\"${name}\" is not a valid icon name for family \"${fontName}\"`);\n      return null;\n    }\n    if (typeof Font.renderToImageAsync !== 'function') {\n      console.warn(`Font.renderToImageAsync is not available. Please update expo-font.`);\n      return null;\n    }\n    await Font.loadAsync(font);\n    const imagePathAndDimensions = await Font.renderToImageAsync(String.fromCodePoint(glyphMap[name]), {\n      fontFamily: fontName,\n      color: color,\n      size\n    });\n    if (typeof imagePathAndDimensions === 'string') {\n      if (__DEV__ && !didWarn) {\n        didWarn = true;\n        console.warn('@expo/vector-icons: Font.renderToImageAsync() did not return image dimensions, because an outdated version of expo-font was used. The reported width and height are estimates, instead of real image dimension. Update expo-font to resolve this.');\n      }\n      const dimensions = size;\n      return {\n        uri: imagePathAndDimensions,\n        width: dimensions,\n        height: dimensions,\n        scale: PixelRatio.get()\n      };\n    } else {\n      const {\n        uri,\n        width,\n        height\n      } = imagePathAndDimensions;\n      return {\n        uri,\n        width,\n        height,\n        scale: PixelRatio.get()\n      };\n    }\n  }, _Icon;\n}","map":{"version":3,"names":["Font","React","Text","PixelRatio","createIconSet","createIconButtonComponent","jsxDEV","_jsxDEV","DEFAULT_ICON_COLOR","DEFAULT_ICON_SIZE","glyphMap","fontName","expoAssetId","fontStyle","_Icon","font","RNVIconComponent","didWarn","Icon","Component","constructor","args","_mounted","_icon","state","fontIsLoaded","isLoaded","componentDidMount","loadAsync","setState","componentWillUnmount","setNativeProps","props","render","__DEV__","name","console","warn","fileName","_jsxFileName","lineNumber","columnNumber","Object","assign","ref","view","defaultProps","Button","getRawGlyphMap","getFontFamily","loadFont","getImageSource","size","color","renderToImageAsync","imagePathAndDimensions","String","fromCodePoint","fontFamily","dimensions","uri","width","height","scale","get"],"sources":["F:\\MiniProject\\node_modules\\@expo\\vector-icons\\src\\createIconSet.tsx"],"sourcesContent":["import * as Font from 'expo-font';\nimport React, { ComponentClass } from 'react';\nimport {\n  Text,\n  TextProps,\n  TouchableHighlightProps,\n  ViewProps,\n  OpaqueColorValue,\n  TextStyle,\n  ViewStyle,\n  ColorValue,\n  PixelRatio,\n} from 'react-native';\n\nimport createIconSet from './vendor/react-native-vector-icons/lib/create-icon-set';\nimport createIconButtonComponent from './vendor/react-native-vector-icons/lib/icon-button';\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE,\n} from './vendor/react-native-vector-icons/lib/create-icon-set';\n\nexport interface IconProps<GLYPHS extends string> extends TextProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   */\n  color?: string | OpaqueColorValue;\n}\n\nexport interface IconButtonProps<GLYPHS extends string>\n  extends IconProps<GLYPHS>,\n    ViewProps,\n    TouchableHighlightProps {\n  /**\n   * Text and icon color\n   * Use iconStyle or nest a Text component if you need different colors.\n   * Can be a string or OpaqueColorValue (returned from PlatformColor(..))\n   *\n   *  @default 'white'\n   */\n  color?: string | OpaqueColorValue;\n\n  /**\n   * Border radius of the button\n   * Set to 0 to disable.\n   *\n   * @default 5\n   */\n  borderRadius?: number;\n\n  /**\n   * Styles applied to the icon only\n   * Good for setting margins or a different color.\n   *\n   * @default {marginRight: 10}\n   */\n  iconStyle?: TextStyle;\n\n  /**\n   * Style prop inherited from TextProps and TouchableWithoutFeedbackProperties\n   * Only exist here so we can have ViewStyle or TextStyle\n   *\n   */\n  style?: ViewStyle | TextStyle;\n\n  /**\n   * Background color of the button. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   * @default '#007AFF'\n   */\n  backgroundColor?: string | OpaqueColorValue;\n}\n\nexport type GlyphMap<G extends string> = { [K in G]: number | string };\n\nexport type ImageSource = { uri: string; width: number; height: number; scale: number };\n\nexport interface Icon<G extends string, FN extends string> {\n  defaultProps: any;\n  Button: ComponentClass<IconButtonProps<G>>;\n  glyphMap: GlyphMap<G>;\n  getRawGlyphMap: () => GlyphMap<G>;\n  getFontFamily: () => FN;\n  getImageSource: (name: G, size: number, color: ColorValue) => Promise<ImageSource | null>;\n  loadFont: () => Promise<void>;\n  font: { [x: string]: any };\n  new (props: IconProps<G>): React.Component<IconProps<G>>;\n}\n\nexport default function <G extends string, FN extends string>(\n  glyphMap: GlyphMap<G>,\n  fontName: FN,\n  expoAssetId,\n  fontStyle?: any\n): Icon<G, FN> {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n  let didWarn = false;\n\n  return class Icon extends React.Component<IconProps<G>> {\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n    static getImageSource = async (\n      name: G,\n      size: number,\n      color: ColorValue\n    ): Promise<ImageSource | null> => {\n      if (__DEV__ && !(name in glyphMap)) {\n        console.warn(`\"${name}\" is not a valid icon name for family \"${fontName}\"`);\n        return null;\n      }\n      if (typeof Font.renderToImageAsync !== 'function') {\n        console.warn(`Font.renderToImageAsync is not available. Please update expo-font.`);\n        return null;\n      }\n      await Font.loadAsync(font);\n      const imagePathAndDimensions = await Font.renderToImageAsync(\n        String.fromCodePoint(glyphMap[name] as number),\n        {\n          fontFamily: fontName,\n          color: color as string,\n          size,\n        }\n      );\n      if (typeof imagePathAndDimensions === 'string') {\n        if (__DEV__ && !didWarn) {\n          didWarn = true;\n          console.warn(\n            '@expo/vector-icons: Font.renderToImageAsync() did not return image dimensions, because an outdated version of expo-font was used. The reported width and height are estimates, instead of real image dimension. Update expo-font to resolve this.'\n          );\n        }\n        const dimensions = size;\n        return {\n          uri: imagePathAndDimensions,\n          width: dimensions,\n          height: dimensions,\n          scale: PixelRatio.get(),\n        };\n      } else {\n        const { uri, width, height } = imagePathAndDimensions;\n        return { uri, width, height, scale: PixelRatio.get() };\n      }\n    };\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName),\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        /* eslint-disable react/no-did-mount-set-state */\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n        console.warn(`\"${this.props.name}\" is not a valid icon name for family \"${fontName}\"`);\n      }\n\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={(view) => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
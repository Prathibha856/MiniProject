{"ast":null,"code":"import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/classPrivateFieldLooseKey\";\nimport TextInputState from '../../../../../Libraries/Components/TextInput/TextInputState';\nimport { getFabricUIManager } from '../../../../../Libraries/ReactNative/FabricUIManager';\nimport { create as createAttributePayload } from '../../../../../Libraries/ReactNative/ReactFabricPublicInstance/ReactNativeAttributePayload';\nimport warnForStyleProps from '../../../../../Libraries/ReactNative/ReactFabricPublicInstance/warnForStyleProps';\nimport ReadOnlyElement, { getBoundingClientRect } from './ReadOnlyElement';\nimport ReadOnlyNode from './ReadOnlyNode';\nimport { getPublicInstanceFromInternalInstanceHandle, getShadowNode } from './ReadOnlyNode';\nimport NativeDOM from './specs/NativeDOM';\nimport nullthrows from 'nullthrows';\nconst noop = () => {};\nvar _viewConfig = _classPrivateFieldLooseKey(\"viewConfig\");\nexport default class ReactNativeElement extends ReadOnlyElement {\n  constructor(tag, viewConfig, internalInstanceHandle) {\n    super(internalInstanceHandle);\n    this.__nativeTag = void 0;\n    this.__internalInstanceHandle = void 0;\n    Object.defineProperty(this, _viewConfig, {\n      writable: true,\n      value: void 0\n    });\n    this.__nativeTag = tag;\n    this.__internalInstanceHandle = internalInstanceHandle;\n    _classPrivateFieldLooseBase(this, _viewConfig)[_viewConfig] = viewConfig;\n  }\n  get offsetHeight() {\n    return Math.round(getBoundingClientRect(this, {\n      includeTransform: false\n    }).height);\n  }\n  get offsetLeft() {\n    const node = getShadowNode(this);\n    if (node != null) {\n      const offset = NativeDOM.getOffset(node);\n      return Math.round(offset[2]);\n    }\n    return 0;\n  }\n  get offsetParent() {\n    const node = getShadowNode(this);\n    if (node != null) {\n      const offset = NativeDOM.getOffset(node);\n      if (offset[0] != null) {\n        const offsetParentInstanceHandle = offset[0];\n        const offsetParent = getPublicInstanceFromInternalInstanceHandle(offsetParentInstanceHandle);\n        const offsetParentElement = offsetParent;\n        return offsetParentElement;\n      }\n    }\n    return null;\n  }\n  get offsetTop() {\n    const node = getShadowNode(this);\n    if (node != null) {\n      const offset = NativeDOM.getOffset(node);\n      return Math.round(offset[1]);\n    }\n    return 0;\n  }\n  get offsetWidth() {\n    return Math.round(getBoundingClientRect(this, {\n      includeTransform: false\n    }).width);\n  }\n  blur() {\n    TextInputState.blurTextInput(this);\n  }\n  focus() {\n    TextInputState.focusTextInput(this);\n  }\n  measure(callback) {\n    const node = getShadowNode(this);\n    if (node != null) {\n      nullthrows(getFabricUIManager()).measure(node, callback);\n    }\n  }\n  measureInWindow(callback) {\n    const node = getShadowNode(this);\n    if (node != null) {\n      nullthrows(getFabricUIManager()).measureInWindow(node, callback);\n    }\n  }\n  measureLayout(relativeToNativeNode, onSuccess, onFail) {\n    if (!(relativeToNativeNode instanceof ReadOnlyNode)) {\n      if (__DEV__) {\n        console.error('Warning: ref.measureLayout must be called with a ref to a native component.');\n      }\n      return;\n    }\n    const toStateNode = getShadowNode(this);\n    const fromStateNode = getShadowNode(relativeToNativeNode);\n    if (toStateNode != null && fromStateNode != null) {\n      nullthrows(getFabricUIManager()).measureLayout(toStateNode, fromStateNode, onFail != null ? onFail : noop, onSuccess != null ? onSuccess : noop);\n    }\n  }\n  setNativeProps(nativeProps) {\n    if (__DEV__) {\n      warnForStyleProps(nativeProps, _classPrivateFieldLooseBase(this, _viewConfig)[_viewConfig].validAttributes);\n    }\n    const updatePayload = createAttributePayload(nativeProps, _classPrivateFieldLooseBase(this, _viewConfig)[_viewConfig].validAttributes);\n    const node = getShadowNode(this);\n    if (node != null && updatePayload != null) {\n      nullthrows(getFabricUIManager()).setNativeProps(node, updatePayload);\n    }\n  }\n}","map":{"version":3,"names":["TextInputState","getFabricUIManager","create","createAttributePayload","warnForStyleProps","ReadOnlyElement","getBoundingClientRect","ReadOnlyNode","getPublicInstanceFromInternalInstanceHandle","getShadowNode","NativeDOM","nullthrows","noop","_viewConfig","_classPrivateFieldLooseKey","ReactNativeElement","constructor","tag","viewConfig","internalInstanceHandle","__nativeTag","__internalInstanceHandle","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","offsetHeight","Math","round","includeTransform","height","offsetLeft","node","offset","getOffset","offsetParent","offsetParentInstanceHandle","offsetParentElement","offsetTop","offsetWidth","width","blur","blurTextInput","focus","focusTextInput","measure","callback","measureInWindow","measureLayout","relativeToNativeNode","onSuccess","onFail","__DEV__","console","error","toStateNode","fromStateNode","setNativeProps","nativeProps","validAttributes","updatePayload"],"sources":["F:/MiniProject/node_modules/react-native/src/private/webapis/dom/nodes/ReactNativeElement.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n// flowlint unsafe-getters-setters:off\n\nimport type {\n  HostComponent,\n  INativeMethods,\n  InternalInstanceHandle,\n  MeasureInWindowOnSuccessCallback,\n  MeasureLayoutOnSuccessCallback,\n  MeasureOnSuccessCallback,\n  ViewConfig,\n} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';\nimport type {ElementRef} from 'react';\n\nimport TextInputState from '../../../../../Libraries/Components/TextInput/TextInputState';\nimport {getFabricUIManager} from '../../../../../Libraries/ReactNative/FabricUIManager';\nimport {create as createAttributePayload} from '../../../../../Libraries/ReactNative/ReactFabricPublicInstance/ReactNativeAttributePayload';\nimport warnForStyleProps from '../../../../../Libraries/ReactNative/ReactFabricPublicInstance/warnForStyleProps';\nimport ReadOnlyElement, {getBoundingClientRect} from './ReadOnlyElement';\nimport ReadOnlyNode from './ReadOnlyNode';\nimport {\n  getPublicInstanceFromInternalInstanceHandle,\n  getShadowNode,\n} from './ReadOnlyNode';\nimport NativeDOM from './specs/NativeDOM';\nimport nullthrows from 'nullthrows';\n\nconst noop = () => {};\n\nexport default class ReactNativeElement\n  extends ReadOnlyElement\n  implements INativeMethods\n{\n  // These need to be accessible from `ReactFabricPublicInstanceUtils`.\n  __nativeTag: number;\n  __internalInstanceHandle: InternalInstanceHandle;\n\n  #viewConfig: ViewConfig;\n\n  constructor(\n    tag: number,\n    viewConfig: ViewConfig,\n    internalInstanceHandle: InternalInstanceHandle,\n  ) {\n    super(internalInstanceHandle);\n\n    this.__nativeTag = tag;\n    this.__internalInstanceHandle = internalInstanceHandle;\n    this.#viewConfig = viewConfig;\n  }\n\n  get offsetHeight(): number {\n    return Math.round(\n      getBoundingClientRect(this, {includeTransform: false}).height,\n    );\n  }\n\n  get offsetLeft(): number {\n    const node = getShadowNode(this);\n\n    if (node != null) {\n      const offset = NativeDOM.getOffset(node);\n      return Math.round(offset[2]);\n    }\n\n    return 0;\n  }\n\n  get offsetParent(): ReadOnlyElement | null {\n    const node = getShadowNode(this);\n\n    if (node != null) {\n      const offset = NativeDOM.getOffset(node);\n      // For children of the root node we currently return offset data\n      // but a `null` parent because the root node is not accessible\n      // in JavaScript yet.\n      if (offset[0] != null) {\n        const offsetParentInstanceHandle = offset[0];\n        const offsetParent = getPublicInstanceFromInternalInstanceHandle(\n          offsetParentInstanceHandle,\n        );\n        // $FlowExpectedError[incompatible-type] The value returned by `getOffset` is always an instance handle for `ReadOnlyElement`.\n        const offsetParentElement: ReadOnlyElement | null = offsetParent;\n        return offsetParentElement;\n      }\n    }\n\n    return null;\n  }\n\n  get offsetTop(): number {\n    const node = getShadowNode(this);\n\n    if (node != null) {\n      const offset = NativeDOM.getOffset(node);\n      return Math.round(offset[1]);\n    }\n\n    return 0;\n  }\n\n  get offsetWidth(): number {\n    return Math.round(\n      getBoundingClientRect(this, {includeTransform: false}).width,\n    );\n  }\n\n  /**\n   * React Native compatibility methods\n   */\n\n  blur(): void {\n    // $FlowFixMe[incompatible-exact] Migrate all usages of `NativeMethods` to an interface to fix this.\n    TextInputState.blurTextInput(this);\n  }\n\n  focus() {\n    // $FlowFixMe[incompatible-exact] Migrate all usages of `NativeMethods` to an interface to fix this.\n    TextInputState.focusTextInput(this);\n  }\n\n  measure(callback: MeasureOnSuccessCallback) {\n    const node = getShadowNode(this);\n    if (node != null) {\n      nullthrows(getFabricUIManager()).measure(node, callback);\n    }\n  }\n\n  measureInWindow(callback: MeasureInWindowOnSuccessCallback) {\n    const node = getShadowNode(this);\n    if (node != null) {\n      nullthrows(getFabricUIManager()).measureInWindow(node, callback);\n    }\n  }\n\n  measureLayout(\n    relativeToNativeNode: number | ElementRef<HostComponent<mixed>>,\n    onSuccess: MeasureLayoutOnSuccessCallback,\n    onFail?: () => void /* currently unused */,\n  ) {\n    if (!(relativeToNativeNode instanceof ReadOnlyNode)) {\n      if (__DEV__) {\n        console.error(\n          'Warning: ref.measureLayout must be called with a ref to a native component.',\n        );\n      }\n\n      return;\n    }\n\n    const toStateNode = getShadowNode(this);\n    const fromStateNode = getShadowNode(relativeToNativeNode);\n\n    if (toStateNode != null && fromStateNode != null) {\n      nullthrows(getFabricUIManager()).measureLayout(\n        toStateNode,\n        fromStateNode,\n        onFail != null ? onFail : noop,\n        onSuccess != null ? onSuccess : noop,\n      );\n    }\n  }\n\n  setNativeProps(nativeProps: {...}): void {\n    if (__DEV__) {\n      warnForStyleProps(nativeProps, this.#viewConfig.validAttributes);\n    }\n\n    const updatePayload = createAttributePayload(\n      nativeProps,\n      this.#viewConfig.validAttributes,\n    );\n\n    const node = getShadowNode(this);\n\n    if (node != null && updatePayload != null) {\n      nullthrows(getFabricUIManager()).setNativeProps(node, updatePayload);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
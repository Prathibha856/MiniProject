{"ast":null,"code":"'use strict';\n\nimport ListMetricsAggregator from './ListMetricsAggregator';\nclass Info {\n  constructor() {\n    this.any_blank_count = 0;\n    this.any_blank_ms = 0;\n    this.any_blank_speed_sum = 0;\n    this.mostly_blank_count = 0;\n    this.mostly_blank_ms = 0;\n    this.pixels_blank = 0;\n    this.pixels_sampled = 0;\n    this.pixels_scrolled = 0;\n    this.total_time_spent = 0;\n    this.sample_count = 0;\n  }\n}\nconst DEBUG = false;\nlet _listeners = [];\nlet _minSampleCount = 10;\nlet _sampleRate = DEBUG ? 1 : null;\nclass FillRateHelper {\n  static addListener(callback) {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n    _listeners.push(callback);\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      }\n    };\n  }\n  static setSampleRate(sampleRate) {\n    _sampleRate = sampleRate;\n  }\n  static setMinSampleCount(minSampleCount) {\n    _minSampleCount = minSampleCount;\n  }\n  constructor(listMetrics) {\n    this._anyBlankStartTime = null;\n    this._enabled = false;\n    this._listMetrics = void 0;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n    this._listMetrics = listMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  }\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n    const start = this._samplesStartTime;\n    if (start == null) {\n      DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n    if (this._info.sample_count < _minSampleCount) {\n      this._resetData();\n      return;\n    }\n    const total_time_spent = global.performance.now() - start;\n    const info = Object.assign({}, this._info, {\n      total_time_spent\n    });\n    if (DEBUG) {\n      const derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent\n      };\n      for (const key in derived) {\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n      console.debug('FillRateHelper deactivateAndFlush: ', {\n        derived,\n        info\n      });\n    }\n    _listeners.forEach(listener => listener(info));\n    this._resetData();\n  }\n  computeBlankness(props, cellsAroundViewport, scrollMetrics) {\n    if (!this._enabled || props.getItemCount(props.data) === 0 || cellsAroundViewport.last < cellsAroundViewport.first || this._samplesStartTime == null) {\n      return 0;\n    }\n    const {\n      dOffset,\n      offset,\n      velocity,\n      visibleLength\n    } = scrollMetrics;\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    const scrollSpeed = Math.round(Math.abs(velocity) * 1000);\n    const now = global.performance.now();\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n    this._anyBlankStartTime = null;\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n    this._mostlyBlankStartTime = null;\n    let blankTop = 0;\n    let first = cellsAroundViewport.first;\n    let firstFrame = this._listMetrics.getCellMetrics(first, props);\n    while (first <= cellsAroundViewport.last && (!firstFrame || !firstFrame.isMounted)) {\n      firstFrame = this._listMetrics.getCellMetrics(first, props);\n      first++;\n    }\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));\n    }\n    let blankBottom = 0;\n    let last = cellsAroundViewport.last;\n    let lastFrame = this._listMetrics.getCellMetrics(last, props);\n    while (last >= cellsAroundViewport.first && (!lastFrame || !lastFrame.isMounted)) {\n      lastFrame = this._listMetrics.getCellMetrics(last, props);\n      last--;\n    }\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      const bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));\n    }\n    const pixels_blank = Math.round(blankTop + blankBottom);\n    const blankness = pixels_blank / visibleLength;\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n    return blankness;\n  }\n  enabled() {\n    return this._enabled;\n  }\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n}\nmodule.exports = FillRateHelper;","map":{"version":3,"names":["ListMetricsAggregator","Info","constructor","any_blank_count","any_blank_ms","any_blank_speed_sum","mostly_blank_count","mostly_blank_ms","pixels_blank","pixels_sampled","pixels_scrolled","total_time_spent","sample_count","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","addListener","callback","console","warn","push","remove","filter","listener","setSampleRate","sampleRate","setMinSampleCount","minSampleCount","listMetrics","_anyBlankStartTime","_enabled","_listMetrics","_info","_mostlyBlankStartTime","_samplesStartTime","Math","random","_resetData","activate","debug","global","performance","now","deactivateAndFlush","start","info","Object","assign","derived","avg_blankness","avg_speed","avg_speed_when_any_blank","any_blank_per_min","any_blank_time_frac","mostly_blank_per_min","mostly_blank_time_frac","key","round","forEach","computeBlankness","props","cellsAroundViewport","scrollMetrics","getItemCount","data","last","first","dOffset","offset","velocity","visibleLength","abs","scrollSpeed","blankTop","firstFrame","getCellMetrics","isMounted","min","max","blankBottom","lastFrame","bottomEdge","length","blankness","enabled","module","exports"],"sources":["F:/MiniProject/node_modules/@react-native/virtualized-lists/Lists/FillRateHelper.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {CellMetricProps} from './ListMetricsAggregator';\n\nimport ListMetricsAggregator from './ListMetricsAggregator';\n\nexport type FillRateInfo = Info;\n\nclass Info {\n  any_blank_count: number = 0;\n  any_blank_ms: number = 0;\n  any_blank_speed_sum: number = 0;\n  mostly_blank_count: number = 0;\n  mostly_blank_ms: number = 0;\n  pixels_blank: number = 0;\n  pixels_sampled: number = 0;\n  pixels_scrolled: number = 0;\n  total_time_spent: number = 0;\n  sample_count: number = 0;\n}\n\nconst DEBUG = false;\n\nlet _listeners: Array<(Info) => void> = [];\nlet _minSampleCount = 10;\nlet _sampleRate = DEBUG ? 1 : null;\n\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\nclass FillRateHelper {\n  _anyBlankStartTime: ?number = null;\n  _enabled = false;\n  _listMetrics: ListMetricsAggregator;\n  _info: Info = new Info();\n  _mostlyBlankStartTime: ?number = null;\n  _samplesStartTime: ?number = null;\n\n  static addListener(callback: FillRateInfo => void): {\n    remove: () => void,\n    ...\n  } {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n    _listeners.push(callback);\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      },\n    };\n  }\n\n  static setSampleRate(sampleRate: number) {\n    _sampleRate = sampleRate;\n  }\n\n  static setMinSampleCount(minSampleCount: number) {\n    _minSampleCount = minSampleCount;\n  }\n\n  constructor(listMetrics: ListMetricsAggregator) {\n    this._listMetrics = listMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  }\n\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n    const start = this._samplesStartTime; // const for flow\n    if (start == null) {\n      DEBUG &&\n        console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n      return;\n    }\n    const total_time_spent = global.performance.now() - start;\n    const info: any = {\n      ...this._info,\n      total_time_spent,\n    };\n    if (DEBUG) {\n      const derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank:\n          this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min:\n          this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min:\n          this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent,\n      };\n      for (const key in derived) {\n        // $FlowFixMe[prop-missing]\n        // $FlowFixMe[invalid-computed-prop]\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n      console.debug('FillRateHelper deactivateAndFlush: ', {derived, info});\n    }\n    _listeners.forEach(listener => listener(info));\n    this._resetData();\n  }\n\n  computeBlankness(\n    props: {\n      ...CellMetricProps,\n      initialNumToRender?: ?number,\n      ...\n    },\n    cellsAroundViewport: {\n      first: number,\n      last: number,\n      ...\n    },\n    scrollMetrics: {\n      dOffset: number,\n      offset: number,\n      velocity: number,\n      visibleLength: number,\n      ...\n    },\n  ): number {\n    if (\n      !this._enabled ||\n      props.getItemCount(props.data) === 0 ||\n      cellsAroundViewport.last < cellsAroundViewport.first ||\n      this._samplesStartTime == null\n    ) {\n      return 0;\n    }\n    const {dOffset, offset, velocity, visibleLength} = scrollMetrics;\n\n    // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    const scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n    const now = global.performance.now();\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n    this._anyBlankStartTime = null;\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n    this._mostlyBlankStartTime = null;\n\n    let blankTop = 0;\n    let first = cellsAroundViewport.first;\n    let firstFrame = this._listMetrics.getCellMetrics(first, props);\n    while (\n      first <= cellsAroundViewport.last &&\n      (!firstFrame || !firstFrame.isMounted)\n    ) {\n      firstFrame = this._listMetrics.getCellMetrics(first, props);\n      first++;\n    }\n    // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(\n        visibleLength,\n        Math.max(0, firstFrame.offset - offset),\n      );\n    }\n    let blankBottom = 0;\n    let last = cellsAroundViewport.last;\n    let lastFrame = this._listMetrics.getCellMetrics(last, props);\n    while (\n      last >= cellsAroundViewport.first &&\n      (!lastFrame || !lastFrame.isMounted)\n    ) {\n      lastFrame = this._listMetrics.getCellMetrics(last, props);\n      last--;\n    }\n    // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      const bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(\n        visibleLength,\n        Math.max(0, offset + visibleLength - bottomEdge),\n      );\n    }\n    const pixels_blank = Math.round(blankTop + blankBottom);\n    const blankness = pixels_blank / visibleLength;\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n    return blankness;\n  }\n\n  enabled(): boolean {\n    return this._enabled;\n  }\n\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n}\n\nmodule.exports = FillRateHelper;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import SoundManager from '../Components/Sound/SoundManager';\nimport ReactNativeFeatureFlags from '../ReactNative/ReactNativeFeatureFlags';\nimport UIManager from '../ReactNative/UIManager';\nimport { normalizeRect } from '../StyleSheet/Rect';\nimport Platform from '../Utilities/Platform';\nimport { isHoverEnabled } from './HoverState';\nimport PressabilityPerformanceEventEmitter from './PressabilityPerformanceEventEmitter.js';\nimport invariant from 'invariant';\nimport * as React from 'react';\nconst Transitions = Object.freeze({\n  NOT_RESPONDER: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',\n    RESPONDER_RELEASE: 'ERROR',\n    RESPONDER_TERMINATED: 'ERROR',\n    ENTER_PRESS_RECT: 'ERROR',\n    LEAVE_PRESS_RECT: 'ERROR',\n    LONG_PRESS_DETECTED: 'ERROR'\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: 'RESPONDER_ACTIVE_PRESS_IN',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR'\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: 'RESPONDER_ACTIVE_PRESS_OUT',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR'\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR'\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR'\n  },\n  ERROR: {\n    DELAY: 'NOT_RESPONDER',\n    RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'NOT_RESPONDER',\n    LEAVE_PRESS_RECT: 'NOT_RESPONDER',\n    LONG_PRESS_DETECTED: 'NOT_RESPONDER'\n  }\n});\nconst isActiveSignal = signal => signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';\nconst isActivationSignal = signal => signal === 'RESPONDER_ACTIVE_PRESS_OUT' || signal === 'RESPONDER_ACTIVE_PRESS_IN';\nconst isPressInSignal = signal => signal === 'RESPONDER_INACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';\nconst isTerminalSignal = signal => signal === 'RESPONDER_TERMINATED' || signal === 'RESPONDER_RELEASE';\nconst DEFAULT_LONG_PRESS_DELAY_MS = 500;\nconst DEFAULT_PRESS_RECT_OFFSETS = {\n  bottom: 30,\n  left: 20,\n  right: 20,\n  top: 20\n};\nconst DEFAULT_MIN_PRESS_DURATION = 130;\nconst DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE = 10;\nlet longPressDeactivationDistance = DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE;\nexport default class Pressability {\n  constructor(config) {\n    this._config = void 0;\n    this._eventHandlers = null;\n    this._hoverInDelayTimeout = null;\n    this._hoverOutDelayTimeout = null;\n    this._isHovered = false;\n    this._longPressDelayTimeout = null;\n    this._pressDelayTimeout = null;\n    this._pressOutDelayTimeout = null;\n    this._responderID = null;\n    this._responderRegion = null;\n    this._touchActivatePosition = void 0;\n    this._touchActivateTime = void 0;\n    this._touchState = 'NOT_RESPONDER';\n    this._measureCallback = (left, top, width, height, pageX, pageY) => {\n      if (!left && !top && !width && !height && !pageX && !pageY) {\n        return;\n      }\n      this._responderRegion = {\n        bottom: pageY + height,\n        left: pageX,\n        right: pageX + width,\n        top: pageY\n      };\n    };\n    this.configure(config);\n  }\n  configure(config) {\n    this._config = config;\n  }\n  reset() {\n    this._cancelHoverInDelayTimeout();\n    this._cancelHoverOutDelayTimeout();\n    this._cancelLongPressDelayTimeout();\n    this._cancelPressDelayTimeout();\n    this._cancelPressOutDelayTimeout();\n    this._config = Object.freeze({});\n  }\n  getEventHandlers() {\n    if (this._eventHandlers == null) {\n      this._eventHandlers = this._createEventHandlers();\n    }\n    return this._eventHandlers;\n  }\n  static setLongPressDeactivationDistance(distance) {\n    longPressDeactivationDistance = distance;\n  }\n  _createEventHandlers() {\n    const focusEventHandlers = {\n      onBlur: event => {\n        const {\n          onBlur\n        } = this._config;\n        if (onBlur != null) {\n          onBlur(event);\n        }\n      },\n      onFocus: event => {\n        const {\n          onFocus\n        } = this._config;\n        if (onFocus != null) {\n          onFocus(event);\n        }\n      }\n    };\n    const responderEventHandlers = {\n      onStartShouldSetResponder: () => {\n        const {\n          disabled\n        } = this._config;\n        return !disabled ?? true;\n      },\n      onResponderGrant: event => {\n        event.persist();\n        this._cancelPressOutDelayTimeout();\n        this._responderID = event.currentTarget;\n        this._touchState = 'NOT_RESPONDER';\n        this._receiveSignal('RESPONDER_GRANT', event);\n        const delayPressIn = normalizeDelay(this._config.delayPressIn);\n        if (delayPressIn > 0) {\n          this._pressDelayTimeout = setTimeout(() => {\n            this._receiveSignal('DELAY', event);\n          }, delayPressIn);\n        } else {\n          this._receiveSignal('DELAY', event);\n        }\n        const delayLongPress = normalizeDelay(this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS - delayPressIn);\n        this._longPressDelayTimeout = setTimeout(() => {\n          this._handleLongPress(event);\n        }, delayLongPress + delayPressIn);\n        return this._config.blockNativeResponder === true;\n      },\n      onResponderMove: event => {\n        const {\n          onPressMove\n        } = this._config;\n        if (onPressMove != null) {\n          onPressMove(event);\n        }\n        const responderRegion = this._responderRegion;\n        if (responderRegion == null) {\n          return;\n        }\n        const touch = getTouchFromPressEvent(event);\n        if (touch == null) {\n          this._cancelLongPressDelayTimeout();\n          this._receiveSignal('LEAVE_PRESS_RECT', event);\n          return;\n        }\n        if (this._touchActivatePosition != null) {\n          const deltaX = this._touchActivatePosition.pageX - touch.pageX;\n          const deltaY = this._touchActivatePosition.pageY - touch.pageY;\n          if (Math.hypot(deltaX, deltaY) > longPressDeactivationDistance) {\n            this._cancelLongPressDelayTimeout();\n          }\n        }\n        if (this._isTouchWithinResponderRegion(touch, responderRegion)) {\n          this._receiveSignal('ENTER_PRESS_RECT', event);\n        } else {\n          this._cancelLongPressDelayTimeout();\n          this._receiveSignal('LEAVE_PRESS_RECT', event);\n        }\n      },\n      onResponderRelease: event => {\n        this._receiveSignal('RESPONDER_RELEASE', event);\n      },\n      onResponderTerminate: event => {\n        this._receiveSignal('RESPONDER_TERMINATED', event);\n      },\n      onResponderTerminationRequest: () => {\n        const {\n          cancelable\n        } = this._config;\n        return cancelable ?? true;\n      },\n      onClick: event => {\n        if (event?.nativeEvent?.hasOwnProperty?.('pointerType')) {\n          return;\n        }\n        if (event?.currentTarget !== event?.target) {\n          event?.stopPropagation();\n          return;\n        }\n        const {\n          onPress,\n          disabled\n        } = this._config;\n        if (onPress != null && disabled !== true) {\n          onPress(event);\n        }\n      }\n    };\n    if (process.env.NODE_ENV === 'test') {\n      responderEventHandlers.onStartShouldSetResponder.testOnly_pressabilityConfig = () => this._config;\n    }\n    if (ReactNativeFeatureFlags.shouldPressibilityUseW3CPointerEventsForHover()) {\n      const hoverPointerEvents = {\n        onPointerEnter: undefined,\n        onPointerLeave: undefined\n      };\n      const {\n        onHoverIn,\n        onHoverOut\n      } = this._config;\n      if (onHoverIn != null) {\n        hoverPointerEvents.onPointerEnter = event => {\n          this._isHovered = true;\n          this._cancelHoverOutDelayTimeout();\n          if (onHoverIn != null) {\n            const delayHoverIn = normalizeDelay(this._config.delayHoverIn);\n            if (delayHoverIn > 0) {\n              event.persist();\n              this._hoverInDelayTimeout = setTimeout(() => {\n                onHoverIn(convertPointerEventToMouseEvent(event));\n              }, delayHoverIn);\n            } else {\n              onHoverIn(convertPointerEventToMouseEvent(event));\n            }\n          }\n        };\n      }\n      if (onHoverOut != null) {\n        hoverPointerEvents.onPointerLeave = event => {\n          if (this._isHovered) {\n            this._isHovered = false;\n            this._cancelHoverInDelayTimeout();\n            if (onHoverOut != null) {\n              const delayHoverOut = normalizeDelay(this._config.delayHoverOut);\n              if (delayHoverOut > 0) {\n                event.persist();\n                this._hoverOutDelayTimeout = setTimeout(() => {\n                  onHoverOut(convertPointerEventToMouseEvent(event));\n                }, delayHoverOut);\n              } else {\n                onHoverOut(convertPointerEventToMouseEvent(event));\n              }\n            }\n          }\n        };\n      }\n      return Object.assign({}, focusEventHandlers, responderEventHandlers, hoverPointerEvents);\n    } else {\n      const mouseEventHandlers = Platform.OS === 'ios' || Platform.OS === 'android' ? null : {\n        onMouseEnter: event => {\n          if (isHoverEnabled()) {\n            this._isHovered = true;\n            this._cancelHoverOutDelayTimeout();\n            const {\n              onHoverIn\n            } = this._config;\n            if (onHoverIn != null) {\n              const delayHoverIn = normalizeDelay(this._config.delayHoverIn);\n              if (delayHoverIn > 0) {\n                event.persist();\n                this._hoverInDelayTimeout = setTimeout(() => {\n                  onHoverIn(event);\n                }, delayHoverIn);\n              } else {\n                onHoverIn(event);\n              }\n            }\n          }\n        },\n        onMouseLeave: event => {\n          if (this._isHovered) {\n            this._isHovered = false;\n            this._cancelHoverInDelayTimeout();\n            const {\n              onHoverOut\n            } = this._config;\n            if (onHoverOut != null) {\n              const delayHoverOut = normalizeDelay(this._config.delayHoverOut);\n              if (delayHoverOut > 0) {\n                event.persist();\n                this._hoverInDelayTimeout = setTimeout(() => {\n                  onHoverOut(event);\n                }, delayHoverOut);\n              } else {\n                onHoverOut(event);\n              }\n            }\n          }\n        }\n      };\n      return Object.assign({}, focusEventHandlers, responderEventHandlers, mouseEventHandlers);\n    }\n  }\n  _receiveSignal(signal, event) {\n    if (event.nativeEvent.timestamp != null) {\n      PressabilityPerformanceEventEmitter.emitEvent(() => {\n        return {\n          signal,\n          nativeTimestamp: event.nativeEvent.timestamp\n        };\n      });\n    }\n    const prevState = this._touchState;\n    const nextState = Transitions[prevState]?.[signal];\n    if (this._responderID == null && signal === 'RESPONDER_RELEASE') {\n      return;\n    }\n    invariant(nextState != null && nextState !== 'ERROR', 'Pressability: Invalid signal `%s` for state `%s` on responder: %s', signal, prevState, typeof this._responderID === 'number' ? this._responderID : '<<host component>>');\n    if (prevState !== nextState) {\n      this._performTransitionSideEffects(prevState, nextState, signal, event);\n      this._touchState = nextState;\n    }\n  }\n  _performTransitionSideEffects(prevState, nextState, signal, event) {\n    if (isTerminalSignal(signal)) {\n      this._touchActivatePosition = null;\n      this._cancelLongPressDelayTimeout();\n    }\n    const isInitialTransition = prevState === 'NOT_RESPONDER' && nextState === 'RESPONDER_INACTIVE_PRESS_IN';\n    const isActivationTransition = !isActivationSignal(prevState) && isActivationSignal(nextState);\n    if (isInitialTransition || isActivationTransition) {\n      this._measureResponderRegion();\n    }\n    if (isPressInSignal(prevState) && signal === 'LONG_PRESS_DETECTED') {\n      const {\n        onLongPress\n      } = this._config;\n      if (onLongPress != null) {\n        onLongPress(event);\n      }\n    }\n    const isPrevActive = isActiveSignal(prevState);\n    const isNextActive = isActiveSignal(nextState);\n    if (!isPrevActive && isNextActive) {\n      this._activate(event);\n    } else if (isPrevActive && !isNextActive) {\n      this._deactivate(event);\n    }\n    if (isPressInSignal(prevState) && signal === 'RESPONDER_RELEASE') {\n      if (!isNextActive && !isPrevActive) {\n        this._activate(event);\n        this._deactivate(event);\n      }\n      const {\n        onLongPress,\n        onPress,\n        android_disableSound\n      } = this._config;\n      if (onPress != null) {\n        const isPressCanceledByLongPress = onLongPress != null && prevState === 'RESPONDER_ACTIVE_LONG_PRESS_IN';\n        if (!isPressCanceledByLongPress) {\n          if (Platform.OS === 'android' && android_disableSound !== true) {\n            SoundManager.playTouchSound();\n          }\n          onPress(event);\n        }\n      }\n    }\n    this._cancelPressDelayTimeout();\n  }\n  _activate(event) {\n    const {\n      onPressIn\n    } = this._config;\n    const {\n      pageX,\n      pageY\n    } = getTouchFromPressEvent(event);\n    this._touchActivatePosition = {\n      pageX,\n      pageY\n    };\n    this._touchActivateTime = Date.now();\n    if (onPressIn != null) {\n      onPressIn(event);\n    }\n  }\n  _deactivate(event) {\n    const {\n      onPressOut\n    } = this._config;\n    if (onPressOut != null) {\n      const minPressDuration = normalizeDelay(this._config.minPressDuration, 0, DEFAULT_MIN_PRESS_DURATION);\n      const pressDuration = Date.now() - (this._touchActivateTime ?? 0);\n      const delayPressOut = Math.max(minPressDuration - pressDuration, normalizeDelay(this._config.delayPressOut));\n      if (delayPressOut > 0) {\n        event.persist();\n        this._pressOutDelayTimeout = setTimeout(() => {\n          onPressOut(event);\n        }, delayPressOut);\n      } else {\n        onPressOut(event);\n      }\n    }\n    this._touchActivateTime = null;\n  }\n  _measureResponderRegion() {\n    if (this._responderID == null) {\n      return;\n    }\n    if (typeof this._responderID === 'number') {\n      UIManager.measure(this._responderID, this._measureCallback);\n    } else {\n      this._responderID.measure(this._measureCallback);\n    }\n  }\n  _isTouchWithinResponderRegion(touch, responderRegion) {\n    const hitSlop = normalizeRect(this._config.hitSlop);\n    const pressRectOffset = normalizeRect(this._config.pressRectOffset);\n    let regionBottom = responderRegion.bottom;\n    let regionLeft = responderRegion.left;\n    let regionRight = responderRegion.right;\n    let regionTop = responderRegion.top;\n    if (hitSlop != null) {\n      if (hitSlop.bottom != null) {\n        regionBottom += hitSlop.bottom;\n      }\n      if (hitSlop.left != null) {\n        regionLeft -= hitSlop.left;\n      }\n      if (hitSlop.right != null) {\n        regionRight += hitSlop.right;\n      }\n      if (hitSlop.top != null) {\n        regionTop -= hitSlop.top;\n      }\n    }\n    regionBottom += pressRectOffset?.bottom ?? DEFAULT_PRESS_RECT_OFFSETS.bottom;\n    regionLeft -= pressRectOffset?.left ?? DEFAULT_PRESS_RECT_OFFSETS.left;\n    regionRight += pressRectOffset?.right ?? DEFAULT_PRESS_RECT_OFFSETS.right;\n    regionTop -= pressRectOffset?.top ?? DEFAULT_PRESS_RECT_OFFSETS.top;\n    return touch.pageX > regionLeft && touch.pageX < regionRight && touch.pageY > regionTop && touch.pageY < regionBottom;\n  }\n  _handleLongPress(event) {\n    if (this._touchState === 'RESPONDER_ACTIVE_PRESS_IN' || this._touchState === 'RESPONDER_ACTIVE_LONG_PRESS_IN') {\n      this._receiveSignal('LONG_PRESS_DETECTED', event);\n    }\n  }\n  _cancelHoverInDelayTimeout() {\n    if (this._hoverInDelayTimeout != null) {\n      clearTimeout(this._hoverInDelayTimeout);\n      this._hoverInDelayTimeout = null;\n    }\n  }\n  _cancelHoverOutDelayTimeout() {\n    if (this._hoverOutDelayTimeout != null) {\n      clearTimeout(this._hoverOutDelayTimeout);\n      this._hoverOutDelayTimeout = null;\n    }\n  }\n  _cancelLongPressDelayTimeout() {\n    if (this._longPressDelayTimeout != null) {\n      clearTimeout(this._longPressDelayTimeout);\n      this._longPressDelayTimeout = null;\n    }\n  }\n  _cancelPressDelayTimeout() {\n    if (this._pressDelayTimeout != null) {\n      clearTimeout(this._pressDelayTimeout);\n      this._pressDelayTimeout = null;\n    }\n  }\n  _cancelPressOutDelayTimeout() {\n    if (this._pressOutDelayTimeout != null) {\n      clearTimeout(this._pressOutDelayTimeout);\n      this._pressOutDelayTimeout = null;\n    }\n  }\n}\nfunction normalizeDelay(delay, min = 0, fallback = 0) {\n  return Math.max(min, delay ?? fallback);\n}\nconst getTouchFromPressEvent = event => {\n  const {\n    changedTouches,\n    touches\n  } = event.nativeEvent;\n  if (touches != null && touches.length > 0) {\n    return touches[0];\n  }\n  if (changedTouches != null && changedTouches.length > 0) {\n    return changedTouches[0];\n  }\n  return event.nativeEvent;\n};\nfunction convertPointerEventToMouseEvent(input) {\n  const {\n    clientX,\n    clientY\n  } = input.nativeEvent;\n  return Object.assign({}, input, {\n    nativeEvent: {\n      clientX,\n      clientY,\n      pageX: clientX,\n      pageY: clientY,\n      timestamp: input.timeStamp\n    }\n  });\n}","map":{"version":3,"names":["SoundManager","ReactNativeFeatureFlags","UIManager","normalizeRect","Platform","isHoverEnabled","PressabilityPerformanceEventEmitter","invariant","React","Transitions","Object","freeze","NOT_RESPONDER","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","isActiveSignal","signal","isActivationSignal","isPressInSignal","isTerminalSignal","DEFAULT_LONG_PRESS_DELAY_MS","DEFAULT_PRESS_RECT_OFFSETS","bottom","left","right","top","DEFAULT_MIN_PRESS_DURATION","DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE","longPressDeactivationDistance","Pressability","constructor","config","_config","_eventHandlers","_hoverInDelayTimeout","_hoverOutDelayTimeout","_isHovered","_longPressDelayTimeout","_pressDelayTimeout","_pressOutDelayTimeout","_responderID","_responderRegion","_touchActivatePosition","_touchActivateTime","_touchState","_measureCallback","width","height","pageX","pageY","configure","reset","_cancelHoverInDelayTimeout","_cancelHoverOutDelayTimeout","_cancelLongPressDelayTimeout","_cancelPressDelayTimeout","_cancelPressOutDelayTimeout","getEventHandlers","_createEventHandlers","setLongPressDeactivationDistance","distance","focusEventHandlers","onBlur","event","onFocus","responderEventHandlers","onStartShouldSetResponder","disabled","onResponderGrant","persist","currentTarget","_receiveSignal","delayPressIn","normalizeDelay","setTimeout","delayLongPress","_handleLongPress","blockNativeResponder","onResponderMove","onPressMove","responderRegion","touch","getTouchFromPressEvent","deltaX","deltaY","Math","hypot","_isTouchWithinResponderRegion","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","cancelable","onClick","nativeEvent","hasOwnProperty","target","stopPropagation","onPress","process","env","NODE_ENV","testOnly_pressabilityConfig","shouldPressibilityUseW3CPointerEventsForHover","hoverPointerEvents","onPointerEnter","undefined","onPointerLeave","onHoverIn","onHoverOut","delayHoverIn","convertPointerEventToMouseEvent","delayHoverOut","assign","mouseEventHandlers","OS","onMouseEnter","onMouseLeave","timestamp","emitEvent","nativeTimestamp","prevState","nextState","_performTransitionSideEffects","isInitialTransition","isActivationTransition","_measureResponderRegion","onLongPress","isPrevActive","isNextActive","_activate","_deactivate","android_disableSound","isPressCanceledByLongPress","playTouchSound","onPressIn","Date","now","onPressOut","minPressDuration","pressDuration","delayPressOut","max","measure","hitSlop","pressRectOffset","regionBottom","regionLeft","regionRight","regionTop","clearTimeout","delay","min","fallback","changedTouches","touches","length","input","clientX","clientY","timeStamp"],"sources":["F:/MiniProject/node_modules/react-native/Libraries/Pressability/Pressability.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {HostComponent} from '../Renderer/shims/ReactNativeTypes';\nimport type {\n  BlurEvent,\n  FocusEvent,\n  MouseEvent,\n  PressEvent,\n} from '../Types/CoreEventTypes';\n\nimport SoundManager from '../Components/Sound/SoundManager';\nimport ReactNativeFeatureFlags from '../ReactNative/ReactNativeFeatureFlags';\nimport UIManager from '../ReactNative/UIManager';\nimport {type RectOrSize, normalizeRect} from '../StyleSheet/Rect';\nimport {type PointerEvent} from '../Types/CoreEventTypes';\nimport Platform from '../Utilities/Platform';\nimport {isHoverEnabled} from './HoverState';\nimport PressabilityPerformanceEventEmitter from './PressabilityPerformanceEventEmitter.js';\nimport {type PressabilityTouchSignal as TouchSignal} from './PressabilityTypes.js';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\nexport type PressabilityConfig = $ReadOnly<{|\n  /**\n   * Whether a press gesture can be interrupted by a parent gesture such as a\n   * scroll event. Defaults to true.\n   */\n  cancelable?: ?boolean,\n\n  /**\n   * Whether to disable initialization of the press gesture.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Amount to extend the `VisualRect` by to create `HitRect`.\n   */\n  hitSlop?: ?RectOrSize,\n\n  /**\n   * Amount to extend the `HitRect` by to create `PressRect`.\n   */\n  pressRectOffset?: ?RectOrSize,\n\n  /**\n   * Whether to disable the systemm sound when `onPress` fires on Android.\n   **/\n  android_disableSound?: ?boolean,\n\n  /**\n   * Duration to wait after hover in before calling `onHoverIn`.\n   */\n  delayHoverIn?: ?number,\n\n  /**\n   * Duration to wait after hover out before calling `onHoverOut`.\n   */\n  delayHoverOut?: ?number,\n\n  /**\n   * Duration (in addition to `delayPressIn`) after which a press gesture is\n   * considered a long press gesture. Defaults to 500 (milliseconds).\n   */\n  delayLongPress?: ?number,\n\n  /**\n   * Duration to wait after press down before calling `onPressIn`.\n   */\n  delayPressIn?: ?number,\n\n  /**\n   * Duration to wait after letting up before calling `onPressOut`.\n   */\n  delayPressOut?: ?number,\n\n  /**\n   * Minimum duration to wait between calling `onPressIn` and `onPressOut`.\n   */\n  minPressDuration?: ?number,\n\n  /**\n   * Called after the element loses focus.\n   */\n  onBlur?: ?(event: BlurEvent) => mixed,\n\n  /**\n   * Called after the element is focused.\n   */\n  onFocus?: ?(event: FocusEvent) => mixed,\n\n  /**\n   * Called when the hover is activated to provide visual feedback.\n   */\n  onHoverIn?: ?(event: MouseEvent) => mixed,\n\n  /**\n   * Called when the hover is deactivated to undo visual feedback.\n   */\n  onHoverOut?: ?(event: MouseEvent) => mixed,\n\n  /**\n   * Called when a long press gesture has been triggered.\n   */\n  onLongPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a press gesture has been triggered.\n   */\n  onPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when the press is activated to provide visual feedback.\n   */\n  onPressIn?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when the press location moves. (This should rarely be used.)\n   */\n  onPressMove?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when the press is deactivated to undo visual feedback.\n   */\n  onPressOut?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Whether to prevent any other native components from becoming responder\n   * while this pressable is responder.\n   */\n  blockNativeResponder?: ?boolean,\n|}>;\n\nexport type EventHandlers = $ReadOnly<{|\n  onBlur: (event: BlurEvent) => void,\n  onClick: (event: PressEvent) => void,\n  onFocus: (event: FocusEvent) => void,\n  onMouseEnter?: (event: MouseEvent) => void,\n  onMouseLeave?: (event: MouseEvent) => void,\n  onPointerEnter?: (event: PointerEvent) => void,\n  onPointerLeave?: (event: PointerEvent) => void,\n  onResponderGrant: (event: PressEvent) => void | boolean,\n  onResponderMove: (event: PressEvent) => void,\n  onResponderRelease: (event: PressEvent) => void,\n  onResponderTerminate: (event: PressEvent) => void,\n  onResponderTerminationRequest: () => boolean,\n  onStartShouldSetResponder: () => boolean,\n|}>;\n\ntype TouchState =\n  | 'NOT_RESPONDER'\n  | 'RESPONDER_INACTIVE_PRESS_IN'\n  | 'RESPONDER_INACTIVE_PRESS_OUT'\n  | 'RESPONDER_ACTIVE_PRESS_IN'\n  | 'RESPONDER_ACTIVE_PRESS_OUT'\n  | 'RESPONDER_ACTIVE_LONG_PRESS_IN'\n  | 'RESPONDER_ACTIVE_LONG_PRESS_OUT'\n  | 'ERROR';\n\nconst Transitions = Object.freeze({\n  NOT_RESPONDER: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',\n    RESPONDER_RELEASE: 'ERROR',\n    RESPONDER_TERMINATED: 'ERROR',\n    ENTER_PRESS_RECT: 'ERROR',\n    LEAVE_PRESS_RECT: 'ERROR',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: 'RESPONDER_ACTIVE_PRESS_IN',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: 'RESPONDER_ACTIVE_PRESS_OUT',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  ERROR: {\n    DELAY: 'NOT_RESPONDER',\n    RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'NOT_RESPONDER',\n    LEAVE_PRESS_RECT: 'NOT_RESPONDER',\n    LONG_PRESS_DETECTED: 'NOT_RESPONDER',\n  },\n});\n\nconst isActiveSignal = (signal: TouchState) =>\n  signal === 'RESPONDER_ACTIVE_PRESS_IN' ||\n  signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';\n\nconst isActivationSignal = (signal: TouchState) =>\n  signal === 'RESPONDER_ACTIVE_PRESS_OUT' ||\n  signal === 'RESPONDER_ACTIVE_PRESS_IN';\n\nconst isPressInSignal = (signal: TouchState) =>\n  signal === 'RESPONDER_INACTIVE_PRESS_IN' ||\n  signal === 'RESPONDER_ACTIVE_PRESS_IN' ||\n  signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';\n\nconst isTerminalSignal = (signal: TouchSignal) =>\n  signal === 'RESPONDER_TERMINATED' || signal === 'RESPONDER_RELEASE';\n\nconst DEFAULT_LONG_PRESS_DELAY_MS = 500;\nconst DEFAULT_PRESS_RECT_OFFSETS = {\n  bottom: 30,\n  left: 20,\n  right: 20,\n  top: 20,\n};\nconst DEFAULT_MIN_PRESS_DURATION = 130;\n\nconst DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE = 10;\nlet longPressDeactivationDistance = DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE;\n\n/**\n * Pressability implements press handling capabilities.\n *\n * =========================== Pressability Tutorial ===========================\n *\n * The `Pressability` class helps you create press interactions by analyzing the\n * geometry of elements and observing when another responder (e.g. ScrollView)\n * has stolen the touch lock. It offers hooks for your component to provide\n * interaction feedback to the user:\n *\n * - When a press has activated (e.g. highlight an element)\n * - When a press has deactivated (e.g. un-highlight an element)\n * - When a press should trigger an action, meaning it activated and deactivated\n *   while within the geometry of the element without the lock being stolen.\n *\n * A high quality interaction isn't as simple as you might think. There should\n * be a slight delay before activation. Moving your finger beyond an element's\n * bounds should trigger deactivation, but moving the same finger back within an\n * element's bounds should trigger reactivation.\n *\n * This should be consumed by functional components using `usePressability`. The\n * following steps are only relevant for using `Pressability` in classes:\n *\n * 1. Instantiate `Pressability` and store it on your component's state.\n *\n *    state = {\n *      pressability: new Pressability({\n *        // ...\n *      }),\n *    };\n *\n * 2. Choose the rendered component who should collect the press events. On that\n *    element, spread `pressability.getEventHandlers()` into its props.\n *\n *    return (\n *      <View {...this.state.pressability.getEventHandlers()} />\n *    );\n *\n * 3. Update `Pressability` when your component mounts, updates, and unmounts.\n *\n *    componentDidMount() {\n *      this.state.pressability.configure(...);\n *    }\n *\n *    componentDidUpdate() {\n *      this.state.pressability.configure(...);\n *    }\n *\n *    componentWillUnmount() {\n *      this.state.pressability.reset();\n *    }\n *\n * ==================== Pressability Implementation Details ====================\n *\n * `Pressability` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n * # Geometry\n *\n *  ┌────────────────────────┐\n *  │  ┌──────────────────┐  │ - Presses start anywhere within `HitRect`, which\n *  │  │  ┌────────────┐  │  │   is expanded via the prop `hitSlop`.\n *  │  │  │ VisualRect │  │  │\n *  │  │  └────────────┘  │  │ - When pressed down for sufficient amount of time\n *  │  │    HitRect       │  │   before letting up, `VisualRect` activates for\n *  │  └──────────────────┘  │   as long as the press stays within `PressRect`.\n *  │       PressRect    o   │\n *  └────────────────────│───┘\n *          Out Region   └────── `PressRect`, which is expanded via the prop\n *                               `pressRectOffset`, allows presses to move\n *                               beyond `HitRect` while maintaining activation\n *                               and being eligible for a \"press\".\n *\n * # State Machine\n *\n * ┌───────────────┐ ◀──── RESPONDER_RELEASE\n * │ NOT_RESPONDER │\n * └───┬───────────┘ ◀──── RESPONDER_TERMINATED\n *     │\n *     │ RESPONDER_GRANT (HitRect)\n *     │\n *     ▼\n * ┌─────────────────────┐          ┌───────────────────┐              ┌───────────────────┐\n * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │  T + DELAY   │ RESPONDER_ACTIVE_ │\n * │ PRESS_IN            ├────────▶ │ PRESS_IN          ├────────────▶ │ LONG_PRESS_IN     │\n * └─┬───────────────────┘          └─┬─────────────────┘              └─┬─────────────────┘\n *   │           ▲                    │           ▲                      │           ▲\n *   │LEAVE_     │                    │LEAVE_     │                      │LEAVE_     │\n *   │PRESS_RECT │ENTER_              │PRESS_RECT │ENTER_                │PRESS_RECT │ENTER_\n *   │           │PRESS_RECT          │           │PRESS_RECT            │           │PRESS_RECT\n *   ▼           │                    ▼           │                      ▼           │\n * ┌─────────────┴───────┐          ┌─────────────┴─────┐              ┌─────────────┴─────┐\n * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │              │ RESPONDER_ACTIVE_ │\n * │ PRESS_OUT           ├────────▶ │ PRESS_OUT         │              │ LONG_PRESS_OUT    │\n * └─────────────────────┘          └───────────────────┘              └───────────────────┘\n *\n * T + DELAY => LONG_PRESS_DELAY + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the invocation of `onPress` and `onLongPress` that occur when a\n * responder is release while in the \"press in\" states.\n */\nexport default class Pressability {\n  _config: PressabilityConfig;\n  _eventHandlers: ?EventHandlers = null;\n  _hoverInDelayTimeout: ?TimeoutID = null;\n  _hoverOutDelayTimeout: ?TimeoutID = null;\n  _isHovered: boolean = false;\n  _longPressDelayTimeout: ?TimeoutID = null;\n  _pressDelayTimeout: ?TimeoutID = null;\n  _pressOutDelayTimeout: ?TimeoutID = null;\n  _responderID: ?number | React.ElementRef<HostComponent<mixed>> = null;\n  _responderRegion: ?$ReadOnly<{|\n    bottom: number,\n    left: number,\n    right: number,\n    top: number,\n  |}> = null;\n  _touchActivatePosition: ?$ReadOnly<{|\n    pageX: number,\n    pageY: number,\n  |}>;\n  _touchActivateTime: ?number;\n  _touchState: TouchState = 'NOT_RESPONDER';\n\n  constructor(config: PressabilityConfig) {\n    this.configure(config);\n  }\n\n  configure(config: PressabilityConfig): void {\n    this._config = config;\n  }\n\n  /**\n   * Resets any pending timers. This should be called on unmount.\n   */\n  reset(): void {\n    this._cancelHoverInDelayTimeout();\n    this._cancelHoverOutDelayTimeout();\n    this._cancelLongPressDelayTimeout();\n    this._cancelPressDelayTimeout();\n    this._cancelPressOutDelayTimeout();\n\n    // Ensure that, if any async event handlers are fired after unmount\n    // due to a race, we don't call any configured callbacks.\n    this._config = Object.freeze({});\n  }\n\n  /**\n   * Returns a set of props to spread into the interactive element.\n   */\n  getEventHandlers(): EventHandlers {\n    if (this._eventHandlers == null) {\n      this._eventHandlers = this._createEventHandlers();\n    }\n    return this._eventHandlers;\n  }\n\n  static setLongPressDeactivationDistance(distance: number): void {\n    longPressDeactivationDistance = distance;\n  }\n\n  _createEventHandlers(): EventHandlers {\n    const focusEventHandlers = {\n      onBlur: (event: BlurEvent): void => {\n        const {onBlur} = this._config;\n        if (onBlur != null) {\n          onBlur(event);\n        }\n      },\n      onFocus: (event: FocusEvent): void => {\n        const {onFocus} = this._config;\n        if (onFocus != null) {\n          onFocus(event);\n        }\n      },\n    };\n\n    const responderEventHandlers = {\n      onStartShouldSetResponder: (): boolean => {\n        const {disabled} = this._config;\n        return !disabled ?? true;\n      },\n\n      onResponderGrant: (event: PressEvent): void | boolean => {\n        event.persist();\n\n        this._cancelPressOutDelayTimeout();\n\n        this._responderID = event.currentTarget;\n        this._touchState = 'NOT_RESPONDER';\n        this._receiveSignal('RESPONDER_GRANT', event);\n\n        const delayPressIn = normalizeDelay(this._config.delayPressIn);\n        if (delayPressIn > 0) {\n          this._pressDelayTimeout = setTimeout(() => {\n            this._receiveSignal('DELAY', event);\n          }, delayPressIn);\n        } else {\n          this._receiveSignal('DELAY', event);\n        }\n\n        const delayLongPress = normalizeDelay(\n          this._config.delayLongPress,\n          10,\n          DEFAULT_LONG_PRESS_DELAY_MS - delayPressIn,\n        );\n        this._longPressDelayTimeout = setTimeout(() => {\n          this._handleLongPress(event);\n        }, delayLongPress + delayPressIn);\n\n        return this._config.blockNativeResponder === true;\n      },\n\n      onResponderMove: (event: PressEvent): void => {\n        const {onPressMove} = this._config;\n        if (onPressMove != null) {\n          onPressMove(event);\n        }\n\n        // Region may not have finished being measured, yet.\n        const responderRegion = this._responderRegion;\n        if (responderRegion == null) {\n          return;\n        }\n\n        const touch = getTouchFromPressEvent(event);\n        if (touch == null) {\n          this._cancelLongPressDelayTimeout();\n          this._receiveSignal('LEAVE_PRESS_RECT', event);\n          return;\n        }\n\n        if (this._touchActivatePosition != null) {\n          const deltaX = this._touchActivatePosition.pageX - touch.pageX;\n          const deltaY = this._touchActivatePosition.pageY - touch.pageY;\n          if (Math.hypot(deltaX, deltaY) > longPressDeactivationDistance) {\n            this._cancelLongPressDelayTimeout();\n          }\n        }\n\n        if (this._isTouchWithinResponderRegion(touch, responderRegion)) {\n          this._receiveSignal('ENTER_PRESS_RECT', event);\n        } else {\n          this._cancelLongPressDelayTimeout();\n          this._receiveSignal('LEAVE_PRESS_RECT', event);\n        }\n      },\n\n      onResponderRelease: (event: PressEvent): void => {\n        this._receiveSignal('RESPONDER_RELEASE', event);\n      },\n\n      onResponderTerminate: (event: PressEvent): void => {\n        this._receiveSignal('RESPONDER_TERMINATED', event);\n      },\n\n      onResponderTerminationRequest: (): boolean => {\n        const {cancelable} = this._config;\n        return cancelable ?? true;\n      },\n\n      onClick: (event: PressEvent): void => {\n        // If event has `pointerType`, it was emitted from a PointerEvent and\n        // we should ignore it to avoid triggering `onPress` twice.\n        if (event?.nativeEvent?.hasOwnProperty?.('pointerType')) {\n          return;\n        }\n\n        // for non-pointer click events (e.g. accessibility clicks), we should only dispatch when we're the \"real\" target\n        // in particular, we shouldn't respond to clicks from nested pressables\n        if (event?.currentTarget !== event?.target) {\n          event?.stopPropagation();\n          return;\n        }\n\n        const {onPress, disabled} = this._config;\n        if (onPress != null && disabled !== true) {\n          onPress(event);\n        }\n      },\n    };\n\n    if (process.env.NODE_ENV === 'test') {\n      // We are setting this in order to find this node in ReactNativeTestTools\n      // $FlowFixMe[prop-missing]\n      responderEventHandlers.onStartShouldSetResponder.testOnly_pressabilityConfig =\n        () => this._config;\n    }\n\n    if (\n      ReactNativeFeatureFlags.shouldPressibilityUseW3CPointerEventsForHover()\n    ) {\n      const hoverPointerEvents = {\n        onPointerEnter: (undefined: void | (PointerEvent => void)),\n        onPointerLeave: (undefined: void | (PointerEvent => void)),\n      };\n      const {onHoverIn, onHoverOut} = this._config;\n      if (onHoverIn != null) {\n        hoverPointerEvents.onPointerEnter = (event: PointerEvent) => {\n          this._isHovered = true;\n          this._cancelHoverOutDelayTimeout();\n          if (onHoverIn != null) {\n            const delayHoverIn = normalizeDelay(this._config.delayHoverIn);\n            if (delayHoverIn > 0) {\n              event.persist();\n              this._hoverInDelayTimeout = setTimeout(() => {\n                onHoverIn(convertPointerEventToMouseEvent(event));\n              }, delayHoverIn);\n            } else {\n              onHoverIn(convertPointerEventToMouseEvent(event));\n            }\n          }\n        };\n      }\n      if (onHoverOut != null) {\n        hoverPointerEvents.onPointerLeave = (event: PointerEvent) => {\n          if (this._isHovered) {\n            this._isHovered = false;\n            this._cancelHoverInDelayTimeout();\n            if (onHoverOut != null) {\n              const delayHoverOut = normalizeDelay(this._config.delayHoverOut);\n              if (delayHoverOut > 0) {\n                event.persist();\n                this._hoverOutDelayTimeout = setTimeout(() => {\n                  onHoverOut(convertPointerEventToMouseEvent(event));\n                }, delayHoverOut);\n              } else {\n                onHoverOut(convertPointerEventToMouseEvent(event));\n              }\n            }\n          }\n        };\n      }\n      return {\n        ...focusEventHandlers,\n        ...responderEventHandlers,\n        ...hoverPointerEvents,\n      };\n    } else {\n      const mouseEventHandlers =\n        Platform.OS === 'ios' || Platform.OS === 'android'\n          ? null\n          : {\n              onMouseEnter: (event: MouseEvent): void => {\n                if (isHoverEnabled()) {\n                  this._isHovered = true;\n                  this._cancelHoverOutDelayTimeout();\n                  const {onHoverIn} = this._config;\n                  if (onHoverIn != null) {\n                    const delayHoverIn = normalizeDelay(\n                      this._config.delayHoverIn,\n                    );\n                    if (delayHoverIn > 0) {\n                      event.persist();\n                      this._hoverInDelayTimeout = setTimeout(() => {\n                        onHoverIn(event);\n                      }, delayHoverIn);\n                    } else {\n                      onHoverIn(event);\n                    }\n                  }\n                }\n              },\n\n              onMouseLeave: (event: MouseEvent): void => {\n                if (this._isHovered) {\n                  this._isHovered = false;\n                  this._cancelHoverInDelayTimeout();\n                  const {onHoverOut} = this._config;\n                  if (onHoverOut != null) {\n                    const delayHoverOut = normalizeDelay(\n                      this._config.delayHoverOut,\n                    );\n                    if (delayHoverOut > 0) {\n                      event.persist();\n                      this._hoverInDelayTimeout = setTimeout(() => {\n                        onHoverOut(event);\n                      }, delayHoverOut);\n                    } else {\n                      onHoverOut(event);\n                    }\n                  }\n                }\n              },\n            };\n      return {\n        ...focusEventHandlers,\n        ...responderEventHandlers,\n        ...mouseEventHandlers,\n      };\n    }\n  }\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   */\n  _receiveSignal(signal: TouchSignal, event: PressEvent): void {\n    // Especially on iOS, not all events have timestamps associated.\n    // For telemetry purposes, this doesn't matter too much, as long as *some* do.\n    // Since the native timestamp is integral for logging telemetry, just skip\n    // events if they don't have a timestamp attached.\n    if (event.nativeEvent.timestamp != null) {\n      PressabilityPerformanceEventEmitter.emitEvent(() => {\n        return {\n          signal,\n          nativeTimestamp: event.nativeEvent.timestamp,\n        };\n      });\n    }\n\n    const prevState = this._touchState;\n    const nextState = Transitions[prevState]?.[signal];\n    if (this._responderID == null && signal === 'RESPONDER_RELEASE') {\n      return;\n    }\n    invariant(\n      nextState != null && nextState !== 'ERROR',\n      'Pressability: Invalid signal `%s` for state `%s` on responder: %s',\n      signal,\n      prevState,\n      typeof this._responderID === 'number'\n        ? this._responderID\n        : '<<host component>>',\n    );\n    if (prevState !== nextState) {\n      this._performTransitionSideEffects(prevState, nextState, signal, event);\n      this._touchState = nextState;\n    }\n  }\n\n  /**\n   * Performs a transition between touchable states and identify any activations\n   * or deactivations (and callback invocations).\n   */\n  _performTransitionSideEffects(\n    prevState: TouchState,\n    nextState: TouchState,\n    signal: TouchSignal,\n    event: PressEvent,\n  ): void {\n    if (isTerminalSignal(signal)) {\n      this._touchActivatePosition = null;\n      this._cancelLongPressDelayTimeout();\n    }\n\n    const isInitialTransition =\n      prevState === 'NOT_RESPONDER' &&\n      nextState === 'RESPONDER_INACTIVE_PRESS_IN';\n\n    const isActivationTransition =\n      !isActivationSignal(prevState) && isActivationSignal(nextState);\n\n    if (isInitialTransition || isActivationTransition) {\n      this._measureResponderRegion();\n    }\n\n    if (isPressInSignal(prevState) && signal === 'LONG_PRESS_DETECTED') {\n      const {onLongPress} = this._config;\n      if (onLongPress != null) {\n        onLongPress(event);\n      }\n    }\n\n    const isPrevActive = isActiveSignal(prevState);\n    const isNextActive = isActiveSignal(nextState);\n\n    if (!isPrevActive && isNextActive) {\n      this._activate(event);\n    } else if (isPrevActive && !isNextActive) {\n      this._deactivate(event);\n    }\n\n    if (isPressInSignal(prevState) && signal === 'RESPONDER_RELEASE') {\n      // If we never activated (due to delays), activate and deactivate now.\n      if (!isNextActive && !isPrevActive) {\n        this._activate(event);\n        this._deactivate(event);\n      }\n      const {onLongPress, onPress, android_disableSound} = this._config;\n      if (onPress != null) {\n        const isPressCanceledByLongPress =\n          onLongPress != null && prevState === 'RESPONDER_ACTIVE_LONG_PRESS_IN';\n        if (!isPressCanceledByLongPress) {\n          if (Platform.OS === 'android' && android_disableSound !== true) {\n            SoundManager.playTouchSound();\n          }\n          onPress(event);\n        }\n      }\n    }\n\n    this._cancelPressDelayTimeout();\n  }\n\n  _activate(event: PressEvent): void {\n    const {onPressIn} = this._config;\n    const {pageX, pageY} = getTouchFromPressEvent(event);\n    this._touchActivatePosition = {pageX, pageY};\n    this._touchActivateTime = Date.now();\n    if (onPressIn != null) {\n      onPressIn(event);\n    }\n  }\n\n  _deactivate(event: PressEvent): void {\n    const {onPressOut} = this._config;\n    if (onPressOut != null) {\n      const minPressDuration = normalizeDelay(\n        this._config.minPressDuration,\n        0,\n        DEFAULT_MIN_PRESS_DURATION,\n      );\n      const pressDuration = Date.now() - (this._touchActivateTime ?? 0);\n      const delayPressOut = Math.max(\n        minPressDuration - pressDuration,\n        normalizeDelay(this._config.delayPressOut),\n      );\n      if (delayPressOut > 0) {\n        event.persist();\n        this._pressOutDelayTimeout = setTimeout(() => {\n          onPressOut(event);\n        }, delayPressOut);\n      } else {\n        onPressOut(event);\n      }\n    }\n    this._touchActivateTime = null;\n  }\n\n  _measureResponderRegion(): void {\n    if (this._responderID == null) {\n      return;\n    }\n\n    if (typeof this._responderID === 'number') {\n      UIManager.measure(this._responderID, this._measureCallback);\n    } else {\n      this._responderID.measure(this._measureCallback);\n    }\n  }\n\n  _measureCallback = (\n    left: number,\n    top: number,\n    width: number,\n    height: number,\n    pageX: number,\n    pageY: number,\n  ) => {\n    if (!left && !top && !width && !height && !pageX && !pageY) {\n      return;\n    }\n    this._responderRegion = {\n      bottom: pageY + height,\n      left: pageX,\n      right: pageX + width,\n      top: pageY,\n    };\n  };\n\n  _isTouchWithinResponderRegion(\n    touch: $PropertyType<PressEvent, 'nativeEvent'>,\n    responderRegion: $ReadOnly<{|\n      bottom: number,\n      left: number,\n      right: number,\n      top: number,\n    |}>,\n  ): boolean {\n    const hitSlop = normalizeRect(this._config.hitSlop);\n    const pressRectOffset = normalizeRect(this._config.pressRectOffset);\n\n    let regionBottom = responderRegion.bottom;\n    let regionLeft = responderRegion.left;\n    let regionRight = responderRegion.right;\n    let regionTop = responderRegion.top;\n\n    if (hitSlop != null) {\n      if (hitSlop.bottom != null) {\n        regionBottom += hitSlop.bottom;\n      }\n      if (hitSlop.left != null) {\n        regionLeft -= hitSlop.left;\n      }\n      if (hitSlop.right != null) {\n        regionRight += hitSlop.right;\n      }\n      if (hitSlop.top != null) {\n        regionTop -= hitSlop.top;\n      }\n    }\n\n    regionBottom +=\n      pressRectOffset?.bottom ?? DEFAULT_PRESS_RECT_OFFSETS.bottom;\n    regionLeft -= pressRectOffset?.left ?? DEFAULT_PRESS_RECT_OFFSETS.left;\n    regionRight += pressRectOffset?.right ?? DEFAULT_PRESS_RECT_OFFSETS.right;\n    regionTop -= pressRectOffset?.top ?? DEFAULT_PRESS_RECT_OFFSETS.top;\n\n    return (\n      touch.pageX > regionLeft &&\n      touch.pageX < regionRight &&\n      touch.pageY > regionTop &&\n      touch.pageY < regionBottom\n    );\n  }\n\n  _handleLongPress(event: PressEvent): void {\n    if (\n      this._touchState === 'RESPONDER_ACTIVE_PRESS_IN' ||\n      this._touchState === 'RESPONDER_ACTIVE_LONG_PRESS_IN'\n    ) {\n      this._receiveSignal('LONG_PRESS_DETECTED', event);\n    }\n  }\n\n  _cancelHoverInDelayTimeout(): void {\n    if (this._hoverInDelayTimeout != null) {\n      clearTimeout(this._hoverInDelayTimeout);\n      this._hoverInDelayTimeout = null;\n    }\n  }\n\n  _cancelHoverOutDelayTimeout(): void {\n    if (this._hoverOutDelayTimeout != null) {\n      clearTimeout(this._hoverOutDelayTimeout);\n      this._hoverOutDelayTimeout = null;\n    }\n  }\n\n  _cancelLongPressDelayTimeout(): void {\n    if (this._longPressDelayTimeout != null) {\n      clearTimeout(this._longPressDelayTimeout);\n      this._longPressDelayTimeout = null;\n    }\n  }\n\n  _cancelPressDelayTimeout(): void {\n    if (this._pressDelayTimeout != null) {\n      clearTimeout(this._pressDelayTimeout);\n      this._pressDelayTimeout = null;\n    }\n  }\n\n  _cancelPressOutDelayTimeout(): void {\n    if (this._pressOutDelayTimeout != null) {\n      clearTimeout(this._pressOutDelayTimeout);\n      this._pressOutDelayTimeout = null;\n    }\n  }\n}\n\nfunction normalizeDelay(\n  delay: ?number,\n  min: number = 0,\n  fallback: number = 0,\n): number {\n  return Math.max(min, delay ?? fallback);\n}\n\nconst getTouchFromPressEvent = (event: PressEvent) => {\n  const {changedTouches, touches} = event.nativeEvent;\n\n  if (touches != null && touches.length > 0) {\n    return touches[0];\n  }\n  if (changedTouches != null && changedTouches.length > 0) {\n    return changedTouches[0];\n  }\n  return event.nativeEvent;\n};\n\nfunction convertPointerEventToMouseEvent(input: PointerEvent): MouseEvent {\n  const {clientX, clientY} = input.nativeEvent;\n  return {\n    ...input,\n    nativeEvent: {\n      clientX,\n      clientY,\n      pageX: clientX,\n      pageY: clientY,\n      timestamp: input.timeStamp,\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
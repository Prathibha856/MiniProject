{"ast":null,"code":"var _jsxFileName = \"F:\\\\MiniProject\\\\App.js\";\nimport React, { useEffect, useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { StatusBar } from 'expo-status-bar';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Ionicons } from '@expo/vector-icons';\nimport SplashScreen from './screens/SplashScreen';\nimport OnboardingScreen from './screens/OnboardingScreen';\nimport HomeScreen from './screens/HomeScreen';\nimport RoutesScreen from './screens/RoutesScreen';\nimport ScheduleScreen from './screens/ScheduleScreen';\nimport ProfileScreen from './screens/ProfileScreen';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Stack = createStackNavigator();\nconst Tab = createBottomTabNavigator();\nfunction MainTabs() {\n  return _jsxDEV(Tab.Navigator, {\n    screenOptions: ({\n      route\n    }) => ({\n      tabBarIcon: ({\n        focused,\n        color,\n        size\n      }) => {\n        let iconName;\n        if (route.name === 'Home') {\n          iconName = focused ? 'home' : 'home-outline';\n        } else if (route.name === 'Routes') {\n          iconName = focused ? 'map' : 'map-outline';\n        } else if (route.name === 'Schedule') {\n          iconName = focused ? 'calendar' : 'calendar-outline';\n        } else if (route.name === 'Profile') {\n          iconName = focused ? 'person' : 'person-outline';\n        }\n        return _jsxDEV(Ionicons, {\n          name: iconName,\n          size: size,\n          color: color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 18\n        }, this);\n      },\n      tabBarActiveTintColor: '#3B82F6',\n      tabBarInactiveTintColor: 'gray',\n      tabBarStyle: {\n        backgroundColor: 'white',\n        borderTopWidth: 1,\n        borderTopColor: '#E5E7EB',\n        paddingBottom: 5,\n        paddingTop: 5,\n        height: 60\n      },\n      headerShown: false\n    }),\n    children: [_jsxDEV(Tab.Screen, {\n      name: \"Home\",\n      component: HomeScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), _jsxDEV(Tab.Screen, {\n      name: \"Routes\",\n      component: RoutesScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), _jsxDEV(Tab.Screen, {\n      name: \"Schedule\",\n      component: ScheduleScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), _jsxDEV(Tab.Screen, {\n      name: \"Profile\",\n      component: ProfileScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\nexport default function App() {\n  const [isFirstLaunch, setIsFirstLaunch] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    checkFirstLaunch();\n  }, []);\n  const checkFirstLaunch = async () => {\n    try {\n      console.log('Checking first launch...');\n      const hasLaunched = await AsyncStorage.getItem('hasLaunched');\n      console.log('hasLaunched:', hasLaunched);\n      if (hasLaunched === null) {\n        setIsFirstLaunch(true);\n      } else {\n        setIsFirstLaunch(false);\n      }\n    } catch (error) {\n      console.error('Error checking first launch:', error);\n      setIsFirstLaunch(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  console.log('App rendering, isLoading:', isLoading, 'isFirstLaunch:', isFirstLaunch);\n  return _jsxDEV(NavigationContainer, {\n    children: [_jsxDEV(StatusBar, {\n      style: \"auto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), _jsxDEV(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false\n      },\n      children: isLoading || isFirstLaunch === null ? _jsxDEV(Stack.Screen, {\n        name: \"Splash\",\n        component: SplashScreen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this) : isFirstLaunch ? _jsxDEV(_Fragment, {\n        children: [_jsxDEV(Stack.Screen, {\n          name: \"Onboarding\",\n          component: OnboardingScreen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), _jsxDEV(Stack.Screen, {\n          name: \"Main\",\n          component: MainTabs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : _jsxDEV(Stack.Screen, {\n        name: \"Main\",\n        component: MainTabs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"names":["React","useEffect","useState","NavigationContainer","createStackNavigator","createBottomTabNavigator","StatusBar","AsyncStorage","Ionicons","SplashScreen","OnboardingScreen","HomeScreen","RoutesScreen","ScheduleScreen","ProfileScreen","jsxDEV","_jsxDEV","Fragment","_Fragment","Stack","Tab","MainTabs","Navigator","screenOptions","route","tabBarIcon","focused","color","size","iconName","name","fileName","_jsxFileName","lineNumber","columnNumber","tabBarActiveTintColor","tabBarInactiveTintColor","tabBarStyle","backgroundColor","borderTopWidth","borderTopColor","paddingBottom","paddingTop","height","headerShown","children","Screen","component","App","isFirstLaunch","setIsFirstLaunch","isLoading","setIsLoading","checkFirstLaunch","console","log","hasLaunched","getItem","error","style"],"sources":["F:/MiniProject/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { Ionicons } from '@expo/vector-icons';\r\n\r\n// Import screens\r\nimport SplashScreen from './screens/SplashScreen';\r\nimport OnboardingScreen from './screens/OnboardingScreen';\r\nimport HomeScreen from './screens/HomeScreen';\r\nimport RoutesScreen from './screens/RoutesScreen';\r\nimport ScheduleScreen from './screens/ScheduleScreen';\r\nimport ProfileScreen from './screens/ProfileScreen';\r\n\r\nconst Stack = createStackNavigator();\r\nconst Tab = createBottomTabNavigator();\r\n\r\n// Bottom Tab Navigator\r\nfunction MainTabs() {\r\n  return (\r\n    <Tab.Navigator\r\n      screenOptions={({ route }) => ({\r\n        tabBarIcon: ({ focused, color, size }) => {\r\n          let iconName;\r\n\r\n          if (route.name === 'Home') {\r\n            iconName = focused ? 'home' : 'home-outline';\r\n          } else if (route.name === 'Routes') {\r\n            iconName = focused ? 'map' : 'map-outline';\r\n          } else if (route.name === 'Schedule') {\r\n            iconName = focused ? 'calendar' : 'calendar-outline';\r\n          } else if (route.name === 'Profile') {\r\n            iconName = focused ? 'person' : 'person-outline';\r\n          }\r\n\r\n          return <Ionicons name={iconName} size={size} color={color} />;\r\n        },\r\n        tabBarActiveTintColor: '#3B82F6',\r\n        tabBarInactiveTintColor: 'gray',\r\n        tabBarStyle: {\r\n          backgroundColor: 'white',\r\n          borderTopWidth: 1,\r\n          borderTopColor: '#E5E7EB',\r\n          paddingBottom: 5,\r\n          paddingTop: 5,\r\n          height: 60,\r\n        },\r\n        headerShown: false,\r\n      })}\r\n    >\r\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\r\n      <Tab.Screen name=\"Routes\" component={RoutesScreen} />\r\n      <Tab.Screen name=\"Schedule\" component={ScheduleScreen} />\r\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\r\n    </Tab.Navigator>\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  const [isFirstLaunch, setIsFirstLaunch] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    checkFirstLaunch();\r\n  }, []);\r\n\r\n  const checkFirstLaunch = async () => {\r\n    try {\r\n      console.log('Checking first launch...');\r\n      const hasLaunched = await AsyncStorage.getItem('hasLaunched');\r\n      console.log('hasLaunched:', hasLaunched);\r\n      if (hasLaunched === null) {\r\n        setIsFirstLaunch(true);\r\n      } else {\r\n        setIsFirstLaunch(false);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking first launch:', error);\r\n      setIsFirstLaunch(false);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  console.log('App rendering, isLoading:', isLoading, 'isFirstLaunch:', isFirstLaunch);\r\n\r\n  return (\r\n    <NavigationContainer>\r\n      <StatusBar style=\"auto\" />\r\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n        {isLoading || isFirstLaunch === null ? (\r\n          <Stack.Screen name=\"Splash\" component={SplashScreen} />\r\n        ) : isFirstLaunch ? (\r\n          <>\r\n            <Stack.Screen name=\"Onboarding\" component={OnboardingScreen} />\r\n            <Stack.Screen name=\"Main\" component={MainTabs} />\r\n          </>\r\n        ) : (\r\n          <Stack.Screen name=\"Main\" component={MainTabs} />\r\n        )}\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
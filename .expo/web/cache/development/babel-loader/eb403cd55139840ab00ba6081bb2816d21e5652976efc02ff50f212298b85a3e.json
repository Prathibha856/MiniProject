{"ast":null,"code":"import warnOnce from '../../../../Libraries/Utilities/warnOnce';\nimport { EventCounts } from './EventTiming';\nimport MemoryInfo from './MemoryInfo';\nimport { ALWAYS_LOGGED_ENTRY_TYPES } from './PerformanceEntry';\nimport { warnNoNativePerformanceObserver } from './PerformanceObserver';\nimport { performanceEntryTypeToRaw, rawToPerformanceEntry } from './RawPerformanceEntry';\nimport { RawPerformanceEntryTypeValues } from './RawPerformanceEntry';\nimport ReactNativeStartupTiming from './ReactNativeStartupTiming';\nimport NativePerformance from './specs/NativePerformance';\nimport NativePerformanceObserver from './specs/NativePerformanceObserver';\nimport { PerformanceMark, PerformanceMeasure } from './UserTiming';\nconst getCurrentTimeStamp = NativePerformance?.now ?? global.nativePerformanceNow ?? (() => Date.now());\nif (NativePerformanceObserver?.setIsBuffered) {\n  NativePerformanceObserver?.setIsBuffered(ALWAYS_LOGGED_ENTRY_TYPES.map(performanceEntryTypeToRaw), true);\n}\nfunction warnNoNativePerformance() {\n  warnOnce('missing-native-performance', 'Missing native implementation of Performance');\n}\nexport default class Performance {\n  constructor() {\n    this.eventCounts = new EventCounts();\n  }\n  get memory() {\n    if (NativePerformance?.getSimpleMemoryInfo) {\n      const memoryInfo = NativePerformance.getSimpleMemoryInfo();\n      if (memoryInfo.hasOwnProperty('hermes_heapSize')) {\n        const {\n          hermes_heapSize: totalJSHeapSize,\n          hermes_allocatedBytes: usedJSHeapSize\n        } = memoryInfo;\n        return new MemoryInfo({\n          jsHeapSizeLimit: null,\n          totalJSHeapSize,\n          usedJSHeapSize\n        });\n      } else {\n        return new MemoryInfo();\n      }\n    }\n    return new MemoryInfo();\n  }\n  get rnStartupTiming() {\n    if (NativePerformance?.getReactNativeStartupTiming) {\n      const {\n        startTime,\n        endTime,\n        initializeRuntimeStart,\n        initializeRuntimeEnd,\n        executeJavaScriptBundleEntryPointStart,\n        executeJavaScriptBundleEntryPointEnd\n      } = NativePerformance.getReactNativeStartupTiming();\n      return new ReactNativeStartupTiming({\n        startTime,\n        endTime,\n        initializeRuntimeStart,\n        initializeRuntimeEnd,\n        executeJavaScriptBundleEntryPointStart,\n        executeJavaScriptBundleEntryPointEnd\n      });\n    }\n    return new ReactNativeStartupTiming();\n  }\n  mark(markName, markOptions) {\n    const mark = new PerformanceMark(markName, markOptions);\n    if (NativePerformance?.mark) {\n      NativePerformance.mark(markName, mark.startTime);\n    } else {\n      warnNoNativePerformance();\n    }\n    return mark;\n  }\n  clearMarks(markName) {\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n    NativePerformanceObserver?.clearEntries(RawPerformanceEntryTypeValues.MARK, markName);\n  }\n  measure(measureName, startMarkOrOptions, endMark) {\n    let options;\n    let startMarkName,\n      endMarkName = endMark,\n      duration,\n      startTime = 0,\n      endTime = 0;\n    if (typeof startMarkOrOptions === 'string') {\n      startMarkName = startMarkOrOptions;\n    } else if (startMarkOrOptions !== undefined) {\n      options = startMarkOrOptions;\n      if (endMark !== undefined) {\n        throw new TypeError(\"Performance.measure: Can't have both options and endMark\");\n      }\n      if (options.start === undefined && options.end === undefined) {\n        throw new TypeError('Performance.measure: Must have at least one of start/end specified in options');\n      }\n      if (options.start !== undefined && options.end !== undefined && options.duration !== undefined) {\n        throw new TypeError(\"Performance.measure: Can't have both start/end and duration explicitly in options\");\n      }\n      if (typeof options.start === 'number') {\n        startTime = options.start;\n      } else {\n        startMarkName = options.start;\n      }\n      if (typeof options.end === 'number') {\n        endTime = options.end;\n      } else {\n        endMarkName = options.end;\n      }\n      duration = options.duration ?? duration;\n    }\n    const measure = new PerformanceMeasure(measureName, {\n      startTime,\n      duration\n    });\n    if (NativePerformance?.measure) {\n      NativePerformance.measure(measureName, startTime, endTime, duration, startMarkName, endMarkName);\n    } else {\n      warnNoNativePerformance();\n    }\n    return measure;\n  }\n  clearMeasures(measureName) {\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n    NativePerformanceObserver?.clearEntries(RawPerformanceEntryTypeValues.MEASURE, measureName);\n  }\n  now() {\n    return getCurrentTimeStamp();\n  }\n  getEntries() {\n    if (!NativePerformanceObserver?.getEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries().map(rawToPerformanceEntry);\n  }\n  getEntriesByType(entryType) {\n    if (!ALWAYS_LOGGED_ENTRY_TYPES.includes(entryType)) {\n      console.warn(`Performance.getEntriesByType: Only valid for ${JSON.stringify(ALWAYS_LOGGED_ENTRY_TYPES)} entry types, got ${entryType}`);\n      return [];\n    }\n    if (!NativePerformanceObserver?.getEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries(performanceEntryTypeToRaw(entryType)).map(rawToPerformanceEntry);\n  }\n  getEntriesByName(entryName, entryType) {\n    if (entryType !== undefined && !ALWAYS_LOGGED_ENTRY_TYPES.includes(entryType)) {\n      console.warn(`Performance.getEntriesByName: Only valid for ${JSON.stringify(ALWAYS_LOGGED_ENTRY_TYPES)} entry types, got ${entryType}`);\n      return [];\n    }\n    if (!NativePerformanceObserver?.getEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries(entryType != null ? performanceEntryTypeToRaw(entryType) : undefined, entryName).map(rawToPerformanceEntry);\n  }\n}","map":{"version":3,"names":["warnOnce","EventCounts","MemoryInfo","ALWAYS_LOGGED_ENTRY_TYPES","warnNoNativePerformanceObserver","performanceEntryTypeToRaw","rawToPerformanceEntry","RawPerformanceEntryTypeValues","ReactNativeStartupTiming","NativePerformance","NativePerformanceObserver","PerformanceMark","PerformanceMeasure","getCurrentTimeStamp","now","global","nativePerformanceNow","Date","setIsBuffered","map","warnNoNativePerformance","Performance","constructor","eventCounts","memory","getSimpleMemoryInfo","memoryInfo","hasOwnProperty","hermes_heapSize","totalJSHeapSize","hermes_allocatedBytes","usedJSHeapSize","jsHeapSizeLimit","rnStartupTiming","getReactNativeStartupTiming","startTime","endTime","initializeRuntimeStart","initializeRuntimeEnd","executeJavaScriptBundleEntryPointStart","executeJavaScriptBundleEntryPointEnd","mark","markName","markOptions","clearMarks","clearEntries","MARK","measure","measureName","startMarkOrOptions","endMark","options","startMarkName","endMarkName","duration","undefined","TypeError","start","end","clearMeasures","MEASURE","getEntries","getEntriesByType","entryType","includes","console","warn","JSON","stringify","getEntriesByName","entryName"],"sources":["F:/MiniProject/node_modules/react-native/src/private/webapis/performance/Performance.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n// flowlint unsafe-getters-setters:off\n\nimport type {\n  DOMHighResTimeStamp,\n  PerformanceEntryType,\n} from './PerformanceEntry';\nimport type {PerformanceEntryList} from './PerformanceObserver';\nimport type {DetailType, PerformanceMarkOptions} from './UserTiming';\n\nimport warnOnce from '../../../../Libraries/Utilities/warnOnce';\nimport {EventCounts} from './EventTiming';\nimport MemoryInfo from './MemoryInfo';\nimport {ALWAYS_LOGGED_ENTRY_TYPES} from './PerformanceEntry';\nimport {warnNoNativePerformanceObserver} from './PerformanceObserver';\nimport {\n  performanceEntryTypeToRaw,\n  rawToPerformanceEntry,\n} from './RawPerformanceEntry';\nimport {RawPerformanceEntryTypeValues} from './RawPerformanceEntry';\nimport ReactNativeStartupTiming from './ReactNativeStartupTiming';\nimport NativePerformance from './specs/NativePerformance';\nimport NativePerformanceObserver from './specs/NativePerformanceObserver';\nimport {PerformanceMark, PerformanceMeasure} from './UserTiming';\n\ndeclare var global: {\n  // This value is defined directly via JSI, if available.\n  +nativePerformanceNow?: ?() => number,\n};\n\nconst getCurrentTimeStamp: () => DOMHighResTimeStamp =\n  NativePerformance?.now ?? global.nativePerformanceNow ?? (() => Date.now());\n\n// We want some of the performance entry types to be always logged,\n// even if they are not currently observed - this is either to be able to\n// retrieve them at any time via Performance.getEntries* or to refer by other entries\n// (such as when measures may refer to marks, even if the latter are not observed)\nif (NativePerformanceObserver?.setIsBuffered) {\n  NativePerformanceObserver?.setIsBuffered(\n    ALWAYS_LOGGED_ENTRY_TYPES.map(performanceEntryTypeToRaw),\n    true,\n  );\n}\n\nfunction warnNoNativePerformance() {\n  warnOnce(\n    'missing-native-performance',\n    'Missing native implementation of Performance',\n  );\n}\n\nexport type PerformanceMeasureOptions = {\n  detail?: DetailType,\n  start?: DOMHighResTimeStamp,\n  duration?: DOMHighResTimeStamp,\n  end?: DOMHighResTimeStamp,\n};\n\n/**\n * Partial implementation of the Performance interface for RN,\n * corresponding to the standard in\n * https://www.w3.org/TR/user-timing/#extensions-performance-interface\n */\nexport default class Performance {\n  eventCounts: EventCounts = new EventCounts();\n\n  // Get the current JS memory information.\n  get memory(): MemoryInfo {\n    if (NativePerformance?.getSimpleMemoryInfo) {\n      // JSI API implementations may have different variants of names for the JS\n      // heap information we need here. We will parse the result based on our\n      // guess of the implementation for now.\n      const memoryInfo = NativePerformance.getSimpleMemoryInfo();\n      if (memoryInfo.hasOwnProperty('hermes_heapSize')) {\n        // We got memory information from Hermes\n        const {\n          hermes_heapSize: totalJSHeapSize,\n          hermes_allocatedBytes: usedJSHeapSize,\n        } = memoryInfo;\n\n        return new MemoryInfo({\n          jsHeapSizeLimit: null, // We don't know the heap size limit from Hermes.\n          totalJSHeapSize,\n          usedJSHeapSize,\n        });\n      } else {\n        // JSC and V8 has no native implementations for memory information in JSI::Instrumentation\n        return new MemoryInfo();\n      }\n    }\n\n    return new MemoryInfo();\n  }\n\n  // Startup metrics is not used in web, but only in React Native.\n  get rnStartupTiming(): ReactNativeStartupTiming {\n    if (NativePerformance?.getReactNativeStartupTiming) {\n      const {\n        startTime,\n        endTime,\n        initializeRuntimeStart,\n        initializeRuntimeEnd,\n        executeJavaScriptBundleEntryPointStart,\n        executeJavaScriptBundleEntryPointEnd,\n      } = NativePerformance.getReactNativeStartupTiming();\n      return new ReactNativeStartupTiming({\n        startTime,\n        endTime,\n        initializeRuntimeStart,\n        initializeRuntimeEnd,\n        executeJavaScriptBundleEntryPointStart,\n        executeJavaScriptBundleEntryPointEnd,\n      });\n    }\n    return new ReactNativeStartupTiming();\n  }\n\n  mark(\n    markName: string,\n    markOptions?: PerformanceMarkOptions,\n  ): PerformanceMark {\n    const mark = new PerformanceMark(markName, markOptions);\n\n    if (NativePerformance?.mark) {\n      NativePerformance.mark(markName, mark.startTime);\n    } else {\n      warnNoNativePerformance();\n    }\n\n    return mark;\n  }\n\n  clearMarks(markName?: string): void {\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n\n    NativePerformanceObserver?.clearEntries(\n      RawPerformanceEntryTypeValues.MARK,\n      markName,\n    );\n  }\n\n  measure(\n    measureName: string,\n    startMarkOrOptions?: string | PerformanceMeasureOptions,\n    endMark?: string,\n  ): PerformanceMeasure {\n    let options;\n    let startMarkName,\n      endMarkName = endMark,\n      duration,\n      startTime = 0,\n      endTime = 0;\n\n    if (typeof startMarkOrOptions === 'string') {\n      startMarkName = startMarkOrOptions;\n    } else if (startMarkOrOptions !== undefined) {\n      options = startMarkOrOptions;\n      if (endMark !== undefined) {\n        throw new TypeError(\n          \"Performance.measure: Can't have both options and endMark\",\n        );\n      }\n      if (options.start === undefined && options.end === undefined) {\n        throw new TypeError(\n          'Performance.measure: Must have at least one of start/end specified in options',\n        );\n      }\n      if (\n        options.start !== undefined &&\n        options.end !== undefined &&\n        options.duration !== undefined\n      ) {\n        throw new TypeError(\n          \"Performance.measure: Can't have both start/end and duration explicitly in options\",\n        );\n      }\n\n      if (typeof options.start === 'number') {\n        startTime = options.start;\n      } else {\n        startMarkName = options.start;\n      }\n\n      if (typeof options.end === 'number') {\n        endTime = options.end;\n      } else {\n        endMarkName = options.end;\n      }\n\n      duration = options.duration ?? duration;\n    }\n\n    const measure = new PerformanceMeasure(measureName, {\n      // FIXME(T196011255): this is incorrect, as we're only assigning the\n      // start/end if they're specified as a number, but not if they're\n      // specified as previous mark names.\n      startTime,\n      duration,\n    });\n\n    if (NativePerformance?.measure) {\n      NativePerformance.measure(\n        measureName,\n        startTime,\n        endTime,\n        duration,\n        startMarkName,\n        endMarkName,\n      );\n    } else {\n      warnNoNativePerformance();\n    }\n\n    return measure;\n  }\n\n  clearMeasures(measureName?: string): void {\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n\n    NativePerformanceObserver?.clearEntries(\n      RawPerformanceEntryTypeValues.MEASURE,\n      measureName,\n    );\n  }\n\n  /**\n   * Returns a double, measured in milliseconds.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\n   */\n  now(): DOMHighResTimeStamp {\n    return getCurrentTimeStamp();\n  }\n\n  /**\n   * An extension that allows to get back to JS all currently logged marks/measures\n   * (in our case, be it from JS or native), see\n   * https://www.w3.org/TR/performance-timeline/#extensions-to-the-performance-interface\n   */\n  getEntries(): PerformanceEntryList {\n    if (!NativePerformanceObserver?.getEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries().map(rawToPerformanceEntry);\n  }\n\n  getEntriesByType(entryType: PerformanceEntryType): PerformanceEntryList {\n    if (!ALWAYS_LOGGED_ENTRY_TYPES.includes(entryType)) {\n      console.warn(\n        `Performance.getEntriesByType: Only valid for ${JSON.stringify(\n          ALWAYS_LOGGED_ENTRY_TYPES,\n        )} entry types, got ${entryType}`,\n      );\n      return [];\n    }\n\n    if (!NativePerformanceObserver?.getEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries(\n      performanceEntryTypeToRaw(entryType),\n    ).map(rawToPerformanceEntry);\n  }\n\n  getEntriesByName(\n    entryName: string,\n    entryType?: PerformanceEntryType,\n  ): PerformanceEntryList {\n    if (\n      entryType !== undefined &&\n      !ALWAYS_LOGGED_ENTRY_TYPES.includes(entryType)\n    ) {\n      console.warn(\n        `Performance.getEntriesByName: Only valid for ${JSON.stringify(\n          ALWAYS_LOGGED_ENTRY_TYPES,\n        )} entry types, got ${entryType}`,\n      );\n      return [];\n    }\n\n    if (!NativePerformanceObserver?.getEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries(\n      entryType != null ? performanceEntryTypeToRaw(entryType) : undefined,\n      entryName,\n    ).map(rawToPerformanceEntry);\n  }\n}\n"],"mappings":"AAmBA,OAAOA,QAAQ,MAAM,0CAA0C;AAC/D,SAAQC,WAAW,QAAO,eAAe;AACzC,OAAOC,UAAU,MAAM,cAAc;AACrC,SAAQC,yBAAyB,QAAO,oBAAoB;AAC5D,SAAQC,+BAA+B,QAAO,uBAAuB;AACrE,SACEC,yBAAyB,EACzBC,qBAAqB,QAChB,uBAAuB;AAC9B,SAAQC,6BAA6B,QAAO,uBAAuB;AACnE,OAAOC,wBAAwB,MAAM,4BAA4B;AACjE,OAAOC,iBAAiB,MAAM,2BAA2B;AACzD,OAAOC,yBAAyB,MAAM,mCAAmC;AACzE,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,cAAc;AAOhE,MAAMC,mBAA8C,GAClDJ,iBAAiB,EAAEK,GAAG,IAAIC,MAAM,CAACC,oBAAoB,KAAK,MAAMC,IAAI,CAACH,GAAG,CAAC,CAAC,CAAC;AAM7E,IAAIJ,yBAAyB,EAAEQ,aAAa,EAAE;EAC5CR,yBAAyB,EAAEQ,aAAa,CACtCf,yBAAyB,CAACgB,GAAG,CAACd,yBAAyB,CAAC,EACxD,IACF,CAAC;AACH;AAEA,SAASe,uBAAuBA,CAAA,EAAG;EACjCpB,QAAQ,CACN,4BAA4B,EAC5B,8CACF,CAAC;AACH;AAcA,eAAe,MAAMqB,WAAW,CAAC;EAAAC,YAAA;IAAA,KAC/BC,WAAW,GAAgB,IAAItB,WAAW,CAAC,CAAC;EAAA;EAG5C,IAAIuB,MAAMA,CAAA,EAAe;IACvB,IAAIf,iBAAiB,EAAEgB,mBAAmB,EAAE;MAI1C,MAAMC,UAAU,GAAGjB,iBAAiB,CAACgB,mBAAmB,CAAC,CAAC;MAC1D,IAAIC,UAAU,CAACC,cAAc,CAAC,iBAAiB,CAAC,EAAE;QAEhD,MAAM;UACJC,eAAe,EAAEC,eAAe;UAChCC,qBAAqB,EAAEC;QACzB,CAAC,GAAGL,UAAU;QAEd,OAAO,IAAIxB,UAAU,CAAC;UACpB8B,eAAe,EAAE,IAAI;UACrBH,eAAe;UACfE;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QAEL,OAAO,IAAI7B,UAAU,CAAC,CAAC;MACzB;IACF;IAEA,OAAO,IAAIA,UAAU,CAAC,CAAC;EACzB;EAGA,IAAI+B,eAAeA,CAAA,EAA6B;IAC9C,IAAIxB,iBAAiB,EAAEyB,2BAA2B,EAAE;MAClD,MAAM;QACJC,SAAS;QACTC,OAAO;QACPC,sBAAsB;QACtBC,oBAAoB;QACpBC,sCAAsC;QACtCC;MACF,CAAC,GAAG/B,iBAAiB,CAACyB,2BAA2B,CAAC,CAAC;MACnD,OAAO,IAAI1B,wBAAwB,CAAC;QAClC2B,SAAS;QACTC,OAAO;QACPC,sBAAsB;QACtBC,oBAAoB;QACpBC,sCAAsC;QACtCC;MACF,CAAC,CAAC;IACJ;IACA,OAAO,IAAIhC,wBAAwB,CAAC,CAAC;EACvC;EAEAiC,IAAIA,CACFC,QAAgB,EAChBC,WAAoC,EACnB;IACjB,MAAMF,IAAI,GAAG,IAAI9B,eAAe,CAAC+B,QAAQ,EAAEC,WAAW,CAAC;IAEvD,IAAIlC,iBAAiB,EAAEgC,IAAI,EAAE;MAC3BhC,iBAAiB,CAACgC,IAAI,CAACC,QAAQ,EAAED,IAAI,CAACN,SAAS,CAAC;IAClD,CAAC,MAAM;MACLf,uBAAuB,CAAC,CAAC;IAC3B;IAEA,OAAOqB,IAAI;EACb;EAEAG,UAAUA,CAACF,QAAiB,EAAQ;IAClC,IAAI,CAAChC,yBAAyB,EAAEmC,YAAY,EAAE;MAC5CzC,+BAA+B,CAAC,CAAC;MACjC;IACF;IAEAM,yBAAyB,EAAEmC,YAAY,CACrCtC,6BAA6B,CAACuC,IAAI,EAClCJ,QACF,CAAC;EACH;EAEAK,OAAOA,CACLC,WAAmB,EACnBC,kBAAuD,EACvDC,OAAgB,EACI;IACpB,IAAIC,OAAO;IACX,IAAIC,aAAa;MACfC,WAAW,GAAGH,OAAO;MACrBI,QAAQ;MACRnB,SAAS,GAAG,CAAC;MACbC,OAAO,GAAG,CAAC;IAEb,IAAI,OAAOa,kBAAkB,KAAK,QAAQ,EAAE;MAC1CG,aAAa,GAAGH,kBAAkB;IACpC,CAAC,MAAM,IAAIA,kBAAkB,KAAKM,SAAS,EAAE;MAC3CJ,OAAO,GAAGF,kBAAkB;MAC5B,IAAIC,OAAO,KAAKK,SAAS,EAAE;QACzB,MAAM,IAAIC,SAAS,CACjB,0DACF,CAAC;MACH;MACA,IAAIL,OAAO,CAACM,KAAK,KAAKF,SAAS,IAAIJ,OAAO,CAACO,GAAG,KAAKH,SAAS,EAAE;QAC5D,MAAM,IAAIC,SAAS,CACjB,+EACF,CAAC;MACH;MACA,IACEL,OAAO,CAACM,KAAK,KAAKF,SAAS,IAC3BJ,OAAO,CAACO,GAAG,KAAKH,SAAS,IACzBJ,OAAO,CAACG,QAAQ,KAAKC,SAAS,EAC9B;QACA,MAAM,IAAIC,SAAS,CACjB,mFACF,CAAC;MACH;MAEA,IAAI,OAAOL,OAAO,CAACM,KAAK,KAAK,QAAQ,EAAE;QACrCtB,SAAS,GAAGgB,OAAO,CAACM,KAAK;MAC3B,CAAC,MAAM;QACLL,aAAa,GAAGD,OAAO,CAACM,KAAK;MAC/B;MAEA,IAAI,OAAON,OAAO,CAACO,GAAG,KAAK,QAAQ,EAAE;QACnCtB,OAAO,GAAGe,OAAO,CAACO,GAAG;MACvB,CAAC,MAAM;QACLL,WAAW,GAAGF,OAAO,CAACO,GAAG;MAC3B;MAEAJ,QAAQ,GAAGH,OAAO,CAACG,QAAQ,IAAIA,QAAQ;IACzC;IAEA,MAAMP,OAAO,GAAG,IAAInC,kBAAkB,CAACoC,WAAW,EAAE;MAIlDb,SAAS;MACTmB;IACF,CAAC,CAAC;IAEF,IAAI7C,iBAAiB,EAAEsC,OAAO,EAAE;MAC9BtC,iBAAiB,CAACsC,OAAO,CACvBC,WAAW,EACXb,SAAS,EACTC,OAAO,EACPkB,QAAQ,EACRF,aAAa,EACbC,WACF,CAAC;IACH,CAAC,MAAM;MACLjC,uBAAuB,CAAC,CAAC;IAC3B;IAEA,OAAO2B,OAAO;EAChB;EAEAY,aAAaA,CAACX,WAAoB,EAAQ;IACxC,IAAI,CAACtC,yBAAyB,EAAEmC,YAAY,EAAE;MAC5CzC,+BAA+B,CAAC,CAAC;MACjC;IACF;IAEAM,yBAAyB,EAAEmC,YAAY,CACrCtC,6BAA6B,CAACqD,OAAO,EACrCZ,WACF,CAAC;EACH;EAMAlC,GAAGA,CAAA,EAAwB;IACzB,OAAOD,mBAAmB,CAAC,CAAC;EAC9B;EAOAgD,UAAUA,CAAA,EAAyB;IACjC,IAAI,CAACnD,yBAAyB,EAAEmD,UAAU,EAAE;MAC1CzD,+BAA+B,CAAC,CAAC;MACjC,OAAO,EAAE;IACX;IACA,OAAOM,yBAAyB,CAACmD,UAAU,CAAC,CAAC,CAAC1C,GAAG,CAACb,qBAAqB,CAAC;EAC1E;EAEAwD,gBAAgBA,CAACC,SAA+B,EAAwB;IACtE,IAAI,CAAC5D,yBAAyB,CAAC6D,QAAQ,CAACD,SAAS,CAAC,EAAE;MAClDE,OAAO,CAACC,IAAI,CACV,gDAAgDC,IAAI,CAACC,SAAS,CAC5DjE,yBACF,CAAC,qBAAqB4D,SAAS,EACjC,CAAC;MACD,OAAO,EAAE;IACX;IAEA,IAAI,CAACrD,yBAAyB,EAAEmD,UAAU,EAAE;MAC1CzD,+BAA+B,CAAC,CAAC;MACjC,OAAO,EAAE;IACX;IACA,OAAOM,yBAAyB,CAACmD,UAAU,CACzCxD,yBAAyB,CAAC0D,SAAS,CACrC,CAAC,CAAC5C,GAAG,CAACb,qBAAqB,CAAC;EAC9B;EAEA+D,gBAAgBA,CACdC,SAAiB,EACjBP,SAAgC,EACV;IACtB,IACEA,SAAS,KAAKR,SAAS,IACvB,CAACpD,yBAAyB,CAAC6D,QAAQ,CAACD,SAAS,CAAC,EAC9C;MACAE,OAAO,CAACC,IAAI,CACV,gDAAgDC,IAAI,CAACC,SAAS,CAC5DjE,yBACF,CAAC,qBAAqB4D,SAAS,EACjC,CAAC;MACD,OAAO,EAAE;IACX;IAEA,IAAI,CAACrD,yBAAyB,EAAEmD,UAAU,EAAE;MAC1CzD,+BAA+B,CAAC,CAAC;MACjC,OAAO,EAAE;IACX;IACA,OAAOM,yBAAyB,CAACmD,UAAU,CACzCE,SAAS,IAAI,IAAI,GAAG1D,yBAAyB,CAAC0D,SAAS,CAAC,GAAGR,SAAS,EACpEe,SACF,CAAC,CAACnD,GAAG,CAACb,qBAAqB,CAAC;EAC9B;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"numColumns\", \"columnWrapperStyle\", \"removeClippedSubviews\", \"strictMode\"];\nvar _jsxFileName = \"F:\\\\MiniProject\\\\node_modules\\\\react-native\\\\Libraries\\\\Lists\\\\FlatList.js\";\nimport * as ReactNativeFeatureFlags from '../../src/private/featureflags/ReactNativeFeatureFlags';\nimport { VirtualizedList, keyExtractor as defaultKeyExtractor } from '@react-native/virtualized-lists';\nimport memoizeOne from 'memoize-one';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst View = require('../Components/View/View');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\nconst deepDiffer = require('../Utilities/differ/deepDiffer');\nconst Platform = require('../Utilities/Platform');\nconst invariant = require('invariant');\nconst React = require('react');\nfunction removeClippedSubviewsOrDefault(removeClippedSubviews) {\n  if (ReactNativeFeatureFlags.shouldUseRemoveClippedSubviewsAsDefaultOnIOS()) {\n    return removeClippedSubviews ?? true;\n  } else {\n    return removeClippedSubviews ?? Platform.OS === 'android';\n  }\n}\nfunction numColumnsOrDefault(numColumns) {\n  return numColumns ?? 1;\n}\nfunction isArrayLike(data) {\n  return typeof Object(data).length === 'number';\n}\nclass FlatList extends React.PureComponent {\n  scrollToEnd(params) {\n    if (this._listRef) {\n      this._listRef.scrollToEnd(params);\n    }\n  }\n  scrollToIndex(params) {\n    if (this._listRef) {\n      this._listRef.scrollToIndex(params);\n    }\n  }\n  scrollToItem(params) {\n    if (this._listRef) {\n      this._listRef.scrollToItem(params);\n    }\n  }\n  scrollToOffset(params) {\n    if (this._listRef) {\n      this._listRef.scrollToOffset(params);\n    }\n  }\n  recordInteraction() {\n    if (this._listRef) {\n      this._listRef.recordInteraction();\n    }\n  }\n  flashScrollIndicators() {\n    if (this._listRef) {\n      this._listRef.flashScrollIndicators();\n    }\n  }\n  getScrollResponder() {\n    if (this._listRef) {\n      return this._listRef.getScrollResponder();\n    }\n  }\n  getNativeScrollRef() {\n    if (this._listRef) {\n      return this._listRef.getScrollRef();\n    }\n  }\n  getScrollableNode() {\n    if (this._listRef) {\n      return this._listRef.getScrollableNode();\n    }\n  }\n  setNativeProps(props) {\n    if (this._listRef) {\n      this._listRef.setNativeProps(props);\n    }\n  }\n  constructor(_props) {\n    super(_props);\n    this._listRef = void 0;\n    this._virtualizedListPairs = [];\n    this._captureRef = ref => {\n      this._listRef = ref;\n    };\n    this._getItem = (data, index) => {\n      const numColumns = numColumnsOrDefault(this.props.numColumns);\n      if (numColumns > 1) {\n        const ret = [];\n        for (let kk = 0; kk < numColumns; kk++) {\n          const itemIndex = index * numColumns + kk;\n          if (itemIndex < data.length) {\n            const item = data[itemIndex];\n            ret.push(item);\n          }\n        }\n        return ret;\n      } else {\n        return data[index];\n      }\n    };\n    this._getItemCount = data => {\n      if (data != null && isArrayLike(data)) {\n        const numColumns = numColumnsOrDefault(this.props.numColumns);\n        return numColumns > 1 ? Math.ceil(data.length / numColumns) : data.length;\n      } else {\n        return 0;\n      }\n    };\n    this._keyExtractor = (items, index) => {\n      const numColumns = numColumnsOrDefault(this.props.numColumns);\n      const keyExtractor = this.props.keyExtractor ?? defaultKeyExtractor;\n      if (numColumns > 1) {\n        invariant(Array.isArray(items), 'FlatList: Encountered internal consistency error, expected each item to consist of an ' + 'array with 1-%s columns; instead, received a single item.', numColumns);\n        return items.map((item, kk) => keyExtractor(item, index * numColumns + kk)).join(':');\n      }\n      return keyExtractor(items, index);\n    };\n    this._renderer = (ListItemComponent, renderItem, columnWrapperStyle, numColumns, extraData) => {\n      const cols = numColumnsOrDefault(numColumns);\n      const render = props => {\n        if (ListItemComponent) {\n          return _jsxDEV(ListItemComponent, Object.assign({}, props), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 16\n          }, this);\n        } else if (renderItem) {\n          return renderItem(props);\n        } else {\n          return null;\n        }\n      };\n      const renderProp = info => {\n        if (cols > 1) {\n          const {\n            item,\n            index\n          } = info;\n          invariant(Array.isArray(item), 'Expected array of items with numColumns > 1');\n          return _jsxDEV(View, {\n            style: StyleSheet.compose(styles.row, columnWrapperStyle),\n            children: item.map((it, kk) => {\n              const element = render({\n                item: it,\n                index: index * cols + kk,\n                separators: info.separators\n              });\n              return element != null ? _jsxDEV(React.Fragment, {\n                children: element\n              }, kk, false, {\n                fileName: _jsxFileName,\n                lineNumber: 660,\n                columnNumber: 17\n              }, this) : null;\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 11\n          }, this);\n        } else {\n          return render(info);\n        }\n      };\n      return ListItemComponent ? {\n        ListItemComponent: renderProp\n      } : {\n        renderItem: renderProp\n      };\n    };\n    this._memoizedRenderer = memoizeOne(this._renderer);\n    this._checkProps(this.props);\n    if (this.props.viewabilityConfigCallbackPairs) {\n      this._virtualizedListPairs = this.props.viewabilityConfigCallbackPairs.map(pair => ({\n        viewabilityConfig: pair.viewabilityConfig,\n        onViewableItemsChanged: this._createOnViewableItemsChanged(pair.onViewableItemsChanged)\n      }));\n    } else if (this.props.onViewableItemsChanged) {\n      this._virtualizedListPairs.push({\n        viewabilityConfig: this.props.viewabilityConfig,\n        onViewableItemsChanged: this._createOnViewableItemsChanged((...args) => {\n          invariant(this.props.onViewableItemsChanged, 'Changing the nullability of onViewableItemsChanged is not supported. ' + 'Once a function or null is supplied that cannot be changed.');\n          return this.props.onViewableItemsChanged(...args);\n        })\n      });\n    }\n  }\n  componentDidUpdate(prevProps) {\n    invariant(prevProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');\n    invariant(prevProps.onViewableItemsChanged == null === (this.props.onViewableItemsChanged == null), 'Changing onViewableItemsChanged nullability on the fly is not supported');\n    invariant(!deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig), 'Changing viewabilityConfig on the fly is not supported');\n    invariant(prevProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');\n    this._checkProps(this.props);\n  }\n  _checkProps(props) {\n    const {\n      getItem,\n      getItemCount,\n      horizontal,\n      columnWrapperStyle,\n      onViewableItemsChanged,\n      viewabilityConfigCallbackPairs\n    } = props;\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');\n    if (numColumns > 1) {\n      invariant(!horizontal, 'numColumns does not support horizontal.');\n    } else {\n      invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');\n    }\n    invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), 'FlatList does not support setting both onViewableItemsChanged and ' + 'viewabilityConfigCallbackPairs.');\n  }\n  _pushMultiColumnViewable(arr, v) {\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    const keyExtractor = this.props.keyExtractor ?? defaultKeyExtractor;\n    v.item.forEach((item, ii) => {\n      invariant(v.index != null, 'Missing index!');\n      const index = v.index * numColumns + ii;\n      arr.push(Object.assign({}, v, {\n        item,\n        key: keyExtractor(item, index),\n        index\n      }));\n    });\n  }\n  _createOnViewableItemsChanged(onViewableItemsChanged) {\n    return info => {\n      const numColumns = numColumnsOrDefault(this.props.numColumns);\n      if (onViewableItemsChanged) {\n        if (numColumns > 1) {\n          const changed = [];\n          const viewableItems = [];\n          info.viewableItems.forEach(v => this._pushMultiColumnViewable(viewableItems, v));\n          info.changed.forEach(v => this._pushMultiColumnViewable(changed, v));\n          onViewableItemsChanged({\n            viewableItems,\n            changed\n          });\n        } else {\n          onViewableItemsChanged(info);\n        }\n      }\n    };\n  }\n  render() {\n    const _this$props = this.props,\n      {\n        numColumns,\n        columnWrapperStyle,\n        removeClippedSubviews: _removeClippedSubviews,\n        strictMode = false\n      } = _this$props,\n      restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n    const renderer = strictMode ? this._memoizedRenderer : this._renderer;\n    return _jsxDEV(VirtualizedList, Object.assign({}, restProps, {\n      getItem: this._getItem,\n      getItemCount: this._getItemCount,\n      keyExtractor: this._keyExtractor,\n      ref: this._captureRef,\n      viewabilityConfigCallbackPairs: this._virtualizedListPairs,\n      removeClippedSubviews: removeClippedSubviewsOrDefault(_removeClippedSubviews)\n    }, renderer(this.props.ListItemComponent, this.props.renderItem, columnWrapperStyle, numColumns, this.props.extraData)), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 7\n    }, this);\n  }\n}\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  }\n});\nmodule.exports = FlatList;","map":{"version":3,"names":["ReactNativeFeatureFlags","VirtualizedList","keyExtractor","defaultKeyExtractor","memoizeOne","jsxDEV","_jsxDEV","View","require","StyleSheet","deepDiffer","Platform","invariant","React","removeClippedSubviewsOrDefault","removeClippedSubviews","shouldUseRemoveClippedSubviewsAsDefaultOnIOS","OS","numColumnsOrDefault","numColumns","isArrayLike","data","Object","length","FlatList","PureComponent","scrollToEnd","params","_listRef","scrollToIndex","scrollToItem","scrollToOffset","recordInteraction","flashScrollIndicators","getScrollResponder","getNativeScrollRef","getScrollRef","getScrollableNode","setNativeProps","props","constructor","_virtualizedListPairs","_captureRef","ref","_getItem","index","ret","kk","itemIndex","item","push","_getItemCount","Math","ceil","_keyExtractor","items","Array","isArray","map","join","_renderer","ListItemComponent","renderItem","columnWrapperStyle","extraData","cols","render","assign","fileName","_jsxFileName","lineNumber","columnNumber","renderProp","info","style","compose","styles","row","children","it","element","separators","Fragment","_memoizedRenderer","_checkProps","viewabilityConfigCallbackPairs","pair","viewabilityConfig","onViewableItemsChanged","_createOnViewableItemsChanged","args","componentDidUpdate","prevProps","getItem","getItemCount","horizontal","_pushMultiColumnViewable","arr","v","forEach","ii","key","changed","viewableItems","_this$props","_removeClippedSubviews","strictMode","restProps","_objectWithoutPropertiesLoose","_excluded","renderer","create","flexDirection","module","exports"],"sources":["F:/MiniProject/node_modules/react-native/Libraries/Lists/FlatList.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport typeof ScrollViewNativeComponent from '../Components/ScrollView/ScrollViewNativeComponent';\nimport type {ViewStyleProp} from '../StyleSheet/StyleSheet';\nimport type {\n  RenderItemProps,\n  RenderItemType,\n  ViewabilityConfigCallbackPair,\n  ViewToken,\n} from '@react-native/virtualized-lists';\n\nimport * as ReactNativeFeatureFlags from '../../src/private/featureflags/ReactNativeFeatureFlags';\nimport {type ScrollResponderType} from '../Components/ScrollView/ScrollView';\nimport {\n  VirtualizedList,\n  keyExtractor as defaultKeyExtractor,\n} from '@react-native/virtualized-lists';\nimport memoizeOne from 'memoize-one';\n\nconst View = require('../Components/View/View');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\nconst deepDiffer = require('../Utilities/differ/deepDiffer');\nconst Platform = require('../Utilities/Platform');\nconst invariant = require('invariant');\nconst React = require('react');\n\ntype RequiredProps<ItemT> = {|\n  /**\n   * An array (or array-like list) of items to render. Other data types can be\n   * used by targeting VirtualizedList directly.\n   */\n  data: ?$ReadOnly<$ArrayLike<ItemT>>,\n|};\ntype OptionalProps<ItemT> = {|\n  /**\n   * Takes an item from `data` and renders it into the list. Example usage:\n   *\n   *     <FlatList\n   *       ItemSeparatorComponent={Platform.OS !== 'android' && ({highlighted}) => (\n   *         <View style={[style.separator, highlighted && {marginLeft: 0}]} />\n   *       )}\n   *       data={[{title: 'Title Text', key: 'item1'}]}\n   *       renderItem={({item, separators}) => (\n   *         <TouchableHighlight\n   *           onPress={() => this._onPress(item)}\n   *           onShowUnderlay={separators.highlight}\n   *           onHideUnderlay={separators.unhighlight}>\n   *           <View style={{backgroundColor: 'white'}}>\n   *             <Text>{item.title}</Text>\n   *           </View>\n   *         </TouchableHighlight>\n   *       )}\n   *     />\n   *\n   * Provides additional metadata like `index` if you need it, as well as a more generic\n   * `separators.updateProps` function which let's you set whatever props you want to change the\n   * rendering of either the leading separator or trailing separator in case the more common\n   * `highlight` and `unhighlight` (which set the `highlighted: boolean` prop) are insufficient for\n   * your use-case.\n   */\n  renderItem?: ?RenderItemType<ItemT>,\n\n  /**\n   * Optional custom style for multi-item rows generated when numColumns > 1.\n   */\n  columnWrapperStyle?: ViewStyleProp,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * `getItemLayout` is an optional optimizations that let us skip measurement of dynamic content if\n   * you know the height of items a priori. `getItemLayout` is the most efficient, and is easy to\n   * use if you have fixed height items, for example:\n   *\n   *     getItemLayout={(data, index) => (\n   *       {length: ITEM_HEIGHT, offset: ITEM_HEIGHT * index, index}\n   *     )}\n   *\n   * Adding `getItemLayout` can be a great performance boost for lists of several hundred items.\n   * Remember to include separator length (height or width) in your offset calculation if you\n   * specify `ItemSeparatorComponent`.\n   */\n  getItemLayout?: (\n    data: ?$ReadOnly<$ArrayLike<ItemT>>,\n    index: number,\n  ) => {\n    length: number,\n    offset: number,\n    index: number,\n    ...\n  },\n  /**\n   * If true, renders items next to each other horizontally instead of stacked vertically.\n   */\n  horizontal?: ?boolean,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender?: ?number,\n  /**\n   * Instead of starting at the top with the first item, start at `initialScrollIndex`. This\n   * disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items\n   * always rendered and immediately renders the items starting at this initial index. Requires\n   * `getItemLayout` to be implemented.\n   */\n  initialScrollIndex?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  /**\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\n   * and as the react key to track item re-ordering. The default extractor checks `item.key`, then\n   * falls back to using the index, like React does.\n   */\n  keyExtractor?: ?(item: ItemT, index: number) => string,\n  /**\n   * Multiple columns can only be rendered with `horizontal={false}` and will zig-zag like a\n   * `flexWrap` layout. Items should all be the same height - masonry layouts are not supported.\n   *\n   * The default value is 1.\n   */\n  numColumns?: number,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   *\n   * The default value is true for Android.\n   */\n  removeClippedSubviews?: boolean,\n  /**\n   * See `ScrollView` for flow type and further documentation.\n   */\n  fadingEdgeLength?: ?number,\n  /**\n   * Enable an optimization to memoize the item renderer to prevent unnecessary rerenders.\n   */\n  strictMode?: boolean,\n|};\n\n/**\n * Default Props Helper Functions\n * Use the following helper functions for default values\n */\n\n// removeClippedSubviewsOrDefault(this.props.removeClippedSubviews)\nfunction removeClippedSubviewsOrDefault(removeClippedSubviews: ?boolean) {\n  if (ReactNativeFeatureFlags.shouldUseRemoveClippedSubviewsAsDefaultOnIOS()) {\n    return removeClippedSubviews ?? true;\n  } else {\n    return removeClippedSubviews ?? Platform.OS === 'android';\n  }\n}\n\n// numColumnsOrDefault(this.props.numColumns)\nfunction numColumnsOrDefault(numColumns: ?number) {\n  return numColumns ?? 1;\n}\n\nfunction isArrayLike(data: mixed): boolean {\n  // $FlowExpectedError[incompatible-use]\n  return typeof Object(data).length === 'number';\n}\n\ntype FlatListProps<ItemT> = {|\n  ...RequiredProps<ItemT>,\n  ...OptionalProps<ItemT>,\n|};\n\ntype VirtualizedListProps = React.ElementConfig<typeof VirtualizedList>;\n\nexport type Props<ItemT> = {\n  ...$Diff<\n    VirtualizedListProps,\n    {\n      getItem: $PropertyType<VirtualizedListProps, 'getItem'>,\n      getItemCount: $PropertyType<VirtualizedListProps, 'getItemCount'>,\n      getItemLayout: $PropertyType<VirtualizedListProps, 'getItemLayout'>,\n      renderItem: $PropertyType<VirtualizedListProps, 'renderItem'>,\n      keyExtractor: $PropertyType<VirtualizedListProps, 'keyExtractor'>,\n      ...\n    },\n  >,\n  ...FlatListProps<ItemT>,\n  ...\n};\n\n/**\n * A performant interface for rendering simple, flat lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Optional horizontal mode.\n *  - Configurable viewability callbacks.\n *  - Header support.\n *  - Footer support.\n *  - Separator support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *  - ScrollToIndex support.\n *\n * If you need section support, use [`<SectionList>`](docs/sectionlist.html).\n *\n * Minimal Example:\n *\n *     <FlatList\n *       data={[{key: 'a'}, {key: 'b'}]}\n *       renderItem={({item}) => <Text>{item.key}</Text>}\n *     />\n *\n * More complex, multi-select example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.\n *\n * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will\n *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even\n *   if the components rendered in `MyListItem` did not have such optimizations.\n * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render\n *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it\n *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will\n *   not show any changes.\n * - `keyExtractor` tells the list to use the `id`s for the react keys instead of the default `key` property.\n *\n *\n *     class MyListItem extends React.PureComponent {\n *       _onPress = () => {\n *         this.props.onPressItem(this.props.id);\n *       };\n *\n *       render() {\n *         const textColor = this.props.selected ? \"red\" : \"black\";\n *         return (\n *           <TouchableOpacity onPress={this._onPress}>\n *             <View>\n *               <Text style={{ color: textColor }}>\n *                 {this.props.title}\n *               </Text>\n *             </View>\n *           </TouchableOpacity>\n *         );\n *       }\n *     }\n *\n *     class MultiSelectList extends React.PureComponent {\n *       state = {selected: (new Map(): Map<string, boolean>)};\n *\n *       _keyExtractor = (item, index) => item.id;\n *\n *       _onPressItem = (id: string) => {\n *         // updater functions are preferred for transactional updates\n *         this.setState((state) => {\n *           // copy the map rather than modifying state.\n *           const selected = new Map(state.selected);\n *           selected.set(id, !selected.get(id)); // toggle\n *           return {selected};\n *         });\n *       };\n *\n *       _renderItem = ({item}) => (\n *         <MyListItem\n *           id={item.id}\n *           onPressItem={this._onPressItem}\n *           selected={!!this.state.selected.get(item.id)}\n *           title={item.title}\n *         />\n *       );\n *\n *       render() {\n *         return (\n *           <FlatList\n *             data={this.props.data}\n *             extraData={this.state}\n *             keyExtractor={this._keyExtractor}\n *             renderItem={this._renderItem}\n *           />\n *         );\n *       }\n *     }\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\n * here, along with the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n * Also inherits [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.\n */\nclass FlatList<ItemT> extends React.PureComponent<Props<ItemT>, void> {\n  /**\n   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.\n   */\n  scrollToEnd(params?: ?{animated?: ?boolean, ...}) {\n    if (this._listRef) {\n      this._listRef.scrollToEnd(params);\n    }\n  }\n\n  /**\n   * Scrolls to the item at the specified index such that it is positioned in the viewable area\n   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the\n   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewOffset?: number,\n    viewPosition?: number,\n    ...\n  }) {\n    if (this._listRef) {\n      this._listRef.scrollToIndex(params);\n    }\n  }\n\n  /**\n   * Requires linear scan through data - use `scrollToIndex` instead if possible.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: ItemT,\n    viewOffset?: number,\n    viewPosition?: number,\n    ...\n  }) {\n    if (this._listRef) {\n      this._listRef.scrollToItem(params);\n    }\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList\n   */\n  scrollToOffset(params: {animated?: ?boolean, offset: number, ...}) {\n    if (this._listRef) {\n      this._listRef.scrollToOffset(params);\n    }\n  }\n\n  /**\n   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n   * taps on items or by navigation actions.\n   */\n  recordInteraction() {\n    if (this._listRef) {\n      this._listRef.recordInteraction();\n    }\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators() {\n    if (this._listRef) {\n      this._listRef.flashScrollIndicators();\n    }\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n  getScrollResponder(): ?ScrollResponderType {\n    if (this._listRef) {\n      return this._listRef.getScrollResponder();\n    }\n  }\n\n  /**\n   * Provides a reference to the underlying host component\n   */\n  getNativeScrollRef():\n    | ?React.ElementRef<typeof View>\n    | ?React.ElementRef<ScrollViewNativeComponent> {\n    if (this._listRef) {\n      /* $FlowFixMe[incompatible-return] Suppresses errors found when fixing\n       * TextInput typing */\n      return this._listRef.getScrollRef();\n    }\n  }\n\n  getScrollableNode(): any {\n    if (this._listRef) {\n      return this._listRef.getScrollableNode();\n    }\n  }\n\n  setNativeProps(props: {[string]: mixed, ...}) {\n    if (this._listRef) {\n      this._listRef.setNativeProps(props);\n    }\n  }\n\n  constructor(props: Props<ItemT>) {\n    super(props);\n    this._checkProps(this.props);\n    if (this.props.viewabilityConfigCallbackPairs) {\n      this._virtualizedListPairs =\n        this.props.viewabilityConfigCallbackPairs.map(pair => ({\n          viewabilityConfig: pair.viewabilityConfig,\n          onViewableItemsChanged: this._createOnViewableItemsChanged(\n            pair.onViewableItemsChanged,\n          ),\n        }));\n    } else if (this.props.onViewableItemsChanged) {\n      this._virtualizedListPairs.push({\n        /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n         * comment suppresses an error found when Flow v0.63 was deployed. To\n         * see the error delete this comment and run Flow. */\n        viewabilityConfig: this.props.viewabilityConfig,\n        onViewableItemsChanged: this._createOnViewableItemsChanged(\n          // NOTE: we use a wrapper function to allow the actual callback to change\n          // while still keeping the function provided to native to be stable\n          (...args) => {\n            invariant(\n              this.props.onViewableItemsChanged,\n              'Changing the nullability of onViewableItemsChanged is not supported. ' +\n                'Once a function or null is supplied that cannot be changed.',\n            );\n            return this.props.onViewableItemsChanged(...args);\n          },\n        ),\n      });\n    }\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  componentDidUpdate(prevProps: Props<ItemT>) {\n    invariant(\n      prevProps.numColumns === this.props.numColumns,\n      'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' +\n        'changing the number of columns to force a fresh render of the component.',\n    );\n    invariant(\n      (prevProps.onViewableItemsChanged == null) ===\n        (this.props.onViewableItemsChanged == null),\n      'Changing onViewableItemsChanged nullability on the fly is not supported',\n    );\n    invariant(\n      !deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig),\n      'Changing viewabilityConfig on the fly is not supported',\n    );\n    invariant(\n      prevProps.viewabilityConfigCallbackPairs ===\n        this.props.viewabilityConfigCallbackPairs,\n      'Changing viewabilityConfigCallbackPairs on the fly is not supported',\n    );\n\n    this._checkProps(this.props);\n  }\n\n  _listRef: ?React.ElementRef<typeof VirtualizedList>;\n  _virtualizedListPairs: Array<ViewabilityConfigCallbackPair> = [];\n\n  _captureRef = (ref: ?React.ElementRef<typeof VirtualizedList>) => {\n    this._listRef = ref;\n  };\n\n  // $FlowFixMe[missing-local-annot]\n  _checkProps(props: Props<ItemT>) {\n    const {\n      // $FlowFixMe[prop-missing] this prop doesn't exist, is only used for an invariant\n      getItem,\n      // $FlowFixMe[prop-missing] this prop doesn't exist, is only used for an invariant\n      getItemCount,\n      horizontal,\n      columnWrapperStyle,\n      onViewableItemsChanged,\n      viewabilityConfigCallbackPairs,\n    } = props;\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    invariant(\n      !getItem && !getItemCount,\n      'FlatList does not support custom data formats.',\n    );\n    if (numColumns > 1) {\n      invariant(!horizontal, 'numColumns does not support horizontal.');\n    } else {\n      invariant(\n        !columnWrapperStyle,\n        'columnWrapperStyle not supported for single column lists',\n      );\n    }\n    invariant(\n      !(onViewableItemsChanged && viewabilityConfigCallbackPairs),\n      'FlatList does not support setting both onViewableItemsChanged and ' +\n        'viewabilityConfigCallbackPairs.',\n    );\n  }\n\n  _getItem = (\n    data: $ArrayLike<ItemT>,\n    index: number,\n  ): ?(ItemT | $ReadOnlyArray<ItemT>) => {\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    if (numColumns > 1) {\n      const ret = [];\n      for (let kk = 0; kk < numColumns; kk++) {\n        const itemIndex = index * numColumns + kk;\n        if (itemIndex < data.length) {\n          const item = data[itemIndex];\n          ret.push(item);\n        }\n      }\n      return ret;\n    } else {\n      return data[index];\n    }\n  };\n\n  _getItemCount = (data: ?$ArrayLike<ItemT>): number => {\n    // Legacy behavior of FlatList was to forward \"undefined\" length if invalid\n    // data like a non-arraylike object is passed. VirtualizedList would then\n    // coerce this, and the math would work out to no-op. For compatibility, if\n    // invalid data is passed, we tell VirtualizedList there are zero items\n    // available to prevent it from trying to read from the invalid data\n    // (without propagating invalidly typed data).\n    if (data != null && isArrayLike(data)) {\n      const numColumns = numColumnsOrDefault(this.props.numColumns);\n      return numColumns > 1 ? Math.ceil(data.length / numColumns) : data.length;\n    } else {\n      return 0;\n    }\n  };\n\n  _keyExtractor = (items: ItemT | Array<ItemT>, index: number): string => {\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    const keyExtractor = this.props.keyExtractor ?? defaultKeyExtractor;\n\n    if (numColumns > 1) {\n      invariant(\n        Array.isArray(items),\n        'FlatList: Encountered internal consistency error, expected each item to consist of an ' +\n          'array with 1-%s columns; instead, received a single item.',\n        numColumns,\n      );\n      return items\n        .map((item, kk) =>\n          keyExtractor(((item: $FlowFixMe): ItemT), index * numColumns + kk),\n        )\n        .join(':');\n    }\n\n    // $FlowFixMe[incompatible-call] Can't call keyExtractor with an array\n    return keyExtractor(items, index);\n  };\n\n  _pushMultiColumnViewable(arr: Array<ViewToken>, v: ViewToken): void {\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    const keyExtractor = this.props.keyExtractor ?? defaultKeyExtractor;\n    v.item.forEach((item, ii) => {\n      invariant(v.index != null, 'Missing index!');\n      const index = v.index * numColumns + ii;\n      arr.push({...v, item, key: keyExtractor(item, index), index});\n    });\n  }\n\n  _createOnViewableItemsChanged(\n    onViewableItemsChanged: ?(info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n      ...\n    }) => void,\n    // $FlowFixMe[missing-local-annot]\n  ) {\n    return (info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n      ...\n    }) => {\n      const numColumns = numColumnsOrDefault(this.props.numColumns);\n      if (onViewableItemsChanged) {\n        if (numColumns > 1) {\n          const changed: Array<ViewToken> = [];\n          const viewableItems: Array<ViewToken> = [];\n          info.viewableItems.forEach(v =>\n            this._pushMultiColumnViewable(viewableItems, v),\n          );\n          info.changed.forEach(v => this._pushMultiColumnViewable(changed, v));\n          onViewableItemsChanged({viewableItems, changed});\n        } else {\n          onViewableItemsChanged(info);\n        }\n      }\n    };\n  }\n\n  _renderer = (\n    ListItemComponent: ?(React.ComponentType<any> | React.MixedElement),\n    renderItem: ?RenderItemType<ItemT>,\n    columnWrapperStyle: ?ViewStyleProp,\n    numColumns: ?number,\n    extraData: ?any,\n    // $FlowFixMe[missing-local-annot]\n  ) => {\n    const cols = numColumnsOrDefault(numColumns);\n\n    const render = (props: RenderItemProps<ItemT>): React.Node => {\n      if (ListItemComponent) {\n        // $FlowFixMe[not-a-component] Component isn't valid\n        // $FlowFixMe[incompatible-type-arg] Component isn't valid\n        // $FlowFixMe[incompatible-return] Component isn't valid\n        return <ListItemComponent {...props} />;\n      } else if (renderItem) {\n        // $FlowFixMe[incompatible-call]\n        return renderItem(props);\n      } else {\n        return null;\n      }\n    };\n\n    const renderProp = (info: RenderItemProps<ItemT>) => {\n      if (cols > 1) {\n        const {item, index} = info;\n        invariant(\n          Array.isArray(item),\n          'Expected array of items with numColumns > 1',\n        );\n        return (\n          <View style={StyleSheet.compose(styles.row, columnWrapperStyle)}>\n            {item.map((it, kk) => {\n              const element = render({\n                // $FlowFixMe[incompatible-call]\n                item: it,\n                index: index * cols + kk,\n                separators: info.separators,\n              });\n              return element != null ? (\n                <React.Fragment key={kk}>{element}</React.Fragment>\n              ) : null;\n            })}\n          </View>\n        );\n      } else {\n        return render(info);\n      }\n    };\n\n    return ListItemComponent\n      ? {ListItemComponent: renderProp}\n      : {renderItem: renderProp};\n  };\n\n  // $FlowFixMe[missing-local-annot]\n  _memoizedRenderer = memoizeOne(this._renderer);\n\n  render(): React.Node {\n    const {\n      numColumns,\n      columnWrapperStyle,\n      removeClippedSubviews: _removeClippedSubviews,\n      strictMode = false,\n      ...restProps\n    } = this.props;\n\n    const renderer = strictMode ? this._memoizedRenderer : this._renderer;\n\n    return (\n      // $FlowFixMe[incompatible-exact] - `restProps` (`Props`) is inexact.\n      <VirtualizedList\n        {...restProps}\n        getItem={this._getItem}\n        getItemCount={this._getItemCount}\n        keyExtractor={this._keyExtractor}\n        ref={this._captureRef}\n        viewabilityConfigCallbackPairs={this._virtualizedListPairs}\n        removeClippedSubviews={removeClippedSubviewsOrDefault(\n          _removeClippedSubviews,\n        )}\n        {...renderer(\n          this.props.ListItemComponent,\n          this.props.renderItem,\n          columnWrapperStyle,\n          numColumns,\n          this.props.extraData,\n        )}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {flexDirection: 'row'},\n});\n\nmodule.exports = FlatList;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"module","externalDependencies":[]}
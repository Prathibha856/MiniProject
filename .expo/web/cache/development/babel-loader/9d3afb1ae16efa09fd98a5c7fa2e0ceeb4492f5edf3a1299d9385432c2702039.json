{"ast":null,"code":"import * as ReactNativeFeatureFlags from '../featureflags/ReactNativeFeatureFlags';\nimport NativeEventEmitter from '../../../Libraries/EventEmitter/NativeEventEmitter';\nimport RCTDeviceEventEmitter from '../../../Libraries/EventEmitter/RCTDeviceEventEmitter';\nimport Platform from '../../../Libraries/Utilities/Platform';\nimport NativeAnimatedNonTurboModule from '../../../Libraries/Animated/NativeAnimatedModule';\nimport NativeAnimatedTurboModule from '../../../Libraries/Animated/NativeAnimatedTurboModule';\nimport invariant from 'invariant';\nimport nullthrows from 'nullthrows';\nconst NativeAnimatedModule = NativeAnimatedNonTurboModule ?? NativeAnimatedTurboModule;\nlet __nativeAnimatedNodeTagCount = 1;\nlet __nativeAnimationIdCount = 1;\nlet nativeEventEmitter;\nlet waitingForQueuedOperations = new Set();\nlet queueOperations = false;\nlet queue = [];\nlet singleOpQueue = [];\nconst isSingleOpBatching = Platform.OS === 'android' && NativeAnimatedModule?.queueAndExecuteBatchedOperations != null && ReactNativeFeatureFlags.animatedShouldUseSingleOp();\nlet flushQueueTimeout = null;\nconst eventListenerGetValueCallbacks = {};\nconst eventListenerAnimationFinishedCallbacks = {};\nlet globalEventEmitterGetValueListener = null;\nlet globalEventEmitterAnimationFinishedListener = null;\nfunction createNativeOperations() {\n  const methodNames = ['createAnimatedNode', 'updateAnimatedNodeConfig', 'getValue', 'startListeningToAnimatedNodeValue', 'stopListeningToAnimatedNodeValue', 'connectAnimatedNodes', 'disconnectAnimatedNodes', 'startAnimatingNode', 'stopAnimation', 'setAnimatedNodeValue', 'setAnimatedNodeOffset', 'flattenAnimatedNodeOffset', 'extractAnimatedNodeOffset', 'connectAnimatedNodeToView', 'disconnectAnimatedNodeFromView', 'restoreDefaultValues', 'dropAnimatedNode', 'addAnimatedEventToView', 'removeAnimatedEventFromView', 'addListener', 'removeListener'];\n  const nativeOperations = {};\n  if (isSingleOpBatching) {\n    for (let ii = 0, length = methodNames.length; ii < length; ii++) {\n      const methodName = methodNames[ii];\n      const operationID = ii + 1;\n      nativeOperations[methodName] = (...args) => {\n        singleOpQueue.push(operationID, ...args);\n      };\n    }\n  } else {\n    for (let ii = 0, length = methodNames.length; ii < length; ii++) {\n      const methodName = methodNames[ii];\n      nativeOperations[methodName] = (...args) => {\n        const method = nullthrows(NativeAnimatedModule)[methodName];\n        if (queueOperations || queue.length !== 0) {\n          queue.push(() => method(...args));\n        } else {\n          method(...args);\n        }\n      };\n    }\n  }\n  return nativeOperations;\n}\nconst NativeOperations = createNativeOperations();\nconst API = {\n  getValue: isSingleOpBatching ? (tag, saveValueCallback) => {\n    if (saveValueCallback) {\n      eventListenerGetValueCallbacks[tag] = saveValueCallback;\n    }\n    NativeOperations.getValue(tag);\n  } : (tag, saveValueCallback) => {\n    NativeOperations.getValue(tag, saveValueCallback);\n  },\n  setWaitingForIdentifier(id) {\n    waitingForQueuedOperations.add(id);\n    queueOperations = true;\n    if (ReactNativeFeatureFlags.animatedShouldDebounceQueueFlush() && flushQueueTimeout) {\n      clearTimeout(flushQueueTimeout);\n    }\n  },\n  unsetWaitingForIdentifier(id) {\n    waitingForQueuedOperations.delete(id);\n    if (waitingForQueuedOperations.size === 0) {\n      queueOperations = false;\n      API.disableQueue();\n    }\n  },\n  disableQueue() {\n    invariant(NativeAnimatedModule, 'Native animated module is not available');\n    if (ReactNativeFeatureFlags.animatedShouldDebounceQueueFlush()) {\n      const prevTimeout = flushQueueTimeout;\n      clearImmediate(prevTimeout);\n      flushQueueTimeout = setImmediate(API.flushQueue);\n    } else {\n      API.flushQueue();\n    }\n  },\n  flushQueue: isSingleOpBatching ? () => {\n    invariant(NativeAnimatedModule || process.env.NODE_ENV === 'test', 'Native animated module is not available');\n    flushQueueTimeout = null;\n    if (singleOpQueue.length === 0) {\n      return;\n    }\n    ensureGlobalEventEmitterListeners();\n    NativeAnimatedModule?.queueAndExecuteBatchedOperations?.(singleOpQueue);\n    singleOpQueue.length = 0;\n  } : () => {\n    invariant(NativeAnimatedModule || process.env.NODE_ENV === 'test', 'Native animated module is not available');\n    flushQueueTimeout = null;\n    if (queue.length === 0) {\n      return;\n    }\n    if (Platform.OS === 'android') {\n      NativeAnimatedModule?.startOperationBatch?.();\n    }\n    for (let q = 0, l = queue.length; q < l; q++) {\n      queue[q]();\n    }\n    queue.length = 0;\n    if (Platform.OS === 'android') {\n      NativeAnimatedModule?.finishOperationBatch?.();\n    }\n  },\n  createAnimatedNode(tag, config) {\n    NativeOperations.createAnimatedNode(tag, config);\n  },\n  updateAnimatedNodeConfig(tag, config) {\n    NativeOperations.updateAnimatedNodeConfig?.(tag, config);\n  },\n  startListeningToAnimatedNodeValue(tag) {\n    NativeOperations.startListeningToAnimatedNodeValue(tag);\n  },\n  stopListeningToAnimatedNodeValue(tag) {\n    NativeOperations.stopListeningToAnimatedNodeValue(tag);\n  },\n  connectAnimatedNodes(parentTag, childTag) {\n    NativeOperations.connectAnimatedNodes(parentTag, childTag);\n  },\n  disconnectAnimatedNodes(parentTag, childTag) {\n    NativeOperations.disconnectAnimatedNodes(parentTag, childTag);\n  },\n  startAnimatingNode: isSingleOpBatching ? (animationId, nodeTag, config, endCallback) => {\n    if (endCallback) {\n      eventListenerAnimationFinishedCallbacks[animationId] = endCallback;\n    }\n    NativeOperations.startAnimatingNode(animationId, nodeTag, config);\n  } : (animationId, nodeTag, config, endCallback) => {\n    NativeOperations.startAnimatingNode(animationId, nodeTag, config, endCallback);\n  },\n  stopAnimation(animationId) {\n    NativeOperations.stopAnimation(animationId);\n  },\n  setAnimatedNodeValue(nodeTag, value) {\n    NativeOperations.setAnimatedNodeValue(nodeTag, value);\n  },\n  setAnimatedNodeOffset(nodeTag, offset) {\n    NativeOperations.setAnimatedNodeOffset(nodeTag, offset);\n  },\n  flattenAnimatedNodeOffset(nodeTag) {\n    NativeOperations.flattenAnimatedNodeOffset(nodeTag);\n  },\n  extractAnimatedNodeOffset(nodeTag) {\n    NativeOperations.extractAnimatedNodeOffset(nodeTag);\n  },\n  connectAnimatedNodeToView(nodeTag, viewTag) {\n    NativeOperations.connectAnimatedNodeToView(nodeTag, viewTag);\n  },\n  disconnectAnimatedNodeFromView(nodeTag, viewTag) {\n    NativeOperations.disconnectAnimatedNodeFromView(nodeTag, viewTag);\n  },\n  restoreDefaultValues(nodeTag) {\n    NativeOperations.restoreDefaultValues?.(nodeTag);\n  },\n  dropAnimatedNode(tag) {\n    NativeOperations.dropAnimatedNode(tag);\n  },\n  addAnimatedEventToView(viewTag, eventName, eventMapping) {\n    NativeOperations.addAnimatedEventToView(viewTag, eventName, eventMapping);\n  },\n  removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {\n    NativeOperations.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);\n  }\n};\nfunction ensureGlobalEventEmitterListeners() {\n  if (globalEventEmitterGetValueListener && globalEventEmitterAnimationFinishedListener) {\n    return;\n  }\n  globalEventEmitterGetValueListener = RCTDeviceEventEmitter.addListener('onNativeAnimatedModuleGetValue', params => {\n    const {\n      tag\n    } = params;\n    const callback = eventListenerGetValueCallbacks[tag];\n    if (!callback) {\n      return;\n    }\n    callback(params.value);\n    delete eventListenerGetValueCallbacks[tag];\n  });\n  globalEventEmitterAnimationFinishedListener = RCTDeviceEventEmitter.addListener('onNativeAnimatedModuleAnimationFinished', params => {\n    const animations = Array.isArray(params) ? params : [params];\n    for (const animation of animations) {\n      const {\n        animationId\n      } = animation;\n      const callback = eventListenerAnimationFinishedCallbacks[animationId];\n      if (callback) {\n        callback(animation);\n        delete eventListenerAnimationFinishedCallbacks[animationId];\n      }\n    }\n  });\n}\nfunction generateNewNodeTag() {\n  return __nativeAnimatedNodeTagCount++;\n}\nfunction generateNewAnimationId() {\n  return __nativeAnimationIdCount++;\n}\nfunction assertNativeAnimatedModule() {\n  invariant(NativeAnimatedModule, 'Native animated module is not available');\n}\nlet _warnedMissingNativeAnimated = false;\nfunction shouldUseNativeDriver(config) {\n  if (config.useNativeDriver == null) {\n    console.warn('Animated: `useNativeDriver` was not specified. This is a required ' + 'option and must be explicitly set to `true` or `false`');\n  }\n  if (config.useNativeDriver === true && !NativeAnimatedModule) {\n    if (process.env.NODE_ENV !== 'test') {\n      if (!_warnedMissingNativeAnimated) {\n        console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'Make sure to run `bundle exec pod install` first. Read more about autolinking: https://github.com/react-native-community/cli/blob/master/docs/autolinking.md');\n        _warnedMissingNativeAnimated = true;\n      }\n    }\n    return false;\n  }\n  return config.useNativeDriver || false;\n}\nfunction transformDataType(value) {\n  if (typeof value !== 'string') {\n    return value;\n  }\n  if (value.endsWith('deg')) {\n    const degrees = parseFloat(value) || 0;\n    return degrees * Math.PI / 180.0;\n  } else if (value.endsWith('rad')) {\n    return parseFloat(value) || 0;\n  } else {\n    return value;\n  }\n}\nexport default {\n  API,\n  generateNewNodeTag,\n  generateNewAnimationId,\n  assertNativeAnimatedModule,\n  shouldUseNativeDriver,\n  transformDataType,\n  get nativeEventEmitter() {\n    if (!nativeEventEmitter) {\n      nativeEventEmitter = new NativeEventEmitter(Platform.OS !== 'ios' ? null : NativeAnimatedModule);\n    }\n    return nativeEventEmitter;\n  }\n};","map":{"version":3,"names":["ReactNativeFeatureFlags","NativeEventEmitter","RCTDeviceEventEmitter","Platform","NativeAnimatedNonTurboModule","NativeAnimatedTurboModule","invariant","nullthrows","NativeAnimatedModule","__nativeAnimatedNodeTagCount","__nativeAnimationIdCount","nativeEventEmitter","waitingForQueuedOperations","Set","queueOperations","queue","singleOpQueue","isSingleOpBatching","OS","queueAndExecuteBatchedOperations","animatedShouldUseSingleOp","flushQueueTimeout","eventListenerGetValueCallbacks","eventListenerAnimationFinishedCallbacks","globalEventEmitterGetValueListener","globalEventEmitterAnimationFinishedListener","createNativeOperations","methodNames","nativeOperations","ii","length","methodName","operationID","args","push","method","NativeOperations","API","getValue","tag","saveValueCallback","setWaitingForIdentifier","id","add","animatedShouldDebounceQueueFlush","clearTimeout","unsetWaitingForIdentifier","delete","size","disableQueue","prevTimeout","clearImmediate","setImmediate","flushQueue","process","env","NODE_ENV","ensureGlobalEventEmitterListeners","startOperationBatch","q","l","finishOperationBatch","createAnimatedNode","config","updateAnimatedNodeConfig","startListeningToAnimatedNodeValue","stopListeningToAnimatedNodeValue","connectAnimatedNodes","parentTag","childTag","disconnectAnimatedNodes","startAnimatingNode","animationId","nodeTag","endCallback","stopAnimation","setAnimatedNodeValue","value","setAnimatedNodeOffset","offset","flattenAnimatedNodeOffset","extractAnimatedNodeOffset","connectAnimatedNodeToView","viewTag","disconnectAnimatedNodeFromView","restoreDefaultValues","dropAnimatedNode","addAnimatedEventToView","eventName","eventMapping","removeAnimatedEventFromView","animatedNodeTag","addListener","params","callback","animations","Array","isArray","animation","generateNewNodeTag","generateNewAnimationId","assertNativeAnimatedModule","_warnedMissingNativeAnimated","shouldUseNativeDriver","useNativeDriver","console","warn","transformDataType","endsWith","degrees","parseFloat","Math","PI"],"sources":["F:/MiniProject/node_modules/react-native/src/private/animated/NativeAnimatedHelper.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {EventSubscription} from '../../../Libraries/vendor/emitter/EventEmitter';\nimport type {EventConfig} from '../../../Libraries/Animated/AnimatedEvent';\nimport type {\n  AnimationConfig,\n  EndCallback,\n} from '../../../Libraries/Animated/animations/Animation';\nimport type {\n  AnimatedNodeConfig,\n  EventMapping,\n} from '../../../Libraries/Animated/NativeAnimatedModule';\n\nimport * as ReactNativeFeatureFlags from '../featureflags/ReactNativeFeatureFlags';\nimport NativeEventEmitter from '../../../Libraries/EventEmitter/NativeEventEmitter';\nimport RCTDeviceEventEmitter from '../../../Libraries/EventEmitter/RCTDeviceEventEmitter';\nimport Platform from '../../../Libraries/Utilities/Platform';\nimport NativeAnimatedNonTurboModule from '../../../Libraries/Animated/NativeAnimatedModule';\nimport NativeAnimatedTurboModule from '../../../Libraries/Animated/NativeAnimatedTurboModule';\nimport invariant from 'invariant';\nimport nullthrows from 'nullthrows';\n\n// TODO T69437152 @petetheheat - Delete this fork when Fabric ships to 100%.\nconst NativeAnimatedModule: typeof NativeAnimatedTurboModule =\n  NativeAnimatedNonTurboModule ?? NativeAnimatedTurboModule;\n\nlet __nativeAnimatedNodeTagCount = 1; /* used for animated nodes */\nlet __nativeAnimationIdCount = 1; /* used for started animations */\n\nlet nativeEventEmitter;\n\nlet waitingForQueuedOperations = new Set<string>();\nlet queueOperations = false;\nlet queue: Array<() => void> = [];\nlet singleOpQueue: Array<mixed> = [];\n\nconst isSingleOpBatching =\n  Platform.OS === 'android' &&\n  NativeAnimatedModule?.queueAndExecuteBatchedOperations != null &&\n  ReactNativeFeatureFlags.animatedShouldUseSingleOp();\nlet flushQueueTimeout = null;\n\nconst eventListenerGetValueCallbacks: {\n  [number]: (value: number) => void,\n} = {};\nconst eventListenerAnimationFinishedCallbacks: {\n  [number]: EndCallback,\n} = {};\nlet globalEventEmitterGetValueListener: ?EventSubscription = null;\nlet globalEventEmitterAnimationFinishedListener: ?EventSubscription = null;\n\nfunction createNativeOperations(): $NonMaybeType<typeof NativeAnimatedModule> {\n  const methodNames = [\n    'createAnimatedNode', // 1\n    'updateAnimatedNodeConfig', // 2\n    'getValue', // 3\n    'startListeningToAnimatedNodeValue', // 4\n    'stopListeningToAnimatedNodeValue', // 5\n    'connectAnimatedNodes', // 6\n    'disconnectAnimatedNodes', // 7\n    'startAnimatingNode', // 8\n    'stopAnimation', // 9\n    'setAnimatedNodeValue', // 10\n    'setAnimatedNodeOffset', // 11\n    'flattenAnimatedNodeOffset', // 12\n    'extractAnimatedNodeOffset', // 13\n    'connectAnimatedNodeToView', // 14\n    'disconnectAnimatedNodeFromView', // 15\n    'restoreDefaultValues', // 16\n    'dropAnimatedNode', // 17\n    'addAnimatedEventToView', // 18\n    'removeAnimatedEventFromView', // 19\n    'addListener', // 20\n    'removeListener', // 21\n  ];\n  const nativeOperations: {\n    [$Values<typeof methodNames>]: (...$ReadOnlyArray<mixed>) => void,\n  } = {};\n  if (isSingleOpBatching) {\n    for (let ii = 0, length = methodNames.length; ii < length; ii++) {\n      const methodName = methodNames[ii];\n      const operationID = ii + 1;\n      nativeOperations[methodName] = (...args) => {\n        // `singleOpQueue` is a flat array of operation IDs and arguments, which\n        // is possible because # arguments is fixed for each operation. For more\n        // details, see `NativeAnimatedModule.queueAndExecuteBatchedOperations`.\n        singleOpQueue.push(operationID, ...args);\n      };\n    }\n  } else {\n    for (let ii = 0, length = methodNames.length; ii < length; ii++) {\n      const methodName = methodNames[ii];\n      nativeOperations[methodName] = (...args) => {\n        const method = nullthrows(NativeAnimatedModule)[methodName];\n        // If queueing is explicitly on, *or* the queue has not yet\n        // been flushed, use the queue. This is to prevent operations\n        // from being executed out of order.\n        if (queueOperations || queue.length !== 0) {\n          // $FlowExpectedError[incompatible-call] - Dynamism.\n          queue.push(() => method(...args));\n        } else {\n          // $FlowExpectedError[incompatible-call] - Dynamism.\n          method(...args);\n        }\n      };\n    }\n  }\n  // $FlowExpectedError[incompatible-return] - Dynamism.\n  return nativeOperations;\n}\n\nconst NativeOperations = createNativeOperations();\n\n/**\n * Wrappers around NativeAnimatedModule to provide flow and autocomplete support for\n * the native module methods, and automatic queue management on Android\n */\nconst API = {\n  getValue: (isSingleOpBatching\n    ? (tag, saveValueCallback) => {\n        if (saveValueCallback) {\n          eventListenerGetValueCallbacks[tag] = saveValueCallback;\n        }\n        /* $FlowExpectedError[incompatible-call] - `saveValueCallback` is handled\n            differently when `isSingleOpBatching` is enabled. */\n        NativeOperations.getValue(tag);\n      }\n    : (tag, saveValueCallback) => {\n        NativeOperations.getValue(tag, saveValueCallback);\n      }) as $NonMaybeType<typeof NativeAnimatedModule>['getValue'],\n\n  setWaitingForIdentifier(id: string): void {\n    waitingForQueuedOperations.add(id);\n    queueOperations = true;\n    if (\n      ReactNativeFeatureFlags.animatedShouldDebounceQueueFlush() &&\n      flushQueueTimeout\n    ) {\n      clearTimeout(flushQueueTimeout);\n    }\n  },\n\n  unsetWaitingForIdentifier(id: string): void {\n    waitingForQueuedOperations.delete(id);\n\n    if (waitingForQueuedOperations.size === 0) {\n      queueOperations = false;\n      API.disableQueue();\n    }\n  },\n\n  disableQueue(): void {\n    invariant(NativeAnimatedModule, 'Native animated module is not available');\n\n    if (ReactNativeFeatureFlags.animatedShouldDebounceQueueFlush()) {\n      const prevTimeout = flushQueueTimeout;\n      clearImmediate(prevTimeout);\n      flushQueueTimeout = setImmediate(API.flushQueue);\n    } else {\n      API.flushQueue();\n    }\n  },\n\n  flushQueue: (isSingleOpBatching\n    ? (): void => {\n        // TODO: (T136971132)\n        invariant(\n          NativeAnimatedModule || process.env.NODE_ENV === 'test',\n          'Native animated module is not available',\n        );\n        flushQueueTimeout = null;\n\n        if (singleOpQueue.length === 0) {\n          return;\n        }\n\n        // Set up event listener for callbacks if it's not set up\n        ensureGlobalEventEmitterListeners();\n\n        // Single op batching doesn't use callback functions, instead we\n        // use RCTDeviceEventEmitter. This reduces overhead of sending lots of\n        // JSI functions across to native code; but also, TM infrastructure currently\n        // does not support packing a function into native arrays.\n        NativeAnimatedModule?.queueAndExecuteBatchedOperations?.(singleOpQueue);\n        singleOpQueue.length = 0;\n      }\n    : (): void => {\n        // TODO: (T136971132)\n        invariant(\n          NativeAnimatedModule || process.env.NODE_ENV === 'test',\n          'Native animated module is not available',\n        );\n        flushQueueTimeout = null;\n\n        if (queue.length === 0) {\n          return;\n        }\n\n        if (Platform.OS === 'android') {\n          NativeAnimatedModule?.startOperationBatch?.();\n        }\n\n        for (let q = 0, l = queue.length; q < l; q++) {\n          queue[q]();\n        }\n        queue.length = 0;\n\n        if (Platform.OS === 'android') {\n          NativeAnimatedModule?.finishOperationBatch?.();\n        }\n      }) as () => void,\n\n  createAnimatedNode(tag: number, config: AnimatedNodeConfig): void {\n    NativeOperations.createAnimatedNode(tag, config);\n  },\n\n  updateAnimatedNodeConfig(tag: number, config: AnimatedNodeConfig): void {\n    NativeOperations.updateAnimatedNodeConfig?.(tag, config);\n  },\n\n  startListeningToAnimatedNodeValue(tag: number): void {\n    NativeOperations.startListeningToAnimatedNodeValue(tag);\n  },\n\n  stopListeningToAnimatedNodeValue(tag: number): void {\n    NativeOperations.stopListeningToAnimatedNodeValue(tag);\n  },\n\n  connectAnimatedNodes(parentTag: number, childTag: number): void {\n    NativeOperations.connectAnimatedNodes(parentTag, childTag);\n  },\n\n  disconnectAnimatedNodes(parentTag: number, childTag: number): void {\n    NativeOperations.disconnectAnimatedNodes(parentTag, childTag);\n  },\n\n  startAnimatingNode: (isSingleOpBatching\n    ? (animationId, nodeTag, config, endCallback) => {\n        if (endCallback) {\n          eventListenerAnimationFinishedCallbacks[animationId] = endCallback;\n        }\n        /* $FlowExpectedError[incompatible-call] - `endCallback` is handled\n            differently when `isSingleOpBatching` is enabled. */\n        NativeOperations.startAnimatingNode(animationId, nodeTag, config);\n      }\n    : (animationId, nodeTag, config, endCallback) => {\n        NativeOperations.startAnimatingNode(\n          animationId,\n          nodeTag,\n          config,\n          endCallback,\n        );\n      }) as $NonMaybeType<typeof NativeAnimatedModule>['startAnimatingNode'],\n\n  stopAnimation(animationId: number) {\n    NativeOperations.stopAnimation(animationId);\n  },\n\n  setAnimatedNodeValue(nodeTag: number, value: number): void {\n    NativeOperations.setAnimatedNodeValue(nodeTag, value);\n  },\n\n  setAnimatedNodeOffset(nodeTag: number, offset: number): void {\n    NativeOperations.setAnimatedNodeOffset(nodeTag, offset);\n  },\n\n  flattenAnimatedNodeOffset(nodeTag: number): void {\n    NativeOperations.flattenAnimatedNodeOffset(nodeTag);\n  },\n\n  extractAnimatedNodeOffset(nodeTag: number): void {\n    NativeOperations.extractAnimatedNodeOffset(nodeTag);\n  },\n\n  connectAnimatedNodeToView(nodeTag: number, viewTag: number): void {\n    NativeOperations.connectAnimatedNodeToView(nodeTag, viewTag);\n  },\n\n  disconnectAnimatedNodeFromView(nodeTag: number, viewTag: number): void {\n    NativeOperations.disconnectAnimatedNodeFromView(nodeTag, viewTag);\n  },\n\n  restoreDefaultValues(nodeTag: number): void {\n    NativeOperations.restoreDefaultValues?.(nodeTag);\n  },\n\n  dropAnimatedNode(tag: number): void {\n    NativeOperations.dropAnimatedNode(tag);\n  },\n\n  addAnimatedEventToView(\n    viewTag: number,\n    eventName: string,\n    eventMapping: EventMapping,\n  ) {\n    NativeOperations.addAnimatedEventToView(viewTag, eventName, eventMapping);\n  },\n\n  removeAnimatedEventFromView(\n    viewTag: number,\n    eventName: string,\n    animatedNodeTag: number,\n  ) {\n    NativeOperations.removeAnimatedEventFromView(\n      viewTag,\n      eventName,\n      animatedNodeTag,\n    );\n  },\n};\n\nfunction ensureGlobalEventEmitterListeners() {\n  if (\n    globalEventEmitterGetValueListener &&\n    globalEventEmitterAnimationFinishedListener\n  ) {\n    return;\n  }\n  globalEventEmitterGetValueListener = RCTDeviceEventEmitter.addListener(\n    'onNativeAnimatedModuleGetValue',\n    params => {\n      const {tag} = params;\n      const callback = eventListenerGetValueCallbacks[tag];\n      if (!callback) {\n        return;\n      }\n      callback(params.value);\n      delete eventListenerGetValueCallbacks[tag];\n    },\n  );\n  globalEventEmitterAnimationFinishedListener =\n    RCTDeviceEventEmitter.addListener(\n      'onNativeAnimatedModuleAnimationFinished',\n      params => {\n        // TODO: remove Array.isArray once native changes have propagated\n        const animations = Array.isArray(params) ? params : [params];\n        for (const animation of animations) {\n          const {animationId} = animation;\n          const callback = eventListenerAnimationFinishedCallbacks[animationId];\n          if (callback) {\n            callback(animation);\n            delete eventListenerAnimationFinishedCallbacks[animationId];\n          }\n        }\n      },\n    );\n}\n\nfunction generateNewNodeTag(): number {\n  return __nativeAnimatedNodeTagCount++;\n}\n\nfunction generateNewAnimationId(): number {\n  return __nativeAnimationIdCount++;\n}\n\nfunction assertNativeAnimatedModule(): void {\n  invariant(NativeAnimatedModule, 'Native animated module is not available');\n}\n\nlet _warnedMissingNativeAnimated = false;\n\nfunction shouldUseNativeDriver(\n  config: $ReadOnly<{...AnimationConfig, ...}> | EventConfig,\n): boolean {\n  if (config.useNativeDriver == null) {\n    console.warn(\n      'Animated: `useNativeDriver` was not specified. This is a required ' +\n        'option and must be explicitly set to `true` or `false`',\n    );\n  }\n\n  if (config.useNativeDriver === true && !NativeAnimatedModule) {\n    if (process.env.NODE_ENV !== 'test') {\n      if (!_warnedMissingNativeAnimated) {\n        console.warn(\n          'Animated: `useNativeDriver` is not supported because the native ' +\n            'animated module is missing. Falling back to JS-based animation. To ' +\n            'resolve this, add `RCTAnimation` module to this app, or remove ' +\n            '`useNativeDriver`. ' +\n            'Make sure to run `bundle exec pod install` first. Read more about autolinking: https://github.com/react-native-community/cli/blob/master/docs/autolinking.md',\n        );\n        _warnedMissingNativeAnimated = true;\n      }\n    }\n    return false;\n  }\n\n  return config.useNativeDriver || false;\n}\n\nfunction transformDataType(value: number | string): number | string {\n  // Change the string type to number type so we can reuse the same logic in\n  // iOS and Android platform\n  if (typeof value !== 'string') {\n    return value;\n  }\n\n  // Normalize degrees and radians to a number expressed in radians\n  if (value.endsWith('deg')) {\n    const degrees = parseFloat(value) || 0;\n    return (degrees * Math.PI) / 180.0;\n  } else if (value.endsWith('rad')) {\n    return parseFloat(value) || 0;\n  } else {\n    return value;\n  }\n}\n\nexport default {\n  API,\n  generateNewNodeTag,\n  generateNewAnimationId,\n  assertNativeAnimatedModule,\n  shouldUseNativeDriver,\n  transformDataType,\n  // $FlowExpectedError[unsafe-getters-setters] - unsafe getter lint suppression\n  // $FlowExpectedError[missing-type-arg] - unsafe getter lint suppression\n  get nativeEventEmitter(): NativeEventEmitter {\n    if (!nativeEventEmitter) {\n      // $FlowFixMe[underconstrained-implicit-instantiation]\n      nativeEventEmitter = new NativeEventEmitter(\n        // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n        // If you want to use the native module on other platforms, please remove this condition and test its behavior\n        Platform.OS !== 'ios' ? null : NativeAnimatedModule,\n      );\n    }\n    return nativeEventEmitter;\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
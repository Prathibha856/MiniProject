import React from 'react';
import { useNavigate } from 'react-router-dom';
import { useVoice } from '../context/VoiceContext';
import { recognizeIntent, getRouteForIntent, getResponseForIntent } from '../services/nlpService';
import './VoiceButton.css';

const VoiceButton = () => {
  const navigate = useNavigate();
  const { voiceEnabled, voiceLanguage, isListening, startListening, speakText } = useVoice();

  if (!voiceEnabled) return null;

  const handleClick = () => {
    if (isListening) return;

    // Prompt user to speak
    const prompts = {
      en: "Listening... Please say a command",
      kn: "‡≤ï‡≥á‡≤≥‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥ç‡≤¶‡≥á‡≤®‡≥Ü... ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Ü‡≤¶‡≥á‡≤∂ ‡≤π‡≥á‡≤≥‡≤ø",
      hi: "‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç... ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§¨‡•ã‡§≤‡•á‡§Ç"
    };
    
    speakText(prompts[voiceLanguage] || prompts.en, voiceLanguage);

    setTimeout(() => {
      startListening(voiceLanguage, {
        onResult: (transcript) => {
          console.log('Voice command received:', transcript);
          processVoiceCommand(transcript);
        },
        onError: (error) => {
          console.error('Voice error:', error);
          const errorMsg = {
            en: "Sorry, I didn't catch that. Please try again.",
            kn: "‡≤ï‡≥ç‡≤∑‡≤Æ‡≤ø‡≤∏‡≤ø, ‡≤Ö‡≤∞‡≥ç‡≤•‡≤µ‡≤æ‡≤ó‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤. ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø.",
            hi: "‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§Ø‡§æ‡•§ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
          };
          speakText(errorMsg[voiceLanguage] || errorMsg.en, voiceLanguage);
        }
      });
    }, 1500); // Wait for prompt to finish
  };

  const processVoiceCommand = (text) => {
    // Use NLP service for advanced intent recognition
    const { intent, confidence, entities } = recognizeIntent(text);
    
    console.log('üé§ Voice Command:', text);
    console.log('üß† Detected Intent:', intent, `(${(confidence * 100).toFixed(1)}% confidence)`);
    console.log('üìä Extracted Entities:', entities);

    if (intent && confidence > 0.2) { // Lowered threshold from 0.3 to 0.2 for better recognition
      // Get personalized response with entities
      const response = getResponseForIntent(intent, voiceLanguage, entities);
      console.log('üîä Response:', response);
      speakText(response, voiceLanguage);
      
      // Navigate to the appropriate page using React Router
      const route = getRouteForIntent(intent);
      console.log('üöÄ Navigating to:', route);
      
      if (route) {
        setTimeout(() => {
          navigate(route);
          console.log('‚úÖ Navigation complete to:', route);
        }, 2000); // Wait for response to finish
      } else {
        console.log('‚ö†Ô∏è No route found for intent:', intent);
      }
    } else {
      // Low confidence or no intent detected
      console.log('‚ùå Low confidence or no intent detected');
      console.log('üìä Best intent was:', intent, 'with confidence:', (confidence * 100).toFixed(1) + '%');
      const fallbackMsg = {
        en: "I didn't quite understand that. Try saying: 'track bus', 'journey planner', 'crowd prediction', 'fare calculator', or 'time table'",
        kn: "‡≤Ö‡≤∞‡≥ç‡≤•‡≤µ‡≤æ‡≤ó‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤. '‡≤¨‡≤∏‡≥ç ‡≤ü‡≥ç‡≤∞‡≥ç‡≤Ø‡≤æ‡≤ï‡≥ç', '‡≤™‡≥ç‡≤∞‡≤Ø‡≤æ‡≤£ ‡≤Ø‡≥ã‡≤ú‡≤®‡≥Ü', '‡≤ú‡≤®‡≤∏‡≤Ç‡≤¶‡≤£‡≤ø', '‡≤¶‡≤∞ ‡≤ó‡≤£‡≤ï' ‡≤Ö‡≤•‡≤µ‡≤æ '‡≤∏‡≤Æ‡≤Ø ‡≤™‡≤ü‡≥ç‡≤ü‡≤ø' ‡≤π‡≥á‡≤≥‡≤ø",
        hi: "‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§Ø‡§æ‡•§ '‡§¨‡§∏ ‡§ü‡•ç‡§∞‡•à‡§ï', '‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ', '‡§≠‡•Ä‡§°‡§º', '‡§ï‡§ø‡§∞‡§æ‡§Ø‡§æ' ‡§Ø‡§æ '‡§∏‡§Æ‡§Ø ‡§∏‡§æ‡§∞‡§£‡•Ä' ‡§¨‡•ã‡§≤‡•á‡§Ç"
      };
      speakText(fallbackMsg[voiceLanguage] || fallbackMsg.en, voiceLanguage);
    }
  };

  return (
    <button 
      className={`floating-voice-btn ${isListening ? 'listening' : ''}`}
      onClick={handleClick}
      disabled={isListening}
      aria-label="Voice command"
      title="Click to give voice command"
    >
      <i className="fas fa-microphone"></i>
      {isListening && (
        <>
          <span className="pulse-ring"></span>
          <span className="listening-text">Listening...</span>
        </>
      )}
    </button>
  );
};

export default VoiceButton;
